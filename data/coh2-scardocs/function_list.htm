<!DOCTYPE html>
<html>
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-16">
<link href="scardoc.css" rel="stylesheet" type="text/css" charset="utf-8">
<title>ScarDoc - Function List</title>
</head>
<body><span class="subtitle">Function List</span><p>
<p><a name="Group_AIInterface"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>AIInterface</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="AI_ClearAllBudgetTotals"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ClearAllBudgetTotals( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears all the resources for each budget and recalculate their values </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_ClearAllBudgetWeight"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ClearAllBudgetWeight( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears all the budget weights that have been previously added </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_ClearBudgetTotal"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ClearBudgetTotal( <span class="arg">PlayerID</span> pPlayer, <span class="arg">String</span> budgetname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clear the given budget's account of all of its resources. </p>
<p>Example budget names are BUDGET_Units, BUDGET_Tech, BUDGET_Addon and BUDGET_Secure Example: AI_ClearBudgetTotal( player4, "BUDGET_Tech" )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_ClearBuildDemand"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ClearBuildDemand( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clear the build demand table </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_ClearClassPreference"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ClearClassPreference( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clear all class preferences that have been set up both class and anti-class </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_ClearImportance"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ClearImportance( <span class="arg">PlayerID</span> pPlayer, <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>This clears the importance override on this military point </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_ClearProductionLimits"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ClearProductionLimits( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears all PBG limits that were previously set </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_ClearTargetPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ClearTargetPlayer( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears the attack request for this player. This player will now attack any enemies.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_DoString"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_DoString( <span class="arg">PlayerID</span> pPlayer, <span class="arg">String</span> s )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Run this string in the AI of player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_Enable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_Enable( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables/Disables an AI player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_EnableAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_EnableAll( <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables/Disables all AI players </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_EnableComponent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_EnableComponent( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Boolean</span> enable, <span class="arg">Real</span> ct )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables/disables a component of the AI </p>
<p> Components:<br>	COMPONENT_Attacking<br>	COMPONENT_Defending<br>	COMPONENT_ForwardDefending<br>	COMPONENT_Resourcing<br>	COMPONENT_BuildUnits<br>	COMPONENT_BuildStructures<br>	COMPONENT_BuildResearch<br>	COMPONENT_Securing<br>	COMPONENT_BuildAddOns	COMPONENT_Tactics</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_EnablePlayerOption"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_EnablePlayerOption( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Boolean</span> bEnable, <span class="arg">Real</span> tp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>enables or disables an AI player option (currently options are: AIOPT_Retreat) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_ForceAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_ForceAttack( <span class="arg">PlayerID</span> pPlayer, <span class="arg">PlayerID</span> pPlayerTarget )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tells the AI to take all of its units and forces them to attack the given player immediately </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_GetDifficulty"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		AI_GetDifficulty( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the difficulty level of this AI player </p>
<p>Levels can be one of: AD_Easy, AD_Standard, AD_Hard, AD_Hardest</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_IsAIPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		AI_IsAIPlayer( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if player is an AI player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_IsEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		AI_IsEnabled( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if player is a AIPlayer and is enabled </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_LockEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_LockEntity( <span class="arg">PlayerID</span> pPlayer, <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Locks the entity and disables its tactics (if any) and the AI will no longer use this object </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_LockSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_LockSGroup( <span class="arg">PlayerID</span> ai_player, <span class="arg">SGroup</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Lock an SGroup from the ai_player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_LockSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_LockSquad( <span class="arg">PlayerID</span> pPlayer, <span class="arg">SquadID</span> pSquad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Locks the squad and disables its tactics (if any) and the AI will no longer use this object </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetAntiClassPreference"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetAntiClassPreference( <span class="arg">PlayerID</span> pPlayer, <span class="arg">String</span> className, <span class="arg">Real</span> increment )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Offset the anticlass preference to increase the demand for certain unit anticlasses </p>
<p>Classname can be: aiclass_infantry, aiclass_light_vehicle, aiclass_heavy_vehicle as defined in the AE under type_ai_class</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetBudgetWeight"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetBudgetWeight( <span class="arg">PlayerID</span> pPlayer, <span class="arg">String</span> budgetName, <span class="arg">Real</span> weight )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the given budget to the given weight </p>
<p>Example budget names are BUDGET_Units, BUDGET_Tech, BUDGET_Addon and BUDGET_Secure Example: AI_SetBudgetWeight( player4, "BUDGET_Tech", 50 )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetBuildDemand"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetBuildDemand( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Blueprint</span> pbg, <span class="arg">Real</span> start, <span class="arg">Real</span> increment )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the demand for this squadasd </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetBuildTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetBuildTable( <span class="arg">PlayerID</span> ai_player, <span class="arg">Table</span> build_table )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set a build order table for the ai_player </p>
<p> An example build table:<br>	local build_table =<br>	{<br>		&emsp;{SBP.ALLIED_RIFLEMEN, 1, 5},<br>		&emsp;{SBP.ALLIED_TANKTHINGY, 2, 3}<br>	}<br> The first number in each entry is the starting value -- the lowest number gets built first<br> The second number is the increment that happens each time the unit is built<br> NOTE: Setting build demand table clobbers the class preferences</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetClassPreference"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetClassPreference( <span class="arg">PlayerID</span> pPlayer, <span class="arg">String</span> className, <span class="arg">Real</span> increment )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Offset the class preference to increase the demand for certain unit class </p>
<p>Classname can be: aiclass_infantry, aiclass_light_vehicle, aiclass_heavy_vehicle as defined in the AE under type_ai_class</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetDifficulty"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetDifficulty( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Real</span> difficultyLevel )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the difficulty level of this AI player </p>
<p>Levels ca be one of: AD_Easy, AD_Standard, AD_Hard, AD_Hardest</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetImportance"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetImportance( <span class="arg">PlayerID</span> pPlayer, <span class="arg">EntityID</span> pEntity, <span class="arg">Real</span> importance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>This overrides the default importance of the given military point </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetProductionLimits"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetProductionLimits( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Blueprint</span> pbg, <span class="arg">Real</span> limit )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a limit to a PBG type (buildings, squads, upgrades, etc) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetProductionLimitsTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetProductionLimitsTable( <span class="arg">PlayerID</span> ai_player, <span class="arg">Table</span> limits_table )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set limits to the production items that an AI can build </p>
<p> An example production limites table:<br>	local production_limits_table =<br>	{<br>		&emsp;{SBP.ENGINEER_SQUAD, 2},<br>		&emsp;{EBP.ALLIED_BARRACKS, 0}<br>		&emsp;{UPG.ALLIED_MINESWEEPER, 0}<br>	}<br> The first argument is the table is the blueprint, and second: the number of those items the AI can build</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetTargetPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetTargetPlayer( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Real</span> playerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tells the AI to attack only the given player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_SetVictoryPointPercentage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_SetVictoryPointPercentage( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Real</span> percentage )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the victory point percentage - how much should we prefer victory points over resource points? Percentage should be between 0.0 and 1.0. 1.0 means 100 percent. 0.5 means choose equally between victory points and other kinds of points. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_UnlockAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_UnlockAll( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_UnlockEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_UnlockEntity( <span class="arg">PlayerID</span> pPlayer, <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Unlocks this entity so that AI can use it again </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_UnlockSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_UnlockSGroup( <span class="arg">PlayerID</span> ai_player, <span class="arg">SGroup</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Unlock an SGroup from the ai_player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_UnlockSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_UnlockSquad( <span class="arg">PlayerID</span> pPlayer, <span class="arg">SquadID</span> pSquad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Unlocks the given squad so the AI can use it again </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AI_UpdateStatics"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AI_UpdateStatics( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Re-updates the AI in regards to all the static objects in the world (if SCAR creates new strategic points dynamically this will need to be called) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Balance"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Balance</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Balance_CreateSquadsAtMarkerByResource"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroupID</span> 
		Balance_CreateSquadsAtMarkerByResource( <span class="arg">PlayerID</span> playerId, <span class="arg">String</span> squadgroupName, <span class="arg">String</span> squadBlueprint, <span class="arg">Table</span> load_out_table, <span class="arg">String</span> markername, <span class="arg">Float</span> requisition_amount, <span class="arg">Float</span> power_amount )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates the maximum number of squads of this loadout given the resources at a marker position and adds them to a squadgroup.  The squadgroup will be created if it doesnt exist. </p>
<p>Loadout will be clipped to unitMin and unitMax from the squad blueprint.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Balance_SetInit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Balance_SetInit( <span class="arg">LuaFunction</span> func )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the Lua Function used to initialize each Balance Tool iteration.  </p>
<p>The function is used to set up the forces that will battle</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_battlesim"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>battlesim</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="BattleSim_DumpResults"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		BattleSim_DumpResults( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>write all battle simulation result </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BattleSim_StartBattleSim"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		BattleSim_StartBattleSim( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>start battle simulation screen.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BattleSim_WriteOneResult"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		BattleSim_WriteOneResult( <span class="arg">const char</span> *s )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>record one sentence of battle sim result </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Blueprint"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Blueprint</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="BP_GetEntityBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityBlueprint</span> 
		BP_GetEntityBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns an entity property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetID"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		BP_GetID( <span class="arg">Blueprint</span> pbg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns an ID that uniquely identifies this pbg. NOTE: this is an arbitrary 32bit ID, and does not start from 0. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetMedalBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">MedalBlueprint</span> 
		BP_GetMedalBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a medal property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		BP_GetName( <span class="arg">Blueprint</span> pbg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return the path name of the group </p>
<p>Example name would be "abilities\ally_mad_minute_ability"</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetPropertyBagGroupCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		BP_GetPropertyBagGroupCount( <span class="arg">Real</span> type )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return the number of property bag groups of the same type </p>
<p>Example type would be PBG_Critical</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetPropertyBagGroupPathName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		BP_GetPropertyBagGroupPathName( <span class="arg">Real</span> type, <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return the path name of the group </p>
<p>Example name would be "abilities\ally_mad_minute_ability"</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetSquadBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadBlueprint</span> 
		BP_GetSquadBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a squad property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_IsPropertyBagGroupValid"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		BP_IsPropertyBagGroupValid( <span class="arg">String</span> groupname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return whether a blueprint exists at this path </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EBP_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EBP_Exists( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if an entity blueprint exists with the given name. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SBP_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SBP_Exists( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a squad blueprint exists with the given name. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Camera"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Camera</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Camera_AutoRotate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_AutoRotate( <span class="arg">Position</span> target, <span class="arg">Real</span> distance, <span class="arg">Real</span> declination, <span class="arg">Real</span> speed )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Procedurally rotates the camera around a target. Camera input will be disabled. distance is in meters, declination is in degrees, speed is in degrees/sec. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_ClampToMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_ClampToMarker( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clamps the camera's target position to a marker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_Dump"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_Dump( <span class="arg"></span> void )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Print current camera settings. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_FocusOnPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_FocusOnPosition( <span class="arg">Position</span> pos, <span class="arg">Boolean</span> bPan )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Camera would move to the specified position. bPan is a boolean flag that pans the camera if set to true </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_FocusOnTargetPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_FocusOnTargetPos( <span class="arg">Position</span> targetpos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Focus the Camera on the specificed position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_FollowEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_FollowEGroup( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the camera to follow the first entity in an EGroup. </p>
<p>The camera will follow it until the player takes control again.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_FollowEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_FollowEntity( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Camera will follow specified entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_FollowSelection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_FollowSelection( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Camera would follow current selection </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_FollowSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_FollowSGroup( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the camera to follow the first squad in an SGroup. </p>
<p>The camera will follow them until the player takes control again.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_FollowSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_FollowSquad( <span class="arg">SquadID</span> pSquad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Camera will follow specified squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_GetDeclination"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Camera_GetDeclination( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the current camera declination (tilt) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_GetOrbit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Camera_GetOrbit( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the current camera orbit (rotation) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_GetTargetPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Camera_GetTargetPos( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the current target position for the camera. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_GetTuningValue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Camera_GetTuningValue( <span class="arg">Real</span> tuningValue )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get values: TV_SlideTargetRate, TV_SlideTargetBase, TV_SlideTargetThreshold </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_GetZoomDist"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Camera_GetZoomDist( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the current zoom distance for the camera. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_IsDefault"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Camera_IsDefault( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the camera distance, orbit and declination are close to default values </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_IsInputEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Camera_IsInputEnabled( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the enabled/disabled state of the camera input. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_LockOnEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_LockOnEGroup( <span class="arg">EGroupID</span> egroup, <span class="arg">Float</span> declination, <span class="arg">Float</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Locks the camera to an EGroup's position and orientation (first entity), and a fixed arbitrary declination/distance (or -1 to allow user input)  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_LockOnEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_LockOnEntity( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> declination, <span class="arg">Real</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Locks the camera to an entity's position and orientation, and a fixed arbitrary declination/distance (or -1 to allow user input) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_LockOnSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_LockOnSGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">Float</span> declination, <span class="arg">Float</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Locks the camera to an SGroup's position and orientation (first entity), and a fixed arbitrary declination/distance (or -1 to allow user input)  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_MoveToEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_MoveToEGroup( <span class="arg">EGroupID</span> egroup[, <span class="arg">Boolean</span> pan, <span class="arg">Float</span> panRate] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Move the camera to an EGroup's location. The optional pan flag should be true if you want the camera to glide to the new location. You can specify a pan rate to use (use SLOW_CAMERA_PANNING for a default slower rate) </p>
<p>This function can be called through a CTRL object in NISlets.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_MoveToPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_MoveToPosition( <span class="arg">MarkerID/Pos</span> position[, <span class="arg">Boolean</span> pan, <span class="arg">Float</span> panRate] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Move the camera to desired location. The optional pan flag should be true if you want the camera to glide to the new location. You can specify a pan rate to use (use SLOW_CAMERA_PANNING for a default slower rate) </p>
<p>This function canNOT be called through a CTRL object in NISlets.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_MoveToPositionIfClose"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_MoveToPositionIfClose( <span class="arg">MarkerID/Pos</span> position )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Slightly refocus the camera to rest on a position if it's close by. </p>
<p>This function can be called through a CTRL object in NISlets.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_MoveToSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_MoveToSGroup( <span class="arg">SGroupID</span> sgroup[, <span class="arg">Boolean</span> pan, <span class="arg">Float</span> panRate] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Move the camera to an SGroup's location. The optional pan flag should be true if you want the camera to glide to the new location. You can specify a pan rate to use (use SLOW_CAMERA_PANNING for a default slower rate) </p>
<p>This function can be called through a CTRL object in NISlets.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_ReleaseEntityLock"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_ReleaseEntityLock( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Camera is no longer locked to an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_Reload"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_Reload( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reload all cameras' tuning values </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_ResetFocus"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_ResetFocus( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears state info related to camera focus </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_ResetToDefault"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_ResetToDefault( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reset camera position to default home position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_SetDeclination"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_SetDeclination( <span class="arg">Real</span> dec )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the current camera declination (tilt) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_SetDefault"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_SetDefault( <span class="arg">Float</span> height, <span class="arg">Float</span> declination, <span class="arg">Float</span> angle )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Helper function to set the default camera parameters </p>
<p>If the parameter is nil, the particular property is not modified</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_SetInputEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_SetInputEnabled( <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables / Disables camera input. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_SetOrbit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_SetOrbit( <span class="arg">Real</span> orbit )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the current camera orbit (rotation) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_SetTuningValue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_SetTuningValue( <span class="arg">Real</span> tuningValue, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set values: TV_SlideTargetRate, TV_SlideTargetBase, TV_SlideTargetThreshold </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_SetZoomDist"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_SetZoomDist( <span class="arg">Real</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the current zoom distance for the camera. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_StopAutoRotating"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_StopAutoRotating( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops the camera from procedurally rotating. Input is restored. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Camera_Unclamp"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Camera_Unclamp( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Frees up the camera (so it's not clamped to a marker anymore) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Command"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Command</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Cmd_AbandonTeamWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_AbandonTeamWeapon( <span class="arg">SGroupID</span> sgroupid[, <span class="arg">Boolean</span> preserveCrew, <span class="arg">Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to abandon their current team weapon if they have it and they could (tuning value in attribute editor) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Ability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Ability( <span class="arg">PlayerID/EGroupID/SGroupID</span> user, <span class="arg">AbilityBlueprint</span> blueprint, <span class="arg">[Position/SGroupID/EGroupID</span> target, <span class="arg">Position</span> direction, <span class="arg">Bool</span> skipCostPrereq, <span class="arg">Bool</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends an ability command to a player, egroup or sgroup. extra parameters are provided if the ability requires them. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_AttachSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_AttachSquads( <span class="arg">SGroupID</span> sgroup, <span class="arg">SGroupID</span> sgroupAttachee )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Attach the squad from sgroupnameAttachee to sgroupname.  Both SGroups must contain only one squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Attack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Attack( <span class="arg">SGroupID</span> sgroup, <span class="arg">SGroup/EGroup/Pos/Marker</span> target[, <span class="arg">Boolean</span> queued, <span class="arg">Boolean</span> stationary, <span class="arg">String</span> plan] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Issues an attack command to an SGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_AttackMove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_AttackMove( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> targetposition[, <span class="arg">Boolean</span> queued, <span class="arg">String</span> plan, <span class="arg">Real</span> coverSearchRadius] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to attack move to a position (anything whose position can be queried). can be queued, can follow a plan, can search for cover within a radius </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_AttackMoveThenCapture"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_AttackMoveThenCapture( <span class="arg">SGroupID</span> attacker, <span class="arg">EGroupID</span> target, <span class="arg">[!Boolean!queued</span> ] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Command attacker sgroup to attack move to strategic point target; when it is capturable, the sgroup would capture it </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_CaptureTeamWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_CaptureTeamWeapon( <span class="arg">SGroupID</span> sgroupid, <span class="arg">EGroupID</span> targetid, <span class="arg">[Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to capture team weapon entity group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Construct"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Construct( <span class="arg">SGroup</span> sgroupid, <span class="arg">Entity</span> blueprint, <span class="arg">EGroupID/Position/Marker</span> targetid[, <span class="arg">Position</span> Facing, <span class="arg">Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Orders a squad to contruct a building at specified position, or to continue construction on an existing building. </p>
<p>The command also checks to see if a building already exists at the location, and the squad will continue building it, if it is of the correct type.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_CriticalHit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_CriticalHit( <span class="arg">PlayerID</span> playerid, <span class="arg">SGroupID/EGroupID/Squad/Entity</span> target, <span class="arg">CriticalID</span> criticalid, <span class="arg">DamageID</span> damageid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Applies critical hit to entity/squad/sgroup/egroup </p>
<p>Player id doesn't have to be the owner as the applied entities but need to make sure the player is still alive</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_DetonateDemolitions"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_DetonateDemolitions( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> target[, <span class="arg">Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Detonates a building's demolitions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_DigIn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_DigIn( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> targetposition, <span class="arg">Position</span> facingposition )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to dig in the first position and facing the second position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_DigOut"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_DigOut( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to dig out if they are already dug in </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_DoPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_DoPlan( <span class="arg">SGroupID</span> sgroupid, <span class="arg">String</span> plan[, <span class="arg">Postion</span> pos, <span class="arg">Boolean!queued</span> ] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to execute a squad AI plan. pass in nil to execute the default plan. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Garrison"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID or SquadID id of the destination</span> 
		Cmd_Garrison( <span class="arg">SGroupID</span> fromsgroupid, <span class="arg">EGroupID/SGroupID</span> togroupid, <span class="arg">[Bool</span> overload, <span class="arg">Bool</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to load at a random entity or squad of the group </p>
<p>overload is a flag that will allow the hold entity to ignore maximum slot check</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_InstantDigIn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_InstantDigIn( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to dig in instantly at the current position and facing </p>
<p>This order should only be used in the beginning of missions since it skips all the dig in animation. Also, if any of the squad member is on terrain that doesn't allow dig in, the whole squad would refuse to instant dig in.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_InstantDigOut"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_InstantDigOut( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to dig out instantly </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_InstantGarrison"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_InstantGarrison( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>See Cmd_Garrison. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_InstantReinforceUnit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_InstantReinforceUnit( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> count )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends a instant reinforce command to all squads in a group.  count represents the number of commands to send. </p>
<p>Note: This function bypasses pre-reqs, costs and the production queue</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_InstantReinforceUnitPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_InstantReinforceUnitPos( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> count, <span class="arg">MarkerID/Pos</span> spawnlocation[, <span class="arg">Real</span> checktype[, <span class="arg">Real</span> failtype]] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends a instant reinforce command to all squads in a group.  count represents the number of commands to send. spawnlocation is where the reinforced unit will spawn. You can optionally find a hidden position by specifying a checktype (CHECK_OFFCAMERA, CHECK_IN_FOW or CHECK_BOTH), and what to do if a hidden position can't be found (SPAWN_ATMARKER, SPAWN_ATSQUAD, or DO_NOTHING) - SPAWN_ATMARKER is the default. </p>
<p>Note: This function bypasses pre-reqs and costs and the production queue</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_InstantSetupTeamWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_InstantSetupTeamWeapon( <span class="arg">SGroupID</span> sgroupid, <span class="arg">[Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to instant setup their team weapon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_InstantUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_InstantUpgrade( <span class="arg">PlayerID/EGroupID/SGroupID</span> target, <span class="arg">UpgradeBlueprint/Table</span> blueprint[, <span class="arg">Real</span> count] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends an instant upgrade command to a player, egroup or sgroup. accepts a single upgrade or table of upgrades. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Move"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Move( <span class="arg">SGroupID</span> sgroup, <span class="arg">Pos/SGroupID/EGroupID/MarkerID</span> position, <span class="arg">[Boolean</span> queued, <span class="arg">MarkerID</span> deleteWhenNearMarker, <span class="arg">Position</span> facing, <span class="arg">Real</span> offset, <span class="arg">Real</span> distance, <span class="arg">Real</span> coverSearchRadius] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Move a squad group to a given position. </p>
<p>Supports facing, 'offset' movement, and can find cover. The sgroup can be deleted when in proximity of a marker (it assumes a proximity of 5 if you forget to set one on the marker)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_MoveAwayFromPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_MoveAwayFromPos( <span class="arg">SGroupID</span> sgroup, <span class="arg">Pos</span> position, <span class="arg">Int</span> radius, <span class="arg">[Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Move a squad group out of a position to a certain radius </p>
<p>All squads in the group will move away from the centre position from its current position</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_MoveToClosestMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">markerID</span> 
		Cmd_MoveToClosestMarker( <span class="arg">SGroupID</span> sgroup, <span class="arg">Table</span> markertable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Moves a squad group to the closest marker in a list/table of MarkerIDs. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_MoveToThenCapture"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_MoveToThenCapture( <span class="arg">SGroupID</span> attacker, <span class="arg">EGroupID</span> target, <span class="arg">[!Boolean!queued</span> ] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Command attacker sgroup to attack move to strategic point target; when it is capturable, the sgroup would capture it </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_ReinforceUnit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_ReinforceUnit( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> count )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends a reinforce command to all squads in a group.  count represents the number of commands to send. </p>
<p>Note: To reinforce squad bypassing the pre-reqs and costs use Cmd_InstantReinforceUnit.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_ReinforceUnitPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_ReinforceUnitPos( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> count, <span class="arg">MarkerID/Pos</span> spawnlocation[, <span class="arg">Real</span> checktype[, <span class="arg">Real</span> failtype]] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends a reinforce command to all squads in a group.  count represents the number of commands to send. spawnlocation is where the reinforced unit will spawn. You can optionally find a hidden position by specifying a checktype (CHECK_OFFCAMERA, CHECK_IN_FOW or CHECK_BOTH), and what to do if a hidden position can't be found (SPAWN_ATMARKER, SPAWN_ATSQUAD, or DO_NOTHING) - SPAWN_ATMARKER is the default. </p>
<p>To reinforce squads bypassing the pre-reqs and costs use Cmd_InstantReinforceUnit </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Retreat"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Retreat( <span class="arg">SGroupID</span> sgroup[, <span class="arg">Position</span> location, <span class="arg">MarkerID</span> deleteWhenNearMarker, <span class="arg">Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to retreat, optionally to a specific location. The sgroup can be deleted when in proximity of a marker (it assumes a proximity of 5 if you forget to set one on the marker) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_RevertOccupiedBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_RevertOccupiedBuilding( <span class="arg">SGroupID</span> sgroupid, <span class="arg">EGroupID</span> targetid, <span class="arg">[Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Order a squad group to revert occupied building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_SetDemolitions"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_SetDemolitions( <span class="arg">SGroupID</span> sgroupid, <span class="arg">EGroupID</span> targetid[, <span class="arg">Boolean</span> skipCostPrereq, <span class="arg">Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Orders a squad group to place demolition charges on a building (egroup). Function does nothing if egroup cannot be detonated, or player can't afford the demolitions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_SquadCamouflageStance"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_SquadCamouflageStance( <span class="arg">SGroupID</span> sgroup, <span class="arg">CamouflageStanceID</span> stanceid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends an camouflage stance command to all squads in a group.  stanceid should be the number returned by Util_GetCamouflageStanceID( stancename ) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_SquadPath"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_SquadPath( <span class="arg">SGroupID</span> sgroup, <span class="arg">String</span> pathName, <span class="arg">Boolean</span> bFromClosest, <span class="arg">Real</span> loop, <span class="arg">Boolean</span> bAttackMove, <span class="arg">Float</span> pauseTime[, <span class="arg">MarkerID</span> deleteWhenNearMarker, <span class="arg">Boolean</span> queued, <span class="arg">Boolean</span> bMoveForward] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a command to the squad to follow a path. Can wait at each waypoint. The sgroup can be deleted when in proximity of a marker if you pass in the marker as the 7th argument (it assumes a proximity of 5 if you forget to set one on the marker) </p>
<p>loop can be: LOOP_NONE, LOOP_NORMAL, LOOP_TOGGLE_DIRECTION</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_SquadPatrolMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_SquadPatrolMarker( <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Causes a squad to patrol a marker attacking any enemies that come within its radius. If used on circular markers, the radius must be at least 5. To stop the squad from patrolling the marker, use Cmd_Stop. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Stop"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Stop( <span class="arg">EGroupID/SGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends a stop command to egroup or sgroup. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Surrender"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Surrender( <span class="arg">SGroup!sgroupid</span> [, <span class="arg">Real</span> actionpoints, <span class="arg">Position</span> exitpos] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Orders a squad to surrender and awards the local player with an appropriate number of action points </p>
<p>The command will also overwrite the exit position as well, if you do not want the squads to exit at the map entry point.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Ungarrison"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Ungarrison( <span class="arg">EGroupID/SGroupID</span> fromgroupid[, <span class="arg">Position</span> destination, <span class="arg">Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Orders an EGroup or SGroup to kick out its occupants. If no position is specified, the occupants stay at the exit. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_UngarrisonSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_UngarrisonSquad( <span class="arg">SGroupID</span> sgroupid[, <span class="arg">Position</span> destination, <span class="arg">Boolean</span> queued] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Orders an sgroup to exit the building or vehicle that it's in. If no position is specified, the sgroup stays at the exit. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Cmd_Upgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_Upgrade( <span class="arg">PlayerID/EGroupID/SGroupID</span> user, <span class="arg">UpgradeBlueprint/Table</span> blueprint[, <span class="arg">Real</span> count] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends an upgrade command to a player, egroup or sgroup. accepts a single upgrade or table of upgrades. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_Entity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_Entity( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> entityCommand )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a entity command to a entity group(CMD_DefaultAction, CMD_Stop, CMD_Destroy, CMD_BuildSquad, CMD_CancelProduction, CMD_RallyPoint, CMD_AttackForced) </p>
<p> Entity commands are mostly used for buildings etc.  If you need to issue commands to units, use the Squad_Command function.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntityAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntityAbility( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send an entity ability command (CMD_Ability) to an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntityEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntityEntity( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> entityCommand, <span class="arg">EGroupID</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a entity-based command to an entity group. </p>
<p> Use this function to issue orders that require a entity to an entity group (eg. order a building to attack another building)<br> See Command_Entity for a list of all the possible entityCommands.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntityExt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntityExt( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> entityCommand, <span class="arg">Real</span> cmdparam, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a squad command to a squad group with custom data </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntityPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntityPos( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> entityCommand, <span class="arg">Position</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a position command to an entity group. </p>
<p> Use this function to issue orders that require a position to an entity group (eg. set a rally point for a building)<br> See Command_Entity for a list of all the possible entityCommands.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntityPosAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntityPosAbility( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Position</span> pos, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a positional ability command (CMD_Ability) to an entity </p>
<p> Use this function to issue ability orders that require a position to player</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntityPosDirAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntityPosDirAbility( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Position</span> pos, <span class="arg">Position</span> dir, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a positional/directional ability command (CMD_Ability) to an entity </p>
<p> Use this function to issue ability orders that require a position and a direction to player</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntityPosSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntityPosSquad( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> entityCommand, <span class="arg">Position</span> target, <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a dual target (position and squad) command to an entity group. </p>
<p> Use this function to issue orders that require a position and a squad to an entity group (eg. unloading squad from hold)<br> See Command_Entity for a list of all the possible entityCommands.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntitySquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntitySquad( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> entityCommand, <span class="arg">SGroupID</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a squad-based command to an entity group. </p>
<p> Use this function to issue orders that require a squad to an entity group (eg. order a building to attack a squad)<br> See Command_Entity for a list of all the possible entityCommands.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_EntityUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_EntityUpgrade( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">UpgradeBlueprint</span> upgrade, <span class="arg">Boolean</span> instant, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a squad command to a entity group with custom data </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_Player"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_Player( <span class="arg">PlayerID</span> player, <span class="arg">PlayerID</span> dest, <span class="arg">Real</span> playerCommand )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a player command to a player </p>
<p> PCMD_Ability</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerAbility( <span class="arg">PlayerID</span> player, <span class="arg">PlayerID</span> dest, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a player ability command (PCMD_Ability) to a player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerEntity( <span class="arg">PlayerID</span> player, <span class="arg">PlayerID</span> dest, <span class="arg">Real</span> playerCommand, <span class="arg">EGroupID</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send an entity command to a player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerEntityCriticalHit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerEntityCriticalHit( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> playerCommand, <span class="arg">CriticalBlueprint</span> criticalPBG, <span class="arg">Boolean</span> queued, <span class="arg">DamageBlueprint</span> damagePBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a player command to itself to act upon single with custom parameter and index data (PCMD_CriticalHit) </p>
<p> This is a special command for SCAR and debug feature</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerExt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerExt( <span class="arg">PlayerID</span> player, <span class="arg">PlayerID</span> dest, <span class="arg">Real</span> playerCommand, <span class="arg">Real</span> cmdparam, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a player command to a player with a custom flag </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerPos( <span class="arg">PlayerID</span> player, <span class="arg">PlayerID</span> dest, <span class="arg">Real</span> playerCommand, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a position command to a player. </p>
<p> Use this function to issue orders that require a position to player)<br> See Command_Player for a list of all the possible playerCommands.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerPosAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerPosAbility( <span class="arg">PlayerID</span> player, <span class="arg">PlayerID</span> dest, <span class="arg">Position</span> pos, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a positional ability command (PCMD_Ability) to a player </p>
<p> Use this function to issue ability orders that require a position to player</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerPosDirAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerPosDirAbility( <span class="arg">PlayerID</span> player, <span class="arg">PlayerID</span> dest, <span class="arg">Position</span> pos, <span class="arg">Position</span> dir, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a positional/directional ability command (PCMD_Ability) to a player </p>
<p> Use this function to issue ability orders that require a position and a direction to player</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerPosExt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerPosExt( <span class="arg">PlayerID</span> player, <span class="arg">PlayerID</span> dest, <span class="arg">Real</span> playerCommand, <span class="arg">Position</span> pos, <span class="arg">Real</span> cmdparam, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a position command to a player with extra info </p>
<p> Use this function to issue orders that require a position to player<br> See Command_Player for a list of all the possible playerCommands.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerSquadConstructBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerSquadConstructBuilding( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">EntityBlueprint</span> ebp, <span class="arg">Position</span> position, <span class="arg">Position</span> facing, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a player command to itself to order squads in the sgroup to construct the building at specific position and facing </p>
<p>structureBlueprint must be a valid building that can be constructed by the sgroup. This building would cost nothing and does not effect population and availability This is a special command for SCAR use</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerSquadConstructFence"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerSquadConstructFence( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">EntityBlueprint</span> ebp, <span class="arg">Position</span> posStart, <span class="arg">Position</span> posEnd, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a player command to itself to order squads in the sgroup to construct fences from posStart to posEnd </p>
<p>structureBlueprint must be a valid building that can be constructed by the sgroup. This building would cost nothing and does not effect population and availability This is a special command for SCAR use</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerSquadConstructField"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerSquadConstructField( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">EntityBlueprint</span> ebp, <span class="arg">Position</span> posStart, <span class="arg">Position</span> posEnd, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a player command to itself to order squads in the sgroup to construct a field ranging from posStart to posEnd </p>
<p>structureBlueprint must be a valid building that can be constructed by the sgroup. This building would cost nothing and does not effect population and availability This is a special command for SCAR use</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerSquadCriticalHit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerSquadCriticalHit( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> playerCommand, <span class="arg">CriticalBlueprint</span> criticalPBG, <span class="arg">Boolean</span> queued, <span class="arg">DamageBlueprint</span> damagePBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a player command to itself to act upon all entities in the sgroup with custom parameter and index data (PCMD_CriticalHit) </p>
<p> This is a special command for SCAR &amp; debug use</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_PlayerUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_PlayerUpgrade( <span class="arg">PlayerID</span> player, <span class="arg">UpgradeBlueprint</span> upgrade, <span class="arg">Boolean</span> instant, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends an upgrade command to a player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_Squad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_Squad( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a squad command to a squad group </p>
<p> SCMD_DefaultAction, SCMD_Move, SCMD_Stop, SCMD_Destroy, SCMD_BuildStructure, SCMD_Capture, SCMD_Attack, SCMD_ReinforceUnit,  SCMD_Upgrade, SCMD_CancelProduction SCMD_AttackMove, SCMD_Ability, SCMD_Attach, SCMD_Detach SCMD_Load,SCMD_UnloadSquads, SCMD_DoPlan SCMD_SlotItemRemove, SCMD_InstantReinforceUnit, SCMD_InstantUpgrade</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadAbility( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a ability command (SCMD_Ability) to a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadAttackMovePos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadAttackMovePos( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">Position</span> target, <span class="arg">String</span> planName, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a position ATTACK MOVE command to a squad group with custom data </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadDoCustomPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadDoCustomPlan( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">String</span> planFile, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a custom squad AI plan command to the squad to execute the plan specified towards the position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadDoCustomPlanTarget"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadDoCustomPlanTarget( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos, <span class="arg">String</span> planFile, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a custom squad AI plan command to the squad to execute the plan specified towards the position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadEntity( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">EGroupID</span> target, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send an entity command to a squad group. </p>
<p> Use this function to isssue an entity-based command to a squad group.<br> See Command_Squad for a list of all the possible squadCommands</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadEntityAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadEntityAbility( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">EGroupID</span> target, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a entity ability command (SCMD_Ability) to a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadEntityAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadEntityAttack( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">EGroupID</span> target, <span class="arg">Boolean</span> bCheckFOW, <span class="arg">Boolean</span> bStationary, <span class="arg">String</span> planName, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send an entity command ATTACK to a squad group. </p>
<p> Use this function to issue an entity-based command to a squad group with custom FOW check flag. (eg. order a squad to attack a building)<br> planName is the name of the custom plan file to execute. Pass in empty string to use the default<br> stationary flag uses SCMD_StationaryAttack instead where plan file is ignored and squad does not pursue its target See Command_Squad for a list of all the possible squadCommands</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadEntityBool"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadEntityBool( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">EGroupID</span> target, <span class="arg">Boolean</span> cmdparam, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a entity command to a squad group with custom BOOLEAN data </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadEntityExt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadEntityExt( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">EGroupID</span> target, <span class="arg">Real</span> cmdparam, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a entity command to a squad group with custom data </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadEntityLoad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadEntityLoad( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">EGroupID</span> target, <span class="arg">Boolean</span> bOverLoad, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send special squad command to a squad group with squad load parameters </p>
<p> This is a special command for loading squads into building (entity) holds (SCMD_Load, SCMD_InstantLoad)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadExt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadExt( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">Real</span> cmdparam, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> Send a squad command to a squad group with custom data </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadPos( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">Position</span> target, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a position command to a squad group. </p>
<p> Use this function to issue orders that require a position to a squad group (eg. order a squad to move to position, or attack position)<br> See Command_Squad for a list of all the possible squadCommands.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadPosAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadPosAbility( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a positional ability command (SCMD_Ability) to a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadPosExt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadPosExt( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">Position</span> target, <span class="arg">Real</span> cmdparam, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a position command to a squad group with custom data </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadPosFacing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadPosFacing( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">Position</span> target, <span class="arg">Position</span> facing, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a move-facing command to a squad group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadPositionAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadPositionAttack( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> target, <span class="arg">Boolean</span> bCheckFOW, <span class="arg">Boolean</span> bStationary, <span class="arg">String</span> planName, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send an position command ATTACK to a squad group. </p>
<p> Use this function to issue an position-based command to a squad group with custom FOW check flag. (eg. order a squad to attack a building)<br> planName is the name of the custom plan file to execute. Pass in empty string to use the default<br> stationary flag uses SCMD_StationaryAttack instead where plan file is ignored and squad does not pursue its target See Command_Squad for a list of all the possible squadCommands</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadPosPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadPosPos( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">Position</span> target, <span class="arg">Position</span> target2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a command to a squad group with 2 positional input </p>
<p> Use this function to issue orders that require a position to a squad group and additional data (eg. order a squad to dig in with facing)<br> See Command_Squad for a list of all the possible squadCommands.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadSquad( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">SGroupID</span> target, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send an squad-based command to a squad group. </p>
<p> Use this function to issue a squad-based command to a squad group. <br> See Command_Squad for a list of all the possible squadCommands</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadSquadAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadSquadAbility( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">SGroupID</span> target, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">Boolean</span> skipCostPrereq, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a squad ability command (SCMD_Ability) to a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadSquadAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadSquadAttack( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">SGroupID</span> target, <span class="arg">Boolean</span> bCheckFOW, <span class="arg">Boolean</span> bStationary, <span class="arg">String</span> planName, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send an squad-based command to a squad group. </p>
<p> Use this function to issue a squad-based command to a squad group with special boolean flag. (eg. order a squad to attack another squad)<br> If bCheckFOW is set to false, the squad would be able to attack other squads hidden in FOW <br> planName is the name of the custom plan file to execute. Pass in empty string to use the default<br> stationary flag uses SCMD_StationaryAttack instead where plan file is ignored and squad does not pursue its target See Command_Squad for a list of all the possible squadCommands</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadSquadExt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadSquadExt( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">SGroupID</span> target, <span class="arg">Real</span> cmdparam, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send a squad command to a squad group with custom data </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadSquadLoad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadSquadLoad( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> squadCommand, <span class="arg">SGroupID</span> target, <span class="arg">Boolean</span> bOverLoad, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Send special squad command to a squad group with squad load parameters </p>
<p> This is a special command for loading squads into vehicle (squad) holds (SCMD_Load, SCMD_InstantLoad)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Command_SquadUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Command_SquadUpgrade( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">UpgradeBlueprint</span> upgrade, <span class="arg">Boolean</span> instant, <span class="arg">Boolean</span> queued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sends an upgrade command to a squad group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Core"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Core</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Event_Delay"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Event_Delay( <span class="arg">Real</span> seconds )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Pauses for a given amount of time. This function MUST be called from a CTRL object in NISlet events only! </p>
<p>See Event_Start for more information on NISlet events.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Event_IsRunning"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Event_IsRunning( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a given event is running </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Event_Skip"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Event_Skip( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Completes execution of the event immediatley (all calls to Wait() are ignored) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Event_Start"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Event_Start( <span class="arg">LuaFunction</span> eventFunction, <span class="arg">Real</span> priority )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Starts event.  Event will not start until all rules are evaluated for this frame! </p>
<p>We allow saving events in multiplayer so please don't put any non-UI events in multiplayer Running events are not saved at all.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Event_StartEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Event_StartEx( <span class="arg">LuaFunction</span> eventFunction, <span class="arg">Real</span> priority, <span class="arg">LuaFunction</span> onComplete )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Starts an event the same way as Event_Start, but calls a user defined function when the event is over </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetScarFullFilename"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Misc_GetScarFullFilename( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the full path name to the main SCAR script </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_AddInit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Scar_AddInit( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Register an init function with the scar system. </p>
<p> This init function will be called when scar is started up.<br> **Important: Make sure you do not register two functions with the same name; the init function names should be unique.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_InitExists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Scar_InitExists( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if an init function exists </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_RemoveInit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Scar_RemoveInit( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Unregister an init function that was registered from Scar_AddInit </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_Add( <span class="arg">LuaFunction</span> f, <span class="arg">Real</span> priority )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed every frame </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_AddInterval"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_AddInterval( <span class="arg">LuaFunction</span> f, <span class="arg">Real</span> interval, <span class="arg">Real</span> priority )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed at every 'interval' seconds </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_AddIntervalEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_AddIntervalEx( <span class="arg">LuaFunction</span> f, <span class="arg">Real</span> delay, <span class="arg">Real</span> interval, <span class="arg">Real</span> calls, <span class="arg">Real</span> priority )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed 'calls' times, at every 'interval' seconds </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_AddOneShot"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_AddOneShot( <span class="arg">LuaFunction</span> f, <span class="arg">Real</span> interval, <span class="arg">Real</span> priority )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed once, after 'interval' seconds </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_ChangeInterval"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_ChangeInterval( <span class="arg">LuaFunction</span> f, <span class="arg">Real</span> interval )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Change 'interval' seconds of an existing rule </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		TimeRule_Exists( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Test if a rule is currently active </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_Remove( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a currently active rule </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_RemoveAll( <span class="arg">Real</span> maxpriority )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kills all rules. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_RemoveMe"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_RemoveMe( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a currently executing rule (only works inside a rule function) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TimeRule_Replace"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TimeRule_Replace( <span class="arg">LuaFunction</span> oldf, <span class="arg">LuaFunction</span> newf )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_DesignerLib"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>DesignerLib</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="ATGun_AddGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ATGun_AddGroup( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">PlayerID</span> player[, <span class="arg">Table</span> facingdirections, <span class="arg">Real</span> currentfacing, <span class="arg">Real</span> reinforcecount, <span class="arg">EGroupID/SGroupID/MarkerID/Pos</span> reinforcespawnlocation], <span class="arg">Boolean</span> threatarrow )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a gun to the gun manager. The manager will take care of turning it around to attack units, and optionally reinforcing it if the crew is killed. </p>
<p>If you pass in an EGroup, it will automatically find or create a corresponding SGroup with sg_ instead of the eg_ prefix.</p>
</td>
</tr>

</table>
</p><a name="ATGun_RemoveDirections"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ATGun_RemoveDirections( <span class="arg">SGroupID/EGroupID/SyncWeaponID</span> gun )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove's the direction settings for a gun, turning it into a fire-at-anything type.  </p>
<p>Use this if you are relocating a gun. Also removes any special first-trigger speech if you have any hooked up, as it may no longer be suitable if you're moving it.</p>
</td>
</tr>
</table>
</p><a name="ATGun_RemoveGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ATGun_RemoveGroup( <span class="arg">SGroupID/EGroupID/SyncWeaponID</span> gun )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a gun from the gun manager. </p>
</td>
</tr>
</table>
</p><a name="AutoCharge_AddSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoCharge_AddSGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID/Position/EGroupID</span> triggerarea[, <span class="arg">Real</span> triggerrange, <span class="arg">LuaFunction</span> onTrigger] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets an sgroup to charge a position when the player steps into the trigger zone </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoCharge_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoCharge_RemoveAll(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops monitoring all squads from the auto-charge functions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoCharge_RemoveSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoCharge_RemoveSGroup( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a squad from being monitored by the auto-charge functions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoCinematic"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoCinematic( <span class="arg">Boolean</span> in/out, <span class="arg">Real</span> seconds )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Toggles all cinematic related settings. true = go to cinematic, false = go back to normal </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoReinforce_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoReinforce_RemoveAll(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops monitoring all squads from the auto-reinforce functions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoReinforce_RemoveSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoReinforce_RemoveSGroup( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes an SGroup from the auto-reinforce functions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoRetreat_AddSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoRetreat_AddSGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID/Position/EGroupID</span> destination[, <span class="arg">Real</span> threshold, <span class="arg">LuaFunction</span> onTrigger] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets an sgroup to retreat to the given destination or building once pinned for a certain duration, or reduced to a third of it's original size </p>
<p>The optional threshold value should be a percentage (between 0.0 and 1.0) - when the member count drops below this, they retreat</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoRetreat_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoRetreat_RemoveAll(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops monitoring all squads from the auto-retreat functions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoRetreat_RemoveSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoRetreat_RemoveSGroup( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a squad from being monitored by the auto-retreat functions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoTerritory_AddEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoTerritory_AddEGroup( <span class="arg">EGroupID</span> egroup[, <span class="arg">EGroupID</span> egroup2, <span class="arg">EGroupID</span> egroup3...] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a territory to the automanager. You specify the territory by passing in an EGroup containing the flag. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoTerritory_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoTerritory_RemoveAll(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all territories from the automanager and shuts the system down. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="AutoTerritory_RemoveEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		AutoTerritory_RemoveEGroup( <span class="arg">EGroupID</span> egroup[, <span class="arg">EGroupID</span> egroup2, <span class="arg">EGroupID</span> egroup3...] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a territory from the automanager. You specify the territory by passing in an EGroup containing the flag. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BridgeTerritory_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		BridgeTerritory_Add( <span class="arg">EGroupID</span> bridge_egroup, <span class="arg">EGroupID</span> bridgepoint, <span class="arg">EGroupID</span> bank1point, <span class="arg">EGroupID</span> bank2point )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a bridge to the Bridge Territory Manager.  </p>
<p>bridgepoint, bank1point and bank2point should be egroups each containing one territory flag</p>
</td>
</tr>
</table>
</p><a name="Ceasefire_AddSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Ceasefire_AddSGroup( <span class="arg">SGroupID</span> sgroup[, <span class="arg">LuaFunction</span> function] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops an SGroup from auto-targetting, until one of their members is explicity given an attack order or Ceasefire_RemoveSGroup() is called (at which point they all start firing again) </p>
<p>You can optionally specify a function that will be called when the ceasefire is broken by the game (rather than by calling Ceasefire_RemoveSGroup)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Ceasefire_RemoveSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Ceasefire_RemoveSGroup( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes the ceasefire effect from an sgroup. This may already have been removed by issuing an attack order directly to the group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_DefaultGameRestore"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_DefaultGameRestore(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Restores various aspects of the single player game after loading a mission from a save game </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Resources_Disable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Resources_Disable(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Disables any resource income - useful to stop resources accruing during the opening movie </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Resources_Enable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Resources_Enable(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Re-enables resource income.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ShootTheSky_AddSyncWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ShootTheSky_AddSyncWeapon( <span class="arg">SyncWeaponID</span> syncweapon, <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Forces a sync weapon to shoot at the sky, so long as it's manned by a given player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ShootTheSky_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ShootTheSky_RemoveAll(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops all sync weapons from going through their "shooting at the sky" routine. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ShootTheSky_RemoveSyncWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ShootTheSky_RemoveSyncWeapon( <span class="arg">SyncWeaponID</span> syncweapon )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a sync weapon from the "shoot at the sky" system. It can then target people again. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SmokeEntrance_Do"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SmokeEntrance_Do( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Triggers smoke to come in from the map edge, at the position and direction of the given marker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Table_GetRandomItem"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Item/Table</span> 
		Table_GetRandomItem( <span class="arg">Table</span> table[, <span class="arg">Real</span> numberofitems] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a random item from a table. You can return multiple items (without duplicates) by passing in an optional number parameter. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_AI_Setup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_AI_Setup( <span class="arg">playerID</span> Player, <span class="arg">table</span> CapLimits, <span class="arg">playerID</span> Target, <span class="arg">int</span> AI_difficulty, <span class="arg">int</span> ProdTemplate, <span class="arg">int</span> Aggression, <span class="arg">int</span> Preference, <span class="arg">int</span> Counter )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Utility wrapper to setup the AI. Visit Scardoc to read the extended description. </p>
<p><br> An example use:<br> Util_AI_Setup(player5, 10, player1, 1, 6, 5, 2, 3)<br> player5 = the AI player <br> 10 = the popcap override value <br> player1 = the main target for the AI <br> 1 = the difficulty setting <br> 6 = the AI production template table entry <br> 5 = the aggression setting, 1-5, 5 is the most aggressive <br> 2 = the unit preference, 1-5, 1 is infantry heavy, 5 is vehicle heavy<br> 3 = the counter preference, 1-5, 1 is anti-infantry, 5 is anti-vehicle<br> <br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_SpawnRaft"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_SpawnRaft( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> eg_raft, <span class="arg">SGroupID</span> sgroup, <span class="arg">SquadBlueprint/Table</span> sbp, <span class="arg">Positon</span> spawn, <span class="arg">Position</span> land, <span class="arg">[Real</span> numsquads, <span class="arg">Real</span> loadout] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Spawns a raft that will travel from the spawn location to a specified landing location. </p>
<p>Note: the raft does not know the difference between land and water and will travel over all of it. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_EGroup"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>EGroup</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="EGroup_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Add( <span class="arg">EGroupID</span> group, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds an entity to the end of a group if the group doesnt already have it. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_AddEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_AddEGroup( <span class="arg">EGroupID</span> group, <span class="arg">EGroupID</span> grouptoadd )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Appends the entities in one group to another group.   </p>
<p> All entities from 'grouptoadd' will be added to 'group'.<br> If 'group' already contains an entity from 'grouptoadd' it will not be added.<br> This function does not clear the contents of 'grouptoadd'.<br> Example: Add group2 (0, 10, 11, 22) to group1 (1, 11, 20) --&gt; group1 would now be (1, 11, 20, 0, 10, 22)<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CanSeeEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_CanSeeEGroup( <span class="arg">EGroupID</span> egroup, <span class="arg">EGroupID</span> targetegroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY entities in a group can see ALL or ANY entities in a given egroup. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CanSeeSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_CanSeeSGroup( <span class="arg">EGroupID</span> egroup, <span class="arg">SGroupID</span> targetsgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY entities in a group can see ALL or ANY squads in a given sgroup. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Clear"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Clear( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all entities from a group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Compare"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_Compare( <span class="arg">EGroupID</span> group1, <span class="arg">EGroupID</span> group2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the contents of the two groups are equal. Order of the entities does not matter. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_ContainsBlueprints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_ContainsBlueprints( <span class="arg">EGroupID</span> egroup, <span class="arg">BP/Table</span> blueprint, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if a group contains ALL or ANY of the blueprints. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_ContainsEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_ContainsEGroup( <span class="arg">EGroupID</span> egroup1, <span class="arg">EGroupID</span> egroup2, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if EGroup1 contains ANY or ALL of EGroup2 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_ContainsEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_ContainsEntity( <span class="arg">EGroupID</span> egroup, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if EGroup contains a particular EntityID </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Count"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		EGroup_Count( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the total number of spawned and despawned entities in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CountAlive"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">int</span> 
		EGroup_CountAlive( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the number of alive entities (both spawned and despawned) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CountDeSpawned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		EGroup_CountDeSpawned( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of despawned entities in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CountSpawned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		EGroup_CountSpawned( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of spawned entities in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Create"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EGroupID</span> 
		EGroup_Create( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a new entity group with the given name. </p>
<p> Entity groups are used for buildings and objects such as rocks and trees.<br> If you need to issue orders to a group vehicles or units you must use a SquadGroupObs.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CreateIfNotFound"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EGroupID</span> 
		EGroup_CreateIfNotFound( <span class="arg">String</span> egroupname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find a entity group from name.  Creates a new one with given name if it doesnt exist. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CreateKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_CreateKickerMessage( <span class="arg">EGroupID</span> group, <span class="arg">LocString</span> textid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create and display kicker message on the each entity in the egroup to the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_DeSpawn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_DeSpawn( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Despawn all spawned entities in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Destroy"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Destroy( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Manually destroy a group that you dont need anymore. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_DestroyAllEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_DestroyAllEntities( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Destroys all spawned and despawned entities in a group. </p>
<p> Be careful not to confuse this with EGroup_Destroy which destroys the group and NOT the items it contains.  This function will destroy spawned and despawned items in a group</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Duplicate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Duplicate( <span class="arg">EGroupID</span> egroupid1, <span class="arg">EGroupID</span> egroupid2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Duplicates an EGroup </p>
<p> Creates a copy of egroup1 in egroup2. The function will clear egroup2 beforehand if necessary.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_EnableMinimapIndicator"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_EnableMinimapIndicator( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables the minimap indicator for all entities in a group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_Exists( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity group with the given name exists </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Filter"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Filter( <span class="arg">EGroupID</span> egroup, <span class="arg">String/ID/Table</span> blueprint, <span class="arg">Real</span> filtertype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Filters an EGroup by blueprint. </p>
<p> Blueprints can be provided by name or by ID, and in a table if you want to filter on more than one type. Setting filtertype to FILTER_KEEP results in the group only containing entities of the types listed in the blueprint table. Setting filtertype to FILTER_REMOVE will strip those same entities out and leave those that aren't of the types listed.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_FilterUnderConstruction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_FilterUnderConstruction( <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> filtertype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Filters an EGroup by construction status. </p>
<p> Setting filtertype to FILTER_KEEP results in the group only containing those entities that are in the process of being built. Setting filtertype to FILTER_REMOVE will strip those same entities out and leave those that are complete.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_ForEach"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_ForEach( <span class="arg">EGroupID</span> egroup, <span class="arg">LuaBinding::StackVarFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return true to break or false to continue. </p>
<p> function Rule_Test( )<br> &emsp;local DespawnEntity = function( egroupid, itemindex, entityID )<br> &emsp;&emsp;Entity_Despawn( entityID )<br> &emsp;end<br><br> &emsp;EGroup_ForEach( EGroup_FromName("eg_PlayersHQ"), DespawnEntity )<br> end<br> Note: This function iterates over SPAWNED ENTITIES ONLY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_ForEachAllOrAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_ForEachAllOrAny( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all, <span class="arg">LuaBinding::StackVarFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return a bool. </p>
<p> Only use this to TEST conditions on entities. DO NOT use this to perform operations on all entities, since it may not call your function on all entities (due to short circuit evaluation). This is used for checking if ALL or ANY items in a group match a given predicate. (eg. Are all items in a group choas marines)<br> Note: This function iterates over SPAWNED ENTITIES ONLY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_ForEachAllOrAnyEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_ForEachAllOrAnyEx( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all, <span class="arg">LuaBinding::StackVarFunction</span> f, <span class="arg">Boolean</span> spawned, <span class="arg">Boolean</span> despawned )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Same as EGroup_ForEachAllOrAny except you have a choice to iterate over spawned entities, despawned entities, or both. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_ForEachEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_ForEachEx( <span class="arg">EGroupID</span> egroup, <span class="arg">LuaBinding::StackVarFunction</span> f, <span class="arg">Boolean</span> spawned, <span class="arg">Boolean</span> despawned )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Same as EGroup_ForEach except you have a choice to iterate over spawned entities, despawned entities, or both. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_FromName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EGroupID</span> 
		EGroup_FromName( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find an entity group with a given name. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetAvgHealth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		EGroup_GetAvgHealth( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the average health of all units in a entity group. </p>
<p>This uses the "proper" measure of health for panel buildings, so should accurately reflect what the user sees.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetDeSpawnedEntityAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		EGroup_GetDeSpawnedEntityAt( <span class="arg">EGroupID</span> group, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the despawned entity at the given index. </p>
<p> Use EGroup_GetSpawnedEntityAt if you want the spawned items in the group<br> Use index 1 to get the first entity in the group.<br> It is an error if index &gt; EGroup_GetCountDeSpawned()<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetInvulnerable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_GetInvulnerable( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check invulnerablity state for ALL or ANY entity in an entity group. </p>
<p> Set all param to true to check for ALL or set to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetLastAttacker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_GetLastAttacker( <span class="arg">EGroup</span> EGroupVictim, <span class="arg">SGroup</span> SGroupAttacker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the last attacker(s) for all the entities in an EGroup Gets the last attacker for all the squads in an SGroup and stores that in SGroupAttacker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		EGroup_GetName( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the name of a given entity group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetNumCombatSlots"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		EGroup_GetNumCombatSlots( <span class="arg">EGroupID</span> egroup, <span class="arg">String</span> holdTypeName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of combat slots in total of a certain hold-able type  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetOffsetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		EGroup_GetOffsetPosition( <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> offset, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a position (a certain distance away) relative to an entity's current position/orientation. see LuaConsts.scar for explanation of 'offset' parameter </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		EGroup_GetPosition( <span class="arg">EGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the center position of an entity group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetRandomSpawnedEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		EGroup_GetRandomSpawnedEntity( <span class="arg">EGroup</span> egroupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get a random spawned entity from egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetSequence"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Table</span> 
		EGroup_GetSequence( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Builds a table of EGroupIDs that are named in a sequence. i.e. a name of "eg_building" will find groups "eg_building1", "eg_building2" and so on, up until it looks for a group that isn't there. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetSpawnedEntityAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		EGroup_GetSpawnedEntityAt( <span class="arg">EGroupID</span> group, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the spawned entity at the given index. </p>
<p> Use EGroup_GetDeSpawnedEntityAt if you want the despawned items in the group<br> Use index 1 to get the first entity in the group.<br> It is an error if index &gt; EGroup_GetCountSpawned()<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetSpread"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		EGroup_GetSpread( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the distance from the centre of the group of the entity that furthest out.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetSquadsHeld"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_GetSquadsHeld( <span class="arg">EGroupID</span> egroup, <span class="arg">SGroupID</span> sgroupRecipient )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns an sgroup containing all squads held by any entities in an egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_HasUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_HasUpgrade( <span class="arg">EGroupID</span> egroup, <span class="arg">UpgradeID</span> upgrade, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether ANY or ALL entities in an EGroup have the specified upgrade </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Hide"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Hide( <span class="arg">EGroupID</span> egroup, <span class="arg">Bool</span> hide )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Hide or show all entities in an EGroup </p>
<p>Bool should be true to hide, false to show</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_InstantCaptureStrategicPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_InstantCaptureStrategicPoint( <span class="arg">EGroupID</span> egroup, <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Change the ownership of a Strategic Point </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_InstantRevertOccupiedBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_InstantRevertOccupiedBuilding( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reverts an occupied building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Intersection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Intersection( <span class="arg">EGroupID</span> group, <span class="arg">EGroupID</span> grouptointersect )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Performs a group intersection.  </p>
<p> Only entities that are in both groups will be added to 'group'.<br> The contents of 'grouptointersect' will not be changed.<br> Example: group = (1,2,3,4,5,6)  grouptointersect = (2,4,6,8,10)   --&gt; group will now equal (2,4,6)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsCapturedByPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsCapturedByPlayer( <span class="arg">EGroupID</span> egroup, <span class="arg">PlayerID</span> playerId, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if all or any strategic points in a group have been captured. Use ANY or ALL. </p>
<p>This function will ignore all entities that cannot be captured and will return false if no entities in the group can be captured.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsDoingAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsDoingAttack( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all, <span class="arg">Float</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY entities are attacking within the time </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsEmpty"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsEmpty( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a named entity group contains no spawned or despawned entities </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsHoldingAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_IsHoldingAny( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether any entity in an EGroup has a hold on anything </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsInCover"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsInCover( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY entities are in cover. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsMoving"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsMoving( <span class="arg">EGroupID</span> egroupid, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL entities in an EGroup are moving. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Bool</span> 
		EGroup_IsOnScreen( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> group, <span class="arg">Bool</span> all[, <span class="arg">Float</span> percent] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL (use those keywords) of the enities in the group are present onscreen. You can pass in a percentage of the screen to check, so 0.8 would be a centered rectangle occupying 80% of the screen. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsProducingSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsProducingSquads( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY entities in a group are currently producing squads </p>
<p>Set all to true to check for ALL or set to false to check for ANY</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsUnderAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsUnderAttack( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all, <span class="arg">Float</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY entities are under attack within the time </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsUnderAttackByPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Bool</span> 
		EGroup_IsUnderAttackByPlayer( <span class="arg">EGroupID</span> group, <span class="arg">PlayerID</span> attackerplayer, <span class="arg">Float</span> duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the entities are attacked by the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsUnderAttackFromDirection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsUnderAttackFromDirection( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all, <span class="arg">Real/Table</span> offset, <span class="arg">Float</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY entities are under attack from a direction within the time. see LuaConsts.scar for types of directions. you can pass in a table of offsets </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_IsUsingAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_IsUsingAbility( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> ALL )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ANY or ALL squads within an EGroup are using an ability </p>
<p>also used for emplacements/entities that are built but function through the use of squads.  Does not check WHAT ability a squad is using. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Kill"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Kill( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kill all entities in an EGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_Remove( <span class="arg">EGroupID</span> group, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes an entity from a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_RemoveDemolitions"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_RemoveDemolitions( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all demolition charges on an egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_RemoveGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_RemoveGroup( <span class="arg">SGroupID</span> group, <span class="arg">SGroupID</span> grouptoremove )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove from the first SGroup all squads contained in the second SGroup. SGroup2 remains untouched. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_RemoveUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_RemoveUpgrade( <span class="arg">EGroupID</span> egroup, <span class="arg">UpgradeBlueprint/Table</span> upgrade )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes upgrade(s) from an egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_ReSpawn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_ReSpawn( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Respawn all despawned entities in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetAnimatorAction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetAnimatorAction( <span class="arg">EGroupID</span> egroup, <span class="arg">String</span> actionName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Trigger animation action for an EGroup. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetAnimatorEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetAnimatorEvent( <span class="arg">EGroupID</span> egroup, <span class="arg">String</span> eventName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation event for an EGroup. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetAnimatorState"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetAnimatorState( <span class="arg">EGroupID</span> egroup, <span class="arg">String</span> stateMachineName, <span class="arg">String</span> stateName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation state of a state machine for an EGroup. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetAnimatorVariable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetAnimatorVariable( <span class="arg">EGroupID</span> egroup, <span class="arg">String</span> variableName, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation variable value for an EGroup. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetAutoTargetting"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetAutoTargetting( <span class="arg">EGroupID</span> group, <span class="arg">String</span> hardpoint, <span class="arg">Bool</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether a weapon to auto-target things or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetAvgHealth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		EGroup_SetAvgHealth( <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> healthPercent )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the health of each unit in an entity group to a given percent [0.0, 1.0]. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetCrushable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetCrushable( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> crushable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Overrides crushable behavior for an egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetHealthMinCap"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetHealthMinCap( <span class="arg">EGroupID</span> egroup, <span class="arg">float</span> minhealth )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the minimum health for this entity </p>
<p>This is usually set to zero, any higher value prevents the entity from having its health reduced below this given value</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetInvulnerable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetInvulnerable( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> enabled[, <span class="arg">Float</span> reset_time] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enable/Disable invulnerablity for an entire entity group. Use true and false for simple on/off, or use a number between 0.0 and 1.0 for more precise control on how much damage an entity can take before it takes no more. </p>
<p>The optional reset_time is used to automatically remove invulnerability after a set time. If invulnerable, both health and critical damage are disabled.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetPlayerOwner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetPlayerOwner( <span class="arg">EGroup</span> egroup, <span class="arg">PlayerID</span> owner )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Changes the player owner for all spawned and despawned entities of an EGroup. </p>
<p>Strategic/capturable point does not support setting player owner directly</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetSelectable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetSelectable( <span class="arg">EGroupID</span> egroup, <span class="arg">Bool</span> selectable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set player selectable state of entities in the egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetSharedProductionQueue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetSharedProductionQueue( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables shared team production on a building (teammates can build using THEIR resources) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetStrategicPointNeutral"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetStrategicPointNeutral( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a strategic point to neutral (not owned by any team)  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetWorldOwned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetWorldOwned( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes an egroup neutral </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_Single"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EGroupID</span> 
		EGroup_Single( <span class="arg">EGroupID</span> egroup, <span class="arg">entityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates an entity group containing a single entity </p>
<p> Creates an EGroup containing just one entity, creating the group if it doesn't exist and clearing it if it does. It returns the name of the EGroup.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_HasEntityUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_HasEntityUpgrade( <span class="arg">EGroupID</span> egroup, <span class="arg">UpgradeID</span> upgrade, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of the squad's entities have the specified upgrade </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Entity"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Entity</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="EGroup_NotifyOnPlayerDemolition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_NotifyOnPlayerDemolition( <span class="arg">EGroupID</span> id, <span class="arg">LuaFunction</span> function )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls a function when any entity in an EGroup gets destroyed by the player clicking the "Detonate me" button </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_SetDemolitions"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_SetDemolitions( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroupid[, <span class="arg">Real</span> numcharges] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Instantly wires a building for demolitions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_BuildingPanelInfo"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_BuildingPanelInfo( <span class="arg">EntityID</span> pEntity, <span class="arg">Position</span> cam, <span class="arg">Position</span> terrain )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Displays info about the panel that is intersected by the passed in ray </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_CanAttackNow"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_CanAttackNow( <span class="arg">EntityID</span> attacker, <span class="arg">Position</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether an entity can attack a target without moving or turning. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_CanLoadSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_CanLoadSGroup( <span class="arg">EntityID</span> entity, <span class="arg">SGroupID</span> loadthis, <span class="arg">Boolean</span> bCheckSquadState, <span class="arg">Boolean</span> bOverload )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the entity can load an sgroup or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_CanLoadSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_CanLoadSquad( <span class="arg">EntityID</span> entity, <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> bCheckSquadState, <span class="arg">Boolean</span> bOverload )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the entity can load squad or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_CanSeeEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_CanSeeEntity( <span class="arg">EntityID</span> entity, <span class="arg">EntityID</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a target entity is in the entities sight radius </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_CanSeeSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_CanSeeSquad( <span class="arg">EntityID</span> entity, <span class="arg">SquadID</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a target squad is in the squads sight radius </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_ClearPostureSuggestion"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_ClearPostureSuggestion( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears any previous posture suggestions made to an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_Create"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		Entity_Create( <span class="arg">EntityBlueprint</span> ebp, <span class="arg">PlayerID</span> player, <span class="arg">Position</span> pos, <span class="arg">Position</span> toward )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates an entity at a given position and assigns it to a given player.  'blueprint' is a string value containing the name of the entity blueprint. This function does not spawn the entity so you will need to call Entity_Spawn to see this entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_CreateENV"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		Entity_CreateENV( <span class="arg">EntityBlueprint</span> ebp, <span class="arg">Position</span> pos, <span class="arg">Position</span> toward )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates an entity at a given position and assigns it to a given player.  'blueprint' is a string value containing the name of the entity blueprint. This function spawns the entity so there is no need to call Entity_Spawn </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_DeSpawn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_DeSpawn( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>DeSpawn the entity at its current position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_Destroy"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_Destroy( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove an entity from the world and destroy it. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_DisableBuildingDeath"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_DisableBuildingDeath( <span class="arg">EntityID</span> pEntity, <span class="arg">Boolean</span> bDisableDeath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Disables the death of the given entity building, only works for panel based destructible buldings </p>
<p></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_DoBuildingDamageRay"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_DoBuildingDamageRay( <span class="arg">EntityID</span> pEntity, <span class="arg">Position</span> cam, <span class="arg">Position</span> terrain, <span class="arg">Real</span> dmgType, <span class="arg">Real</span> radius )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Damages this entity but only if its a destructible building </p>
<p>dmgType of 0 is damage accessory, 1 is damage panel, 2 is destroy panel and 3 is destroy radius</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_EnableAttention"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_EnableAttention( <span class="arg">EntityID</span> entity, <span class="arg">Boolean</span> attentive )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether an entity pays attention to its surroundings </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_EnableProductionQueue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_EnableProductionQueue( <span class="arg">EntityID</span> entity, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether an entity can produce anything (including upgrades) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_ForceConstruct"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_ForceConstruct( <span class="arg">EntityID</span> e )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Force constructs this entity but only if its a building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_FromWorldID"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		Entity_FromWorldID( <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get an entity from a mission editor ID. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetActiveCommand"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetActiveCommand( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the active entity command.  Some valid entity commands: STATEID_StructureBuilding, STATEID_Dead, STATEID_Idle, STATEID_Pause </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityBlueprint</span> 
		Entity_GetBlueprint( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the entity's blueprint </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetBuildingProgress"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetBuildingProgress( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the construction progress (with range [0.0, 1.0] for a given entity.  Returns 0.0 if the entity is not a building. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetCoverValue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetCoverValue( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get cover safety value from the where the entity is standing. The safety value is number from -.5 to .5. </p>
<p>Higher value means better cover. If the entity doesn't have cover_ext, value of 0 would be returned</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetGameID"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetGameID( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the entities unique id in the world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetHeading"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Entity_GetHeading( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the heading of the entity.  The heading is currently a lua table with three entries (x, y, z) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetHealth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetHealth( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the health of an entity. </p>
<p>Health will be zero for entities with no health extension.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetHealthMax"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetHealthMax( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the max health of an entity. </p>
<p>Max health will be zero for entities with no health extension.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetHealthPercentage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetHealthPercentage( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the percentage health, taking into account destructible buildings </p>
<p>Health will be zero for entities with no health extension nor building destruction</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetInvulnerable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Bool</span> 
		Entity_GetInvulnerable( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the entity is invulnerable or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetInvulnerableMinCap"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetInvulnerableMinCap( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the invulnerable point in terms of percentage </p>
<p>For buildings, retrieve the percentage value of healthy below which no more panels could be destroyed</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetLastAttacker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_GetLastAttacker( <span class="arg">EntityID</span> entity, <span class="arg">SGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find the last squad attacker on this entity. If found, the squad is added to the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetLastAttackers"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_GetLastAttackers( <span class="arg">EntityID</span> entity, <span class="arg">SGroupID</span> group, <span class="arg">Real</span> timeSeconds )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find the squad attackers on this entity from the last seconds specified. If found, the squads are added to the sgroup. Building attackers are ignored </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetNumCombatSlots"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetNumCombatSlots( <span class="arg">EntityID</span> entity, <span class="arg">String</span> holdTypeName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of combat slots in total of a certain hold-able type </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetOffsetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Entity_GetOffsetPosition( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> offset, <span class="arg">Real</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a position relative to an entity's current position and orientation. see LuaConsts.scar for explanation of 'offset' parameter. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetPlayerOwner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		Entity_GetPlayerOwner( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the Player owner of the given entity. Entity MUST NOT be owned by the world. </p>
<p>Use World_OwnsEntity to make sure entity is not owned by the world before calling this function</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Entity_GetPosition( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the position of the entity.  The position is currently a lua table with three entries (x, y, z) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetProductionQueueItem"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Blueprint</span> 
		Entity_GetProductionQueueItem( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the blueprint for a production queue item with index. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetProductionQueueItemType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetProductionQueueItemType( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the production type (PITEM_Upgrade, PITEM_Spawn, PITEM_SquadUpgrade, PITEM_SquadReinforce, PITEM_PlayerUpgrade) for a production queue item with index. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetProductionQueueSize"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetProductionQueueSize( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of items in the entities production queue. </p>
<p>It is an error to call this function on an entity that does not have a production queue.<br> Use Entity_HasProductionQueue to check that the entity has a queue.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetSightInnerHeight"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetSightInnerHeight( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the inner sight radius for this entity </p>
<p>Radius will be zero for entities without a sight extension</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetSightInnerRadius"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetSightInnerRadius( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the inner sight radius for this entity </p>
<p>Radius will be zero for entities without a sight extension</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetSightOuterHeight"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetSightOuterHeight( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the outer sight radius for this entity </p>
<p>Radius will be zero for entities without a sight extension</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetSightOuterRadius"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetSightOuterRadius( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the outer sight radius for this entity </p>
<p>Radius will be zero for entities without a sight extension</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		Entity_GetSquad( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the Squad for the passed Entity. (May be NULL) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetSquadsHeld"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_GetSquadsHeld( <span class="arg">EntityID</span> pEntity, <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds squads held by an entity to an SGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetTotalPanelCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetTotalPanelCount( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the total number of panels in a building (returns 0 for anything but panel based destructible buldings) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetUndestroyedPanelCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetUndestroyedPanelCount( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the current number of undestroyed panels in a building (returns 0 for anything but panel based destructible buldings) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetWeaponBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">WeaponBlueprint</span> 
		Entity_GetWeaponBlueprint( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a weapon hardpoint </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_GetWeaponHardpointCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetWeaponHardpointCount( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many hardpoints an entity has </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_HasCritical"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_HasCritical( <span class="arg">EntityID</span> pEntity, <span class="arg">CriticalBlueprint</span> criticalPBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return true if the entity has the given criticalID applied to it </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_HasProductionQueue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_HasProductionQueue( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if an entity has a production queue. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_HasUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_HasUpgrade( <span class="arg">EntityID</span> pEntity, <span class="arg">UpgradeBlueprint</span> upgradePBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return true if the entity has purchased the specified upgrade. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_InstantCaptureStrategicPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_InstantCaptureStrategicPoint( <span class="arg">EntityID</span> entity, <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Strategic point will be captured instantly by the team of the supplied player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_InstantRevertOccupiedBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_InstantRevertOccupiedBuilding( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reverts an occupied building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsAlive"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_IsAlive( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if entity is still alive </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsAttacking"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsAttacking( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity is attacking within the time </p>
<p>Time is in seconds</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsBuilding( <span class="arg">EntityID</span> e )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the given entity is a building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsCamouflaged"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsCamouflaged( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the entity is camouflaged. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsCapturableBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsCapturableBuilding( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity is a capturable building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsCasualty"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsCasualty( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if entity is a casualty else false </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsDemolitionReady"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsDemolitionReady( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether this entity's demolition charges are ready to be detonated </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsEBPBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_IsEBPBuilding( <span class="arg">EntityBlueprint</span> ebp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the given blueprint is a building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsEBPObjCover"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsEBPObjCover( <span class="arg">EntityBlueprint</span> ebp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the given blueprint is objcover </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsHardpointActive"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsHardpointActive( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether a hardpoint is active </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsHoldingAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsHoldingAny( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the entity has a hold on anything </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsInCover"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsInCover( <span class="arg">EntityID</span> entityId )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if entity is in cover. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsMoving"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsMoving( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether an entity is moving. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsOfType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsOfType( <span class="arg">EntityID</span> entity, <span class="arg">String</span> type )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Determines if this entity is of the given type. Types are defined in type_ext/unit_type_list </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsPartOfSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsPartOfSquad( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity is part of a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsSoldier"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsSoldier( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether an entity is a soldier </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsSpawned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsSpawned( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>if entity is spawned return true </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsStartingPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsStartingPosition( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity is a starting position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsStrategicPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsStrategicPoint( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity is a strategic point. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsStrategicPointCapturedBy"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsStrategicPointCapturedBy( <span class="arg">EntityID</span> entity, <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if strategic point is captured by the team of the player provided. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsSyncWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsSyncWeapon( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return true if the entity is a team weapon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsUnderAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsUnderAttack( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity is under attack.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsUnderAttackByPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsUnderAttackByPlayer( <span class="arg">EntityID</span> entity, <span class="arg">PlayerID</span> pAttackerOwner, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity is under attack by a certain player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsUnderAttackFromDirection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsUnderAttackFromDirection( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> offset, <span class="arg">Real</span> timeSeconds )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the entity was under attack from a certain direction (8 offset types, see LuaConsts.scar) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsValid"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsValid( <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if an entity with the given ID can be found in the world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsVehicle"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsVehicle( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether an entity is a vehicle </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_IsVictoryPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_IsVictoryPoint( <span class="arg">Entity</span> *pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if entityID is a victory point </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_Kill"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_Kill( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kill the entity.  Sets health to 0, and triggers death effects. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_NotifyOnPlayerDemolition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_NotifyOnPlayerDemolition( <span class="arg">Entity</span> entity, <span class="arg">LuaFunction</span> function )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls a function when an entity gets destroyed by the player clicking the "Detonate me" button next to an entity. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_RemoveBoobyTraps"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_RemoveBoobyTraps( <span class="arg">EntityID</span> pEntityTarget )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all booby-traps on this entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_RemoveDemolitions"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_RemoveDemolitions( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all demolition charges on an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_RemoveUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_RemoveUpgrade( <span class="arg">EntityID</span> entity, <span class="arg">UpgradeBlueprint</span> upgrade )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes an upgrade from an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetAnimatorAction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetAnimatorAction( <span class="arg">EntityID</span> pEntity, <span class="arg">String</span> actionName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Trigger animation action for an entity. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetAnimatorActionParameter"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetAnimatorActionParameter( <span class="arg">EntityID</span> pEntity, <span class="arg">String</span> actionParameterName, <span class="arg">String</span> actionParameterValue )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation action parameter for an entity. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetAnimatorEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetAnimatorEvent( <span class="arg">EntityID</span> pEntity, <span class="arg">String</span> eventName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation event for an entity. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetAnimatorState"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetAnimatorState( <span class="arg">EntityID</span> pEntity, <span class="arg">String</span> stateMachineName, <span class="arg">String</span> stateName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation state of a state machine for an entity. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetAnimatorVariable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetAnimatorVariable( <span class="arg">EntityID</span> pEntity, <span class="arg">String</span> variableName, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation variable value for an entity. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetCrushable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetCrushable( <span class="arg">EntityID</span> entity, <span class="arg">Boolean</span> crushable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Overrides crushable behavior for an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetDemolitions"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_SetDemolitions( <span class="arg">PlayerID</span> player, <span class="arg">EntityID</span> entity, <span class="arg">Real</span> numcharges )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Fully wires this entity for demolitions, if it's set up to be demolishable. 'player' is the one that owns the demolitions and can detonate them. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetHeading"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetHeading( <span class="arg">EntityID</span> entity, <span class="arg">Position</span> pos, <span class="arg">Boolean</span> bInterpolate )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the heading of the entity.  The position is currently a lua table with three entries (x, y, z) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetHealth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetHealth( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> healthPercent )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the health of an entity.  healthPercent must be in the range [0.0, 1.0]. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetInvulnerable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetInvulnerable( <span class="arg">EntityID</span> entity, <span class="arg">Bool</span> enable, <span class="arg">Float</span> reset_time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set invulnerability on the entity. Reset time is in seconds. If it it set, the invulnerability will expire after this time. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetInvulnerableMinCap"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetInvulnerableMinCap( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> minHealthPercentage, <span class="arg">Real</span> resetTime )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Make an entity invulnerable to physical damage when health is below the minimum health percentage </p>
<p>resetTime is the time in seconds that vulnerability will be restored.; zero time for reset time means the buff will last forever</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetPlayerOwner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetPlayerOwner( <span class="arg">EntityID</span> entity, <span class="arg">PlayerID</span> owner )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Changes the owner of the given squad. </p>
<p>This function doesn't work with strategic/capturable point</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetPosition( <span class="arg">EntityID</span> entity, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the position of the entity.  The position is currently a lua table with three entries (x, y, z) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetProjectileCanExplode"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetProjectileCanExplode( <span class="arg">EntityID</span> projectile, <span class="arg">Boolean</span> canExplode )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether or not a projectile can explode.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetSharedProductionQueue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetSharedProductionQueue( <span class="arg">EntityID</span> entity, <span class="arg">Boolean</span> shared )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables shared team production on a building (teammates can build using THEIR resources) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetStrategicPointNeutral"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetStrategicPointNeutral( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a strategic point to neutral (not owned by any team) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SetWorldOwned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SetWorldOwned( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes an entity neutral </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SimHide"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SimHide( <span class="arg">EntityID</span> entity, <span class="arg">Boolean</span> hide )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Shows/hides the entity in the simulation </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_Spawn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_Spawn( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Spawn the entity at its current position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_StopAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_StopAbility( <span class="arg">EntityID</span> entity, <span class="arg">AbilityBlueprint</span> ability, <span class="arg">Boolean</span> bEarlyExit )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Abruptly stops an active ability </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SuggestPosture"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_SuggestPosture( <span class="arg">EntityID</span> entity, <span class="arg">unsigned</span> posture, <span class="arg">Real</span> duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Suggests a posture to an entity, lasting the passed duration </p>
<p>Posture of 0 is prone, 1 is kneel/crouch, and 2 is standing.  Duration is in seconds, negative means indefinate.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_SupportsDemolition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Entity_SupportsDemolition( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether this entity is set up to have demolitions placed on it </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_TagDebug"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_TagDebug( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tags the entity to be used for debugging </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_VisHide"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_VisHide( <span class="arg">EntityID</span> pEntity, <span class="arg">Boolean</span> bHide )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Hides or shows an entity visually. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModMisc_MakeCasualtyAction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModMisc_MakeCasualtyAction( <span class="arg">EntityID</span> pTargetEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Make the passed entity a casualty by triggering the MakeCasualtyAction </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModMisc_MakeWreckAction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModMisc_MakeWreckAction( <span class="arg">EntityID</span> pTargetEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Make the passed entity a wreck by triggering the MakeWreckAction </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModMisc_OOCAction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModMisc_OOCAction( <span class="arg">EntityID</span> pTargetEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Make the passed entity go out of control </p>
<p>Triggers an OutOfControlAction on the unit.  Does not trigger any actions associated with an OOC weapon hit critical, just the OOC action.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_FOW"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>FOW</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="FOW_RevealAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealAll( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveal FOW for all players </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealArea"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealArea( <span class="arg">Position</span> pos, <span class="arg">Real</span> radius, <span class="arg">Real</span> durationSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals a circular area for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. </p>
<p>Pass in a duration of -1 for indefinite duration ( until unreveal is called )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealEGroup( <span class="arg">EGroupID</span> group, <span class="arg">Real</span> durationSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals an entity groups line of sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. </p>
<p>Pass in a duration of -1 for indefinite duration ( until the entities are dead )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealEGroupOnly"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealEGroupOnly( <span class="arg">EGroupID</span> group, <span class="arg">Real</span> durationSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals an entity groups in FOW for all alive players over a given duration. </p>
<p>Pass in a duration of -1 for indefinite duration ( until the entities are dead )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealEntity( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> durationSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals an entities line of sight (LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. </p>
<p>Pass in a duration of -1 for indefinite duration ( until the entity is dead )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealMarker( <span class="arg">MarkerID</span> marker, <span class="arg">Real</span> duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals an area the size of a given markers proximity at that markers position for a given amount of time. Pass in a duration of 1 for indefinite duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA.  </p>
<p>This function will reveal the FOW for ALL alive players. This does not work with markers with rectangular proximity type</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealSGroup( <span class="arg">SGroupID</span> group, <span class="arg">Real</span> durationSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals a squad groups line of sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. </p>
<p>Pass in a duration of -1 for indefinite duration ( until the squads are dead )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealSGroupOnly"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealSGroupOnly( <span class="arg">SGroupID</span> group, <span class="arg">Real</span> durationSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals a squad groups in fow for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. </p>
<p>Pass in a duration of -1 for indefinite duration ( until the squads are dead )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealSquad( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> durationSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals a squads line if sight(LOS) for all alive players over a given duration. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. </p>
<p>Pass in a duration of -1 for indefinite duration ( until the entity is dead )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_RevealTerritory"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_RevealTerritory( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> sectorID, <span class="arg">Real</span> durationSecs, <span class="arg">Boolean</span> mustOwn )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reveals a territory to a player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_TagSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_TagSGroup( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds all items in a group to a given players FOW. </p>
<p>Items line of sight will be visible until it is destroyed or UnTag is called.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_UnRevealAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_UnRevealAll( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Use to undo a FOW_RevealAll </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_UnRevealArea"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_UnRevealArea( <span class="arg">Position</span> pos, <span class="arg">Real</span> radius )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>UnReveals a circular area for all alive players. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_UnRevealMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_UnRevealMarker( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Unreveals an area the size of a given markers proximity at that markers position. YOU SHOULD ONLY CALL THIS ONCE FOR EACH AREA.  </p>
<p>This does not work with markers with rectangular proximity type</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_UnRevealTerritory"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_UnRevealTerritory( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> sectorID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Unreveals a territory sector </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_UnTagSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_UnTagSGroup( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes items from a players FOW that were added using FOW_TagSGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_ID"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>ID</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="EGroup_CreateTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LuaTable</span> 
		EGroup_CreateTable( <span class="arg">String</span> format, <span class="arg">Real</span> size )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table of egroups NOT in the world builder </p>
<p>See Marker_GetTable for more info on format parameter</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_GetWBTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LuaTable</span> 
		EGroup_GetWBTable( <span class="arg">String</span> format )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table of egroups from the world builder </p>
<p>See Marker_GetTable for more info on format parameter</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetNonSequentialTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LuaTable</span> 
		Marker_GetNonSequentialTable( <span class="arg">String</span> format, <span class="arg">Real</span> size )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a fixed size table of markers from the world builder.  Markers that do not exist in the WB, will be nil in the table.  This is why we call it 'non-sequential' </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LuaTable</span> 
		Marker_GetTable( <span class="arg">String</span> format )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table of markers from the world builder. Creates as many as it finds </p>
<p>mkr_table = Marker_GetTable( 'mkr_%d' ) -- creates a table with 3 markers named 'mkr_1', 'mkr_2', and 'mkr_3' (and so on) from the WB<br><br> mkr_table2 = Marker_GetTable( 'mkr_%02d' )  -- creates a table with 3 markers named 'mkr_01', 'mkr_02', 'mkr_03' (and so on) from the WB<br><br> mkr_table3 = Marker_GetTable( 'mkr_%03d_patrol' )  -- creates a table with 3 markers named 'mkr_001_patrol', 'mkr_002_patrol' (and so on) from the WB<br><br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CreateTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LuaTable</span> 
		SGroup_CreateTable( <span class="arg">String</span> format, <span class="arg">Real</span> size )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table of sgroups NOT in the world builder </p>
<p>See Marker_GetTable for more info on format parameter</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetWBTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LuaTable</span> 
		SGroup_GetWBTable( <span class="arg">String</span> format )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table of sgroups from the world builder </p>
<p>See Marker_GetTable for more info on format parameter</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Marker"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Marker</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Marker_DoesNumberAttributeExist"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Marker_DoesNumberAttributeExist( <span class="arg">MarkerID</span> marker, <span class="arg">String</span> attrname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a generic number attribute exists for the marker type. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_DoesStringAttributeExist"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Marker_DoesStringAttributeExist( <span class="arg">MarkerID</span> marker, <span class="arg">String</span> attrname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a generic string attribute exists for the marker type. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Marker_Exists( <span class="arg">String</span> name, <span class="arg">String</span> type )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if marker exists. If you don't care about the type, pass in an empty string ( "" ) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_FromName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">MarkerID</span> 
		Marker_FromName( <span class="arg">String</span> name, <span class="arg">String</span> type )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a ScarMarker from the Mission Editor. If you don't care about the type, pass in an empty string ( "" ) </p>
<p>  The type is defined in the markers list of the mission editor when placing markers.<br>  You will need the result of this function to call any functions that start with Marker_</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetDirection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Marker_GetDirection( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a vector for the marker direction </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Marker_GetName( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the name of a given marker.  This value gets set in the Mission Editor. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetNumberAttribute"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Marker_GetNumberAttribute( <span class="arg">MarkerID</span> marker, <span class="arg">String</span> attrname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a generic number attribute defined in a marker. </p>
<p>  Different marker types have different attributes. Note: All marker types have Name and Proximity.  Do not use this function to retrieve these values, use Marker_GetName and Marker_GetProximity instead.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Marker_GetPosition( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the position of a given marker. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetProximityRadius"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Marker_GetProximityRadius( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the proximity radius of a given marker.  Only for marker with proximity type PT_Circle. This value gets set in the Mission Editor. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetProximityType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Marker_GetProximityType( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the proximity type of a given marker.  The possible results are PT_Circle and PT_Rectangle </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetSequence"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Table</span> 
		Marker_GetSequence( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Builds a table of MarkerIDs that are named in a sequence. i.e. a name of "spot" will find markers "spot1", "spot2" and so on, up until it looks for a marker that isn't there. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_GetStringAttribute"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Marker_GetStringAttribute( <span class="arg">MarkerID</span> marker, <span class="arg">String</span> attrname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a generic string attribute defined in a marker. </p>
<p>  Different marker types can have different attributes.<br>  Note: All marker types have Name and Proximity.  Do not use this function to retrieve these values, use Marker_GetName and Marker_GetProximity instead.<br>  See markertypes.lua for a listing of all the marker types.</p>
</td>
</table>
</p><a name="Marker_GetType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Marker_GetType( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the typename of a given marker.  This is the typename from the Mission Editor (name displayed when placing markers) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Marker_InProximity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Marker_InProximity( <span class="arg">MarkerID</span> marker, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the given position is in the markers proximity radius or proximity rectangle (depending on the type). </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_modalui"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>modalui</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="ModalUI_AllEntityFacing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_AllEntityFacing( <span class="arg">BindingInterface*</span> bi, <span class="arg">SquadID</span> squad, <span class="arg">Vector3f</span> facingPos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Issue a facing order to an all entities in a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_CanMoveFaceValidation"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		ModalUI_CanMoveFaceValidation( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> turnOnly )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>ensures your squad is allowed to enter the move or facing states </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityCanShoot_Entity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_EntityCanShoot_Entity( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex, <span class="arg">EntityID</span> targetEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a value indicating whether the weapon can target an entity. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityCanShoot_Pos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_EntityCanShoot_Pos( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex, <span class="arg">Vector3f</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a value indicating whether the weapon can target a position. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityFacing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_EntityFacing( <span class="arg">BindingInterface*</span> bi, <span class="arg">EntityID</span> entity, <span class="arg">Vector3f</span> facingPos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Issue a facing order to an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityGetAllianceWithLocalPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_EntityGetAllianceWithLocalPlayer( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the relationship between the local player and the entity: R_Ally, R_Enemy, R_Neutral... </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityGetBurstProgress"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_EntityGetBurstProgress( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the fraction of the burst cycle complete: 1 for burst just started, 0 for burst complete. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityGetCoolDownProgress"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_EntityGetCoolDownProgress( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the fraction of the cooldown cycle complete: 0 for reload just started, 1 for reload complete. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityGetIsCoolDown"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		ModalUI_EntityGetIsCoolDown( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if entities weapon is cooled down </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityGetReloadProgress"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_EntityGetReloadProgress( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the fraction of the reload cycle complete: 0 for reload just started, 1 for reload complete. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityGetWeaponBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">std::string</span> 
		ModalUI_EntityGetWeaponBlueprint( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the active weapon's blueprint name. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityGetWindDownProgress"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_EntityGetWindDownProgress( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the fraction of the cooldown cycle complete: 0 for reload just started, 1 for reload complete. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityHasLOSToTarget"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		ModalUI_EntityHasLOSToTarget( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a value indicating whether the weapon can target a position. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityIsControllable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		ModalUI_EntityIsControllable( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a value indicating whether the weapon is in position to fire on its current target. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_EntityIsTrackingTarget"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		ModalUI_EntityIsTrackingTarget( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a value indicating whether the weapon is in position to fire on its current target. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_GetEntitiesInSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ConstEntityGroupTemp</span> 
		ModalUI_GetEntitiesInSquad( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table containing the entities in a squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_GetWeaponType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_GetWeaponType( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> hardPointIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns Weapon_Ranged, Weapon_Projectile or Weapon_Artillery, or -1 if no weapon for that hardpoint </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_PointIsInWorld"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		ModalUI_PointIsInWorld( <span class="arg">Math::Vector3f</span> point )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>ensures given point is within the world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_SelectClear"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_SelectClear( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Resets the potential selection to only this entity (this highlights and shows the health status of the unit) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_SelectEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_SelectEntity( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Resets the potential selection to only this entity (this highlights and shows the health status of the unit) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_SelectPotentialClear"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_SelectPotentialClear( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Resets the potential selection to only this entity (this highlights and shows the health status of the unit) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_SelectPotentialEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_SelectPotentialEntity( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Resets the potential selection to only this entity (this highlights and shows the health status of the unit) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_SquadFacing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_SquadFacing( <span class="arg">BindingInterface*</span> bi, <span class="arg">Boolean</span> queue, <span class="arg">SquadID</span> squad, <span class="arg">Vector3f</span> facingPos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Issues a move-and-face order to a squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_SquadMoveFacing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_SquadMoveFacing( <span class="arg">BindingInterface*</span> bi, <span class="arg">Boolean</span> queue, <span class="arg">Boolean</span> faceOnly, <span class="arg">SquadID</span> squad, <span class="arg">Vector3f</span> pos, <span class="arg">Vector3f</span> facingPos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Issues a move-and-face order to a squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_SquadMoveNoFacing_Pos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_SquadMoveNoFacing_Pos( <span class="arg">BindingInterface*</span> bi, <span class="arg">Boolean</span> queue, <span class="arg">SquadID</span> squad, <span class="arg">Vector3f</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Issues a move order to a squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_SquadStop"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ModalUI_SquadStop( <span class="arg">BindingInterface*</span> bi, <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Issues a halt order to a entity, with no speech trigger </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_UtilDistance"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_UtilDistance( <span class="arg">Vector3f</span> a, <span class="arg">Vector3f</span> b )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the distance between two points. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ModalUI_UtilGetUITime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ModalUI_UtilGetUITime( <span class="arg">BindingInterface*</span> bi )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the current wall time, in milliseconds. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Modifiers"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Modifiers</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Modifier_IsEnabledOnEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Modifier_IsEnabledOnEGroup( <span class="arg">EGroupID</span> egroup, <span class="arg">String</span> modifier, <span class="arg">String</span> modtype, <span class="arg">Boolean</span> all, <span class="arg">Boolean</span> bEnabledByDefault )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if a modifier is enabled on all or any entities in an egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Modifier_Remove( <span class="arg">ModID</span> modifier )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove an applied modifier.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_RemoveAllFromEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Modifier_RemoveAllFromEGroup( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all SCAR-applied modifiers for a specific EGroup.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_RemoveAllFromSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Modifier_RemoveAllFromSGroup( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all SCAR-applied modifiers for a specific SGroup.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_AbilityDelayTime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_AbilityDelayTime( <span class="arg">PlayerID</span> player, <span class="arg">AbilityID</span> ability, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the initial delay time of an ability </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_AbilityDurationTime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_AbilityDurationTime( <span class="arg">PlayerID</span> player, <span class="arg">AbilityID</span> ability, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the duration of an ability </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_AbilityMaxCastRange"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_AbilityMaxCastRange( <span class="arg">PlayerID</span> player, <span class="arg">AbilityID</span> ability, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the maximum casting range of an ability. NOTE: it assumes that the actions that the ability executes can also handle the modified range </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_AbilityMinCastRange"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_AbilityMinCastRange( <span class="arg">PlayerID</span> player, <span class="arg">AbilityID</span> ability, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the minimum casting range of an ability. NOTE: it assumes that the actions that the ability executes can also handle the modified range </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_AbilityRechargeTime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_AbilityRechargeTime( <span class="arg">PlayerID</span> player, <span class="arg">AbilityID</span> ability, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the recharge time of an ability </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_CaptureTime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_CaptureTime( <span class="arg">EGroupID</span> sgroup, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the capture time of all strategic points in an EGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_DisableHold"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_DisableHold( <span class="arg">EGroupID</span> group, <span class="arg">Boolean</span> disable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enable or disable hold (garrisoning) for an egroup or sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_Enable_ParadropReinforcements"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Modify_Enable_ParadropReinforcements( <span class="arg">PlayerID</span> playerId, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Allows paratroopers to reinforce from the sky.  Set to true to enable, false to disable. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_EntityBuildTime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_EntityBuildTime( <span class="arg">PlayerID</span> playerId, <span class="arg">String</span> ebp, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the time taken to build a particular EBP. This only affects the given player.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_EntityCost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_EntityCost( <span class="arg">PlayerID</span> player, <span class="arg">String</span> blueprint, <span class="arg">Real</span> resourcetype, <span class="arg">Real</span> addition )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the cost of an entity for a particular player. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_PlayerExperienceReceived"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_PlayerExperienceReceived( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> factor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the veterancy experience received by a player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_PlayerProductionRate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_PlayerProductionRate( <span class="arg">PlayerID</span> sgroup, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the production rate of a player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_PlayerResourceGift"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_PlayerResourceGift( <span class="arg">PlayerID</span> playerId, <span class="arg">Real</span> resourceType, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies a player's resource bonus received (ie. one-time resource gifts) Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_PlayerResourceRate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_PlayerResourceRate( <span class="arg">PlayerID</span> playerId, <span class="arg">Real</span> resourceType, <span class="arg">Real</span> scalefactor[, <span class="arg">Real</span> mathtype] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies a player's incoming resource rate. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action. Possible math types are MUT_Multiplication, MUT_Addition. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_PlayerSightRadius"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_PlayerSightRadius( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the sight radius for a player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_ProductionRate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_ProductionRate( <span class="arg">EGroupID</span> sgroup, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the production rate of all factories in an EGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_ReceivedAccuracy"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_ReceivedAccuracy( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the chance of a squad/entity being hit </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_ReceivedDamage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_ReceivedDamage( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the damage a squad/entity receives. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_ReceivedPenetration"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_ReceivedPenetration( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the chance of a squad/entity being penetrated </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_ReceivedSuppression"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_ReceivedSuppression( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the rate at which a squad gets suppressed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_SetUpgradeCost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_SetUpgradeCost( <span class="arg">PlayerID</span> playerId, <span class="arg">UpgradeID</span> upgrade, <span class="arg">Real</span> resourceType, <span class="arg">Real</span> newCost )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the cost of an upgrade. This only affects the given player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_SightRadius"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_SightRadius( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the sight radius for an egroup or an sgroup. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_SquadAvailability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_SquadAvailability( <span class="arg">PlayerID</span> player, <span class="arg">String</span> blueprint, <span class="arg">Real</span> addition )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the availability limit of a squad type for any given player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_TargetPriority"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_TargetPriority( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">Real</span> addition )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the target priority of a squad or entity group from the attacker. The value is an addition </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_TerritoryRadius"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_TerritoryRadius( <span class="arg">EGroupID</span> group, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the territory radius for an egroup or an sgroup. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_UnitSpeed"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_UnitSpeed( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the maximum speed for a vehicle. This has no effect on infantry. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_UnitVeterancyValue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_UnitVeterancyValue( <span class="arg">SGroup/EGroup</span> group, <span class="arg">Real</span> scalefactor[, <span class="arg">Real</span> mathtype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the Veterancy Experience value of the target SGroup, EGroup, Entity, or Squad. Mathtype is Multiplication by default </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_UpgradeBuildTime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_UpgradeBuildTime( <span class="arg">PlayerID</span> playerId, <span class="arg">UpgradeID</span> upgrade, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the build time for a particular upgrade. This only affects the given player.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_Upkeep"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_Upkeep( <span class="arg">PlayerID</span> playerId, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the upkeep for a player  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_VehicleRepairRate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_VehicleRepairRate( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> factor[, <span class="arg">String</span> engineer_blueprint] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies the vehicle repair rate of all a player's engineers </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_Vulnerability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_Vulnerability( <span class="arg">EGroupID/SGroupID</span> group, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Increases the received accuracy, penetration, and damage on a squad by the scalefactor.  For example, a scalefactor of 2 means that the squad gets 2x the received accuracy, 2x the received penetration, and 2x the received damage. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_WeaponAccuracy"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_WeaponAccuracy( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">String</span> hardpoint, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies a squad's weapon accuracy. </p>
<p>The hardpoint should be specified as a string - i.e. "hardpoint_01"</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_WeaponBurst"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_WeaponBurst( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">String</span> hardpoint, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies a squad's weapon burst time. </p>
<p>The hardpoint should be specified as a string - i.e. "hardpoint_01"</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_WeaponCooldown"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_WeaponCooldown( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">String</span> hardpoint, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies a squad's weapon cooldown time. </p>
<p>The hardpoint should be specified as a string - i.e. "hardpoint_01"</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_WeaponDamage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_WeaponDamage( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">String</span> hardpoint, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies a squad's weapon damage. </p>
<p>The hardpoint should be specified as a string - i.e. "hardpoint_01"</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modify_WeaponRange"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Modify_WeaponRange( <span class="arg">SGroupID/EGroupID</span> group, <span class="arg">String</span> hardpoint, <span class="arg">Real</span> scalefactor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Modifies a squad's weapon range. Does not work on artillery (mortar, nebelwerfer, etc.) </p>
<p>The hardpoint should be specified as a string - i.e. "hardpoint_01"</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_NIS"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>NIS</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="nis_debugdisplay"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		nis_debugdisplay( <span class="arg">Boolean</span> bDisplay )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>If set to true extra debugging information will be displayed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="nis_setintransitiontime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		nis_setintransitiontime( <span class="arg">Real</span> numSeconds )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the number of seconds it takes to transition from game to nis, 0 is instantaneous </p>
<p>This includes blending the camera position, fov and clip planes</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="nis_setouttransitionnis"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		nis_setouttransitionnis( <span class="arg">String</span> filename )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Lets the nis system know which nis will be transitioned to when the first one ends. </p>
<p>This function doesn't actually trigger a second nis to start, rather it lets the NIS system know which one will be next, so it can prevent the camera from popping back to the game camera.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="nis_setouttransitiontime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		nis_setouttransitiontime( <span class="arg">Real</span> numSeconds )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the number of seconds it takes to transition from nis back to game, 0 is instantaneous </p>
<p>This includes blending the camera position, fov and clip planes</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="nis_usegamecamera"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		nis_usegamecamera( <span class="arg">Boolean</span> bUseGameCamera )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>If set to true the nis camera isn't used, when an nis is playing </p>
<p>This is a debugging command, the game camera is used even when the NIS is playing</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Objectives"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Objectives</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Objective_AddLabel"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LabelID</span> 
		Objective_AddLabel( <span class="arg">LuaTable</span> objectiveTable, <span class="arg">Position</span> pos, <span class="arg">LocString</span> text )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a tactical map label to an objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_AddPing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PingID</span> 
		Objective_AddPing( <span class="arg">LuaTable</span> objectiveTable, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a tactical map ping to an objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_AddUIElements"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ElementID</span> 
		Objective_AddUIElements( <span class="arg">LuaTable</span> objTable, <span class="arg">Position</span> pos[, <span class="arg">Boolean</span> ping, <span class="arg">LocString</span> hintpointText, <span class="arg">Boolean</span> worldArrow, <span class="arg">Float/Position</span> objectiveArrowOffset] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds multiple UI elements on one position. 'pos' can be group/entity/squad/marker. worldArrow adds a 3D arrow which points to the thing in the world. hintpointText adds a hint point that appears on the thing when moused over. If you're adding an arrow or a hintpoint, this thing will be among those potentially pointed to by the 2D HUD arrow. objectiveArrowOffset is an offset applied to the arrow's position (you can specify a height offset or a 3D position offset). </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_AlertSitRep"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_AlertSitRep( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Drops an event cue for player 1, allowing them to access the sitrep for the objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_AreAllPrimaryObjectivesComplete"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Objective_AreAllPrimaryObjectivesComplete(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether all primary objectives have been completed. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_Complete"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_Complete( <span class="arg">LuaTable</span> objTable[, <span class="arg">Boolean</span> bShowTitle] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>'Completes' an objective. Wrapper function for Objective_SetState with a few other features. If you do not want the objective title to be shown on screen, pass in 'false' for bShowTitle </p>
<p>Includes managing the blips and triggers the OnComplete() function as defined by the objective table created in the main scar file.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_Fail"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_Fail( <span class="arg">LuaTable</span> objTable[, <span class="arg">Boolean</span> bShowTitle] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>'Fails' an objective. Wrapper function for Objective_SetState with a few other features. </p>
<p>Includes managing the blips and triggers the OnFail() function as defined by the objective table created in the main scar file.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_ForceSitRep"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_ForceSitRep( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Brings you to the tactical map screen and plays the sitrep for this objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_GetCounter"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Objective_GetCounter( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the current count associated with this objective. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_GetTimerSeconds"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Objective_GetTimerSeconds( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the amount of seconds on the timer (time remaining or time elapsed, based on the type of timer used) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_IsComplete"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Objective_IsComplete( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether an objective is complete </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_IsCounterSet"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Objective_IsCounterSet( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a counter has been set for this objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_IsFailed"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Objective_IsFailed( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether an objective is failed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_IsStarted"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_IsStarted( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether an objective has been started. Completed objectives will return true. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_IsTimerSet"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Objective_IsTimerSet( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a timer has been set for this objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_PauseTimer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_PauseTimer( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Pauses the objective's timer. If a timer has not been set, it does nothing. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_Register"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ObjectiveID</span> 
		Objective_Register( <span class="arg">LuaTable</span> objTable[, <span class="arg">PlayerID/TeamID</span> owner] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>'Registers' an objective. Wrapper function for Objective_Create with a few other features. </p>
<p>Includes pointers, labels and pings as defined by the objective table created in the main scar file. You can pass in a team or player, so that the objective only applies to it.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_RemoveLabel"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_RemoveLabel( <span class="arg">LuaTable</span> objectiveTable, <span class="arg">Real</span> LabelID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a tactical map label from an objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_RemovePing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_RemovePing( <span class="arg">LuaTable</span> objectiveTable, <span class="arg">Real</span> PingID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a tactical map ping from an objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_RemoveUIElements"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_RemoveUIElements( <span class="arg">LuaTable</span> objTable, <span class="arg">Real</span> elementID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a group of UI elements that were added by Objective_AddUIElements </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_ResumeTimer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_ResumeTimer( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Resume the objective's timer. If a timer has not been set, it does nothing. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_SetAlwaysShowDetails"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_SetAlwaysShowDetails( <span class="arg">LuaTable</span> objTable, <span class="arg">Boolean</span> title, <span class="arg">Boolean</span> hud_arrow, <span class="arg">Boolean</span> hintpoints )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether this objective always shows detailed text, the HUD arrow, or the hintpoints. There can only be one objective at a time that forces the HUD arrow to show up. If you pass in 'nil' for hud_arrow then its behavior is not affected. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_SetCounter"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_SetCounter( <span class="arg">LuaTable</span> objTable, <span class="arg">Float</span> current[, <span class="arg">Float</span> maximum] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a counter that is associated with this objective in the UI. You can provide a 'maximum' so that it shows up as "1 of 5" </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_Show"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_Show( <span class="arg">LuaTable</span> objective_table, <span class="arg">Boolean</span> on/off )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Shows or hides an objective from the UI and tactical map </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_Start"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_Start( <span class="arg">LuaTable</span> objTable[, <span class="arg">Boolean</span> bShowTitle] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Shows an objective to the player and activates it </p>
<p>Includes pointers, labels, pings and FOW as defined by the objective table created in the main scar file.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_StartTimer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_StartTimer( <span class="arg">LuaTable</span> objTable, <span class="arg">Real</span> direction[, <span class="arg">Float</span> initialTime, <span class="arg">Float</span> flashThreshold] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Starts a timer that is associated with this objective in the UI. Use COUNT_DOWN or COUNT_UP for the 'direction' parameter </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_StopCounter"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_StopCounter( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops the objective's counter. If a counter has not been set, it does nothing. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_StopTimer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_StopTimer( <span class="arg">LuaTable</span> objTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops the objective's timer. If a timer has not been set, it does nothing. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_TogglePings"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_TogglePings( <span class="arg">LuaTable</span> objective_table, <span class="arg">Boolean</span> on/off )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Toggles minimap blips on or off. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Objective_UpdateText"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Objective_UpdateText( <span class="arg">LuaTable</span> objTable, <span class="arg">LocString</span> title, <span class="arg">LocString</span> description[, <span class="arg">Boolean</span> bShowTitle] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Updates the title and description for the objective. If you only want to set one of them, pass in nil for the other </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Player"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Player</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Player_AddAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_AddAbility( <span class="arg">PlayerID</span> pPlayer, <span class="arg">AbilityBlueprint</span> pAbilityPBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add an ability to a player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_AddAbilityLockoutZone"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_AddAbilityLockoutZone( <span class="arg">PlayerID</span> player, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Specifies a marker where an ability cannot be used. This only applies to abilities where you use the cursor to pick a location in the world (like a location to paradrop at). </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_AddHeroToSpawner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_AddHeroToSpawner( <span class="arg">PlayerID</span> pModPlayer, <span class="arg">const ScarSquadPBG</span> ScarEntityPBGHero, <span class="arg">const ScarEntityPBG</span> ScarEntityPBGSpawner, <span class="arg">const unsigned long</span> experience, <span class="arg">const unsigned long</span> durability )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Allows the specified hero unit blueprint to be built at the specified spawner location blueprint (like an HQ) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_AddResource"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_AddResource( <span class="arg">PlayerID</span> playerId, <span class="arg">Real</span> resourceType, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add resource to player, as opposed to just setting it. Possible resource types are RT_Manpower, RT_Munition, RT_Fuel, RT_Action  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_AddSquadsToSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroupID</span> 
		Player_AddSquadsToSGroup( <span class="arg">PlayerID</span> playerId, <span class="arg">String</span> squadgroupName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>For the given player, get all of the squads gathered into a squadgroup of your naming.   </p>
<p>Squads will be added to given squad group.  If the given squad group does not exist it will be created.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_AddUnspentCommandPoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_AddUnspentCommandPoints( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> points )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gives the player new command points to spent on </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_AreSquadsNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_AreSquadsNearMarker( <span class="arg">PlayerID</span> playerid, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY of a players squads are in proximity of a marker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_CanSeeEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_CanSeeEGroup( <span class="arg">PlayerID</span> playerid, <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a player can see ALL or ANY items in an egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_CanSeeEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_CanSeeEntity( <span class="arg">PlayerID</span> player, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a player can see a given entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_CanSeePosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_CanSeePosition( <span class="arg">PlayerID</span> player, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a player can see a given position. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_CanSeeSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_CanSeeSGroup( <span class="arg">PlayerID</span> playerid, <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a player can see ALL or ANY items in an sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_CanSeeSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_CanSeeSquad( <span class="arg">PlayerID</span> player, <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a player can see ALL or ANY units in a given squad </p>
<p>Set all to true to check that ALL units are visible or set to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_ClearArea"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_ClearArea( <span class="arg">PlayerID</span> player, <span class="arg">MarkerID</span> marker, <span class="arg">Bool</span> invulnerable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Any of the player's units in the marker area move out of the area, and can be made invulnerable for a bit whilst they do it </p>
<p>You can replace the marker with a position and a range - i.e. Player_ClearArea(player, pos, range, invulnerable)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_ClearAvailabilities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_ClearAvailabilities( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears item, command and construction menu availabilities for the player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_ClearPopCapOverride"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_ClearPopCapOverride( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears the pop cap override so that modifiers can take effect again </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_CompleteUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_CompleteUpgrade( <span class="arg">PlayerID</span> pPlayer, <span class="arg">UpgradeBlueprint</span> pUpgradePBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Finish upgrade for a player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_DoParadrop"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_DoParadrop( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos, <span class="arg">Real</span> dropHeight, <span class="arg">Real</span> dropDrift, <span class="arg">LuaBinding::StackVar</span> blueprint, <span class="arg">Real</span> maxSquadEntityCount, <span class="arg">Real</span> maxDeathOnBuilding )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Do a paradrop with custom parameters for this player. This is similar to regular paradrop ability without any prereq check </p>
<p> sgroup is the SGroup that the newly created squad would be added to dropHeight is Height in metres the paratroopers are dropped from. dropDrift is Horizontal distance in metres from where the paratroopers are dropped from. blueprint is the blueprint to spawn. It could be squad or entity maxSquadEntityCount is the number of squad members to spawn. 0 means default is used maxDeathOnBuilding is the number of entities allowed to die when landing on buildings Example:	   local id = SBP.ALLIED_AIRBOURNE	   Player_DoParadrop( g_player1, sg_soldier1, Marker_GetPosition( marker4 ), 100.0, 10.0, id, 3, 2 )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_FindFirstEnemyPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		Player_FindFirstEnemyPlayer( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Searches the player list in the world and returns the id of the first enemy player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_FromId"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		Player_FromId( <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a player given a player id from the ME.  NOTE: this is a temp function, and will be replaced with Player_FromName </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_FromName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		Player_FromName( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get a player using their name from the Mission Editor.  NOT DONE YET </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetAIType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetAIType( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the type of the given player if it is an AI.  Possible types are: AII_None, AII_Normal, AII_LocalHumanTakeover, AII_RemoteAITakeover, AII_RemoteHumanTakeover (-1 if the player does not exist) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_GetAll( <span class="arg">PlayerID</span> player[, <span class="arg">SGroupID</span> sgroup, <span class="arg">EGroupID</span> egroup] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates/Clears groups that contain all of a player's units and buildings. Defaults - sg_allsquads and eg_allentities </p>
<p>Fills an SGroup with all of the given player's squads, and an EGroup with all the player's entities. If you don't provide and groups, then it defaults to using sg_allsquads and eg_allentities.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetAllEntitiesNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_GetAllEntitiesNearMarker( <span class="arg">PlayerID</span> playerid, <span class="arg">EGroupID</span> egroup, <span class="arg">MarkerID/Pos/SectorID</span> position[, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gather together all of a player's entities that are in proximity to a marker, a position, or within a territory sector into an EGroup. The EGroup is cleared beforehand.  </p>
<p>You can override a marker's normal proximity by specifying a range.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetAllSquadsNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_GetAllSquadsNearMarker( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID/Pos/SectorID</span> position[, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gather together all of a player's squads that are in proximity to a marker, a position, or within a territory sector into an SGroup. The SGroup is cleared beforehand.  </p>
<p>You can override a marker's normal proximity by specifying a range.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetBuildingsCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetBuildingsCount( <span class="arg">PlayerID</span> playerId )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the total number of buildings owned by this player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetBuildingsCountExcept"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetBuildingsCountExcept( <span class="arg">PlayerID</span> playerId, <span class="arg">BlueprintTable</span> exceptions )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the total number of buildings owned by this player (with exclusions). </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetBuildingsCountOnly"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetBuildingsCountOnly( <span class="arg">PlayerID</span> playerId, <span class="arg">BlueprintTable</span> ebplist )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of buildings owned by this player (inclusive). </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetCurrentPopulation"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetCurrentPopulation( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> capType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Use capType CT_Personnel to get current squad cap, CT_Vehicle to get current vehicle cap, CT_Medic to get current medic cap </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetDisplayName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LocString</span> 
		Player_GetDisplayName( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the players UI name. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EGroupID</span> 
		Player_GetEntities( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns an EntityGroupObs containing all the players entities. </p>
<p> This function returns a 'global' entity group with the name '__Player%dEntities', where %d is the player ID.  This means that you should never need to destroy it./n However, if you do destroy it, it will be recreated the next time this function is called.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetEntityCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetEntityCount( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of entities a player currently owns </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetEntityName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Player_GetEntityName( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the name of an entity a player currently owns </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetHeroExperience"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetHeroExperience( <span class="arg">PlayerID</span> pModPlayer, <span class="arg">boost::uint64_t</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the specified hero's veterancy level for the player. If hero is not found, -1 is returned </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetID"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetID( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the id of the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetMaxPopulation"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetMaxPopulation( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> capType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Use capType CT_Personnel to get max squad cap or CT_VehicleCap to get max vehicle cap. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetNumStrategicPoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetNumStrategicPoints( <span class="arg">PlayerID</span> p )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of strategic points (not objectives) this player owns </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetNumVictoryPoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetNumVictoryPoints( <span class="arg">PlayerID</span> p )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of strategic objectives this player owns </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetPhase"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetPhase( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the phase the given player is currently at </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetRace"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetRace( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the race index for the given player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetRaceName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Player_GetRaceName( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the name of the race for a given player (eg. allies, allies_commonwealth, axis, axis_panzerelite) and always in english </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetRelationship"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetRelationship( <span class="arg">PlayerID</span> player1, <span class="arg">PlayerID</span> player2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the relationship between 2 players.  Possible relationships are R_ENEMY, R_ALLY, R_NEUTRAL, R_UNDEFINED. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetResource"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetResource( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> resourceType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the amount of resources a given player has.  Possible resource types are RT_Manpower, RT_Fuel, RT_Munition, RT_Action, RT_Command </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetResourceRate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetResourceRate( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> resourceType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the amount of resources a given player is getting per second.  Possible resource types are RT_Manpower, RT_Fuel, RT_Munition, RT_Action, RT_Command </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetSquadCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetSquadCount( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of squads a player currently owns </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetSteamID"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Player_GetSteamID()
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the steamid of the local player. Note: As String, since Lua forces scientific notation on big Reals.<br>
<img src="efonly.png"></img> <span class="arg">This function is only available in CoH:EF</span> 
</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroupID</span> 
		Player_GetSquads( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a SquadGroupObs containing all the players units. </p>
<p> This function returns a 'global' squad group with the name '__Player%dSquads', where %d is the player ID.  This means that you should never need to destroy it./n However, if you do destroy it, it will be recreated the next time this function is called.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetStartingPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Player_GetStartingPosition( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the starting position for this player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetTeam"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetTeam( <span class="arg">PlayerID</span> p )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the team a player is on </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetUnitCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetUnitCount( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the current number of units the player has. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetUpgradeCost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_GetUpgradeCost( <span class="arg">PlayerID</span> player, <span class="arg">UpgradeBlueprint</span> upgradePBG, <span class="arg">Real</span> resourceType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the cost of an upgrade. Possible resource types are RT_Manpower, RT_Fuel, RT_Munition, RT_Action, RT_Command. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_HasBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">boolean</span> 
		Player_HasBuilding( <span class="arg">PlayerID</span> player, <span class="arg">BlueprintTable</span> entitytypes )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if this player owns any buildings listed in the table. </p>
<p>This only looks at completed buildings - use Player_HasBuildingUnderConstruction to see if the player is building something</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_HasBuildingsExcept"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">boolean</span> 
		Player_HasBuildingsExcept( <span class="arg">PlayerID</span> playerId, <span class="arg">BlueprintTable</span> exceptions )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if this player owns any buildings. (with exclusions). </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_HasBuildingUnderConstruction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">boolean</span> 
		Player_HasBuildingUnderConstruction( <span class="arg">PlayerID</span> player, <span class="arg">BlueprintTable</span> entitytypes )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if this player owns any buildings listed in the table currently under construction. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_HasLost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_HasLost( <span class="arg">PlayerID</span> player, <span class="arg">LuaTable</span> Blueprints )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks to see if a player has lost (if player owns any squads and any buildings contained in blueprints) </p>
<p>Pass in a table of blueprints of buildings that the player must have in order to be considered "alive".   Ambient buildings are already take into consideration since they must be occupied by a squad.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_HasMapEntryPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_HasMapEntryPosition( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether a player has a map entry position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_HasUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_HasUpgrade( <span class="arg">PlayerID</span> pPlayer, <span class="arg">UpgradeBlueprint</span> upgradePBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return true if the squad has purchased the specified upgrade. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_IsAlive"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_IsAlive( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if player is still alive and false if player is dead.  Will error if playerIdx is an invalid index. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_IsAllied"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_IsAllied( <span class="arg">PlayerID</span> playerId1, <span class="arg">PlayerID</span> playerId2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the players are allied and false if they are not. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_IsHuman"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_IsHuman( <span class="arg">PlayerID</span> pPlayer )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether a player is human controlled (local or remote), not dead, and not replaced by an AI </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_Kill"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_Kill( <span class="arg">PlayerID</span> player, <span class="arg">Boolean</span> endgame )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kill a player.  Will error if playerIdx is an invalid index. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_MakeSGroupVeteran"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real (amount of squads promoted)</span> 
		Player_MakeSGroupVeteran( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tries to promote each squad in an sgroup, given that the player has veteran squads available for the appropriate squad types. See Player_MakeSquadVeteran for more details. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_MakeSquadVeteran"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_MakeSquadVeteran( <span class="arg">PlayerID</span> player, <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>If the player has a veteran squad of the same type in reserve, it promotes an existing squad to match the veteran squad (rank and slot items). The veteran squad is "used up" and is no longer available. Does not promote squad if there would be no benefit in doing so. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_NumUpgradeComplete"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Player_NumUpgradeComplete( <span class="arg">PlayerID</span> player, <span class="arg">const char</span> *upgradeName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of upgrades that this player has. The upgradeName should be a relative filename (eg. upgrade/allies/research/phase_2.lua) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_OwnsEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_OwnsEGroup( <span class="arg">PlayerID</span> playerid, <span class="arg">EGroupID</span> egroup[, <span class="arg">Boolean</span> all] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a given player owns ALL or ANY items in a group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_OwnsEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_OwnsEntity( <span class="arg">PlayerID</span> playerid, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a given player owns an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_OwnsSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_OwnsSGroup( <span class="arg">PlayerID</span> playerid, <span class="arg">SGroupID</span> sgroup[, <span class="arg">Boolean</span> all] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a given player owns ALL or ANY items in a group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_OwnsSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Player_OwnsSquad( <span class="arg">PlayerID</span> playerid, <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a given player owns a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_RemoveAbilityLockoutZone"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_RemoveAbilityLockoutZone( <span class="arg">PlayerID</span> player, <span class="arg">AbilityBlueprint</span> abilityPBG, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a marker that was previously a lockout zone. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_RemoveUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_RemoveUpgrade( <span class="arg">PlayerID</span> player, <span class="arg">UpgradeBlueprint</span> upgrade )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes an upgrade from a player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_ResetResource"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_ResetResource( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> resourceType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reset the resource amount for a given player to zero.  Also reset team weapon </p>
<p>Possible resource types are RT_Manpower, RT_Fuel, RT_Munition, RT_Action, RT_Command.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_RestrictAddOnList"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_RestrictAddOnList( <span class="arg">PlayerID</span> playerid, <span class="arg">Table</span> addonlist )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Restrict a list of addons. </p>
<p>list should contain an array of strings to restrict.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_RestrictBuildingList"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_RestrictBuildingList( <span class="arg">PlayerID</span> playerid, <span class="arg">Table</span> blueprintlist )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Restrict a list of buildings. </p>
<p>list should contain an array of strings to restrict.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_RestrictResearchList"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_RestrictResearchList( <span class="arg">PlayerID</span> playerid, <span class="arg">StringTable</span> list )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Restrict a list of research items. </p>
<p>list should contain an array of strings to restrict.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_RevertChosenCommanderTree"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_RevertChosenCommanderTree( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes chosen CC tree and all upgrades associated with it. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetAbilityAvailability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetAbilityAvailability( <span class="arg">PlayerID</span> player, <span class="arg">AbilityBlueprint/Table</span> bp, <span class="arg">Real</span> availability )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the availability of an ability. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetAllCommandAvailability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetAllCommandAvailability( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> availability )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets availability of ALL entity, squad and player commands. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetCommandAvailability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetCommandAvailability( <span class="arg">PlayerID</span> player, <span class="arg">Real/Table</span> command, <span class="arg">Real</span> availability )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the availability of entity, squad and player commands. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetConstructionMenuAvailability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetConstructionMenuAvailability( <span class="arg">PlayerID</span> player, <span class="arg">String/Table</span> menuname, <span class="arg">Real</span> availability )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the availability of a construction menu. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetDefaultSquadMoodMode"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetDefaultSquadMoodMode( <span class="arg">PlayerID</span> pPlayer, <span class="arg">Real</span> mode )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set default squad mood mode which can be overrided by squad level mood mode settings </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetEntityProductionAvailability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetEntityProductionAvailability( <span class="arg">PlayerID</span> player, <span class="arg">EntityBlueprint/Table</span> bp, <span class="arg">Real</span> availability )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the availability of an entity production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetHeroBuildable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetHeroBuildable( <span class="arg">PlayerID</span> pModPlayer, <span class="arg">const int</span> id, <span class="arg">Boolean</span> bBuildable, <span class="arg">const ScarEntityPBG</span> ScarEntityPBGSpawner )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the hero to be buildable or not at the specified spawner </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetMaxCapPopulation"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetMaxCapPopulation( <span class="arg">PlayerID</span> playerid, <span class="arg">Real</span> captype, <span class="arg">Real</span> newcap )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the current personnel or vehicle max-cap for a player. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet). </p>
<p>you will have to call Player_SetMaxPopulation to adjust the current max population to do this.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetMaxPopulation"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetMaxPopulation( <span class="arg">PlayerID</span> playerid, <span class="arg">Real</span> captype, <span class="arg">Real</span> newcap )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the current personnel or vehicle cap for a player. The captype is either CT_Personnel or CT_Vehicle (you can't adjust Medic caps just yet). </p>
<p>Note that any modifiers that adjust the current cap will be applied on top of this.  Also note, the current cap cannot go higher than the max cap.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetPopCapOverride"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetPopCapOverride( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> personnel )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a pop cap override that ignores any modifiers. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetResource"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetResource( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> resourceType, <span class="arg">Real</span> amt )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the resource amount for a given player.  Ignores income cap and resource sharing. </p>
<p>Possible resource types are RT_Manpower, RT_Fuel, RT_Munition, RT_Action, RT_Command.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetSquadProductionAvailability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetSquadProductionAvailability( <span class="arg">PlayerID</span> player, <span class="arg">SquadBlueprint/Table</span> bp, <span class="arg">Real</span> availability )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the availability of a squad production item. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetUpgradeAvailability"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetUpgradeAvailability( <span class="arg">PlayerID</span> player, <span class="arg">UpgradeBlueprint/Table</span> bp, <span class="arg">Real</span> availability )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the availability of an upgrade. Availability can be either ITEM_LOCKED, ITEM_UNLOCKED, ITEM_REMOVED or ITEM_DEFAULT </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SetUpgradeCost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_SetUpgradeCost( <span class="arg">PlayerID</span> player, <span class="arg">UpgradeID</span> upgrade, <span class="arg">Real</span> manpower, <span class="arg">Real</span> fuel, <span class="arg">Real</span> munition, <span class="arg">Real</span> action, <span class="arg">Real</span> command )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the cost of an upgrade. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_SpawnGlider"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		Player_SpawnGlider( <span class="arg">PlayerID</span> player, <span class="arg">EntityBlueprint</span> glider, <span class="arg">Position</span> start, <span class="arg">Position</span> end )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Spawns a glider and returns it </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_StopAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_StopAbility( <span class="arg">PlayerID</span> player, <span class="arg">AbilityBlueprint</span> ability, <span class="arg">Boolean</span> bEarlyExit )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Abruptly stops an active ability </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_StopEarningActionPoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_StopEarningActionPoints( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Prevents a player from earning any action points (and by extention, command points) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_Triangulate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Player_Triangulate( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> squads, <span class="arg">EGroupID</span> entities )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the enemy squads and entities within a player's radio beacons. Radio beacons are shared among team members. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Presentation"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Presentation</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Actor_Clear"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Actor_Clear( <span class="arg">ActorTable</span> actor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clear ties between an actor and any units </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Actor_PlaySpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Actor_PlaySpeech( <span class="arg">ActorTable</span> actor, <span class="arg">Real</span> locID[, <span class="arg">Boolean</span> continueButton, <span class="arg">Boolean</span> stickySubtitle, <span class="arg">Boolean</span> blockInput] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays a speech event for a given actor WITH a portrait and subtitle </p>
<p>Be VERY careful how you use the 'blockInput' parameter. It blocks all input except mouse movement, a few critical keyboard keys, and the Continue and Menu buttons. So you should always allow a continue button when blocking input. You shouldn't block input for a sticky subtitle! If the speech file is not available, a placeholder time will be calculated for the message using the number of words and the message will be displayed for that length of time.<br> Actors: ACTOR.GenericAlly, ACTOR.GenericAxis, ACTOR.Keller, ACTOR.McKay, ACTOR.Conti, ACTOR.Franks, ACTOR.Peoples, ACTOR.Coogi, etc...</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Actor_PlaySpeechWithoutPortrait"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Actor_PlaySpeechWithoutPortrait( <span class="arg">ActorTable</span> actor, <span class="arg">Real</span> locID[, <span class="arg">Boolean</span> continueButton, <span class="arg">Boolean</span> stickySubtitle, <span class="arg">Boolean</span> blockInput] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays a speech event for a given actor WITHOUT a portrait or subtitle. See Actor_PlaySpeech for more details </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Actor_SetFromSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Actor_SetFromSGroup( <span class="arg">ActorTable</span> actor, <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tie an entire sgroup to an actor, so audio comes from a squad member </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Actor_SetFromSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Actor_SetFromSquad( <span class="arg">ActorTable</span> actor, <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tie a single squad to an actor, so audio comes from a squad member </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Proximity"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Proximity</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Prox_AreEntitiesNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_AreEntitiesNearMarker( <span class="arg">EGroupID</span> egroup, <span class="arg">MarkerID/Position/SectorID</span> position, <span class="arg">Boolean</span> all[, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL entities from a group are in range of a given position, marker, or territory sector. </p>
<p>Markers with proximity type rectangle will use circular proximity check if custom range is supplied<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_ArePlayerMembersNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_ArePlayerMembersNearMarker( <span class="arg">PlayerID</span> player, <span class="arg">MarkerID/Position/SectorID</span> position, <span class="arg">Boolean</span> all[, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of a player's members (i.e. individual guys, not squads as a whole) are in range of a given position, marker, or territory sector. DO NOT USE THIS FUNCTION UNLESS YOU ABSOLUTELY HAVE TO!! </p>
<p>You MUST specify a range if you are using a position rather than a marker.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_ArePlayersNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_ArePlayersNearMarker( <span class="arg">PlayerID</span> player, <span class="arg">MarkerID/Position/SectorID</span> position, <span class="arg">Boolean</span> all[, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of a player's squads are in range of a given position, marker, or territory sector. THIS FUNCTION IS VERY SLOW. DO NOT USE THIS UNLESS ABSOLUTELY NECESSARY. </p>
<p>Markers with proximity type rectangle will use circular proximity check if custom range is supplied<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_AreSquadMembersNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_AreSquadMembersNearMarker( <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID/Position/SectorID</span> position, <span class="arg">Boolean</span> all[, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL squad members (i.e. individual guys, not squads as a whole) from a group are in range of a given position, marker, or territory sector. DO NOT USE THIS FUNCTION UNLESS YOU ABSOLUTELY HAVE TO!! </p>
<p>Markers with proximity type rectangle will use circular proximity check if custom range is supplied<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_AreSquadsNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_AreSquadsNearMarker( <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID/Position/SectorID</span> position, <span class="arg">Boolean</span> all[, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL squads from a group are in range of a given position, marker, or territory sector </p>
<p>Markers with proximity type rectangle will use circular proximity check if custom range is supplied<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_EGroupEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Prox_EGroupEGroup( <span class="arg">EGroupID</span> egroup1, <span class="arg">EGroupID</span> egroup2, <span class="arg">ProxType</span> checktype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the distance between two entity groups. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. </p>
<p> If check is PROX_SHORTEST this will return the shortest distance between the two groups.<br> If check is PROX_LONGEST this will return the longest distance between the two groups.<br> If check is PROX_CENTER this will return the distance between the two groups centers.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_EGroupSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Prox_EGroupSGroup( <span class="arg">EGroupID</span> egroup1, <span class="arg">SGroupID</span> sgroup2, <span class="arg">ProxType</span> checktype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the distance between an entity group and a squad group.  use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. </p>
<p> If check is PROX_SHORTEST this will return the shortest distance between the two groups.<br> If check is PROX_LONGEST this will return the longest distance between the two groups.<br> If check is PROX_CENTER this will return the distance between the two groups centers.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_EntitiesInProximityOfEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_EntitiesInProximityOfEntities( <span class="arg">EGroupID</span> egroup1, <span class="arg">EGroupID</span> egroup2, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY entities are in proximity of a given entity group. </p>
<p>Set "all" to true to check that ALL entities are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_MarkerEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Prox_MarkerEGroup( <span class="arg">MarkerID</span> marker, <span class="arg">EGroupID</span> egroup, <span class="arg">ProxType</span> checktype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the distance between a marker and an entity group.  use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. </p>
<p> If check is PROX_SHORTEST this will return the shortest distance between the two groups.<br> If check is PROX_LONGEST this will return the longest distance between the two groups.<br> If check is PROX_CENTER this will return the distance between the two groups centers.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_MarkerSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Prox_MarkerSGroup( <span class="arg">MarkerID</span> marker, <span class="arg">SGroupID</span> sgroup, <span class="arg">ProxType</span> checktype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the distance between a marker and a squad group.  use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. </p>
<p> If check is PROX_SHORTEST this will return the shortest distance between the two groups.<br> If check is PROX_LONGEST this will return the longest distance between the two groups.<br> If check is PROX_CENTER this will return the distance between the two groups centers.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_PlayerEntitiesInProximityOfEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_PlayerEntitiesInProximityOfEntities( <span class="arg">PlayerID</span> playerid, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all, <span class="arg">EntityID</span> exclude )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY players squads are in proximity of a given entity group. </p>
<p>Set "all" to true to check that ALL entities are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_PlayerEntitiesInProximityOfPlayerSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_PlayerEntitiesInProximityOfPlayerSquads( <span class="arg">PlayerID</span> playerentities, <span class="arg">PlayerID</span> playersquads, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY players entities are in proximity of a given squad group. </p>
<p>Set "all" to true to check that ALL entities are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_PlayerEntitiesInProximityOfSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_PlayerEntitiesInProximityOfSquads( <span class="arg">PlayerID</span> playerid, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY players entities are in proximity of a given squad group. </p>
<p>Set "all" to true to check that ALL entities are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_PlayerSquadsInProximityOfEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_PlayerSquadsInProximityOfEntities( <span class="arg">PlayerID</span> playerid, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY players squads are in proximity of a given entity group. </p>
<p>Set "all" to true to check that ALL squads are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_PlayerSquadsInProximityOfPlayerEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_PlayerSquadsInProximityOfPlayerEntities( <span class="arg">PlayerID</span> playersquads, <span class="arg">PlayerID</span> playerentities, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY players squads are in proximity of a given players entities. </p>
<p>Set "all" to true to check that ALL squads are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_PlayerSquadsInProximityOfPlayerSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_PlayerSquadsInProximityOfPlayerSquads( <span class="arg">PlayerID</span> playerid1, <span class="arg">PlayerID</span> playerid2, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY players squads are in proximity of a given players squads. </p>
<p>Set "all" to true to check that ALL squads are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_PlayerSquadsInProximityOfSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_PlayerSquadsInProximityOfSquads( <span class="arg">PlayerID</span> playerid, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all, <span class="arg">SquadID</span> exclude )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY players squads are in proximity of a given squad group. </p>
<p>Set "all" to true to check that ALL squads are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_SGroupSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Prox_SGroupSGroup( <span class="arg">SGroupID</span> sgroup1, <span class="arg">SGroupID</span> sgroup2, <span class="arg">ProxType</span> checktype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the distance between two squad groups. use checktype PROX_SHORTEST, PROX_LONGEST, or PROX_CENTER. </p>
<p> If check is PROX_SHORTEST this will return the shortest distance between the two groups.<br> If check is PROX_LONGEST this will return the longest distance between the two groups.<br> If check is PROX_CENTER this will return the distance between the two groups centers.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_SquadsInProximityOfEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_SquadsInProximityOfEntities( <span class="arg">SGroupID</span> sgroup, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY squads are in proximity of a given entity group. </p>
<p>Set "all" to true to check that ALL squads are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Prox_SquadsInProximityOfSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Prox_SquadsInProximityOfSquads( <span class="arg">SGroupID</span> sgroup1, <span class="arg">SGroupID</span> sgroup2, <span class="arg">Real</span> proximity, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ALL or ANY squads are in proximity of a given squad group. </p>
<p>Set "all" to true to check that ALL squads are in proximity, or set "all" to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_RuleSystem"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>RuleSystem</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Rule_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_Add( <span class="arg">LuaFunction</span> rule[, <span class="arg">Real</span> priority] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed every frame. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddDelayedInterval"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddDelayedInterval( <span class="arg">LuaFunction</span> rule, <span class="arg">Real</span> delay, <span class="arg">Real</span> interval[, <span class="arg">Real</span> priority] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed at every 'interval' seconds, after an initial delay. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddDelayedIntervalEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddDelayedIntervalEx( <span class="arg">LuaFunction</span> rule, <span class="arg">Real</span> delay, <span class="arg">Real</span> interval, <span class="arg">Real</span> calls[, <span class="arg">Real</span> priority, <span class="arg">Real</span> calls] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed 'calls' times, at every 'interval' seconds, after an initial delay. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddEGroupEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddEGroupEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> eventtype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed when the event of 'eventType' has happened on entities in the 'egroup' </p>
<p>Event types are: GE_EntityKilled</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddEntityEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddEntityEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">EntityID</span> entity, <span class="arg">Real</span> eventtype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed when the event of 'eventType' has happened on the 'entity' </p>
<p>Event types are: GE_EntityKilled</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddInterval"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddInterval( <span class="arg">LuaFunction</span> rule, <span class="arg">Real</span> interval[, <span class="arg">Real</span> priority] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed at every 'interval' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddIntervalEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddIntervalEx( <span class="arg">LuaFunction</span> rule, <span class="arg">Real</span> interval, <span class="arg">Real</span> calls[, <span class="arg">Real</span> priority] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed 'calls' times, at every 'interval' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddOneShot"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddOneShot( <span class="arg">LuaFunction</span> rule, <span class="arg">Real</span> interval[, <span class="arg">Real</span> priority] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed once, after 'interval' seconds. Priority can be from 0 to 1000, with 0 being the lowest. Priority is used in conjunction with Rule_RemoveAll so that rules with high priority do not get removed. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddPlayerEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddPlayerEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">PlayerID</span> player, <span class="arg">Real</span> eventtype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed when the event of 'eventType' has happened on the 'player' </p>
<p>Event types are: GE_PlayerBeingAttacked</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddSGroupEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddSGroupEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> eventtype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed when the event of 'eventType' has happened on squads in the 'sgroup' </p>
<p>Event types are: GE_SquadKilled, GE_SquadPinned, GE_SquadCommandIssued, GE_AbilityExecuted</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddSquadEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddSquadEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">SquadID</span> squad, <span class="arg">Real</span> eventtype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed when the event of 'eventType' has happened on the 'squad' </p>
<p>Event types are: GE_SquadKilled, GE_SquadPinned, GE_SquadCommandIssued, GE_AbilityExecuted</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_ChangeInterval"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_ChangeInterval( <span class="arg">LuaFunction</span> rule, <span class="arg">Real</span> interval )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Change 'interval' seconds of an existing rule </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Rule_Exists( <span class="arg">LuaFunction</span> rule )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Test if a rule is currently active </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_Remove( <span class="arg">LuaFunction</span> rule )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a currently active rule (this does not remove any event rules) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_RemoveAll( <span class="arg">[Real</span> max_priority] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kills all rules below a certain priority. The default is to remove ALL rules. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_RemoveEGroupEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_RemoveEGroupEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove an active event rule for entities in the 'egroup' </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_RemoveEntityEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_RemoveEntityEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove an active event rule for the 'entity' </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_RemoveIfExist"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_RemoveIfExist( <span class="arg">LuaFunction</span> rule )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a currently active rule if it exists(this does not remove any event rules) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_RemoveMe"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_RemoveMe(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a currently executing rule (only works inside a rule function) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_RemovePlayerEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_RemovePlayerEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove an active event rule for the 'player' </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_RemoveSGroupEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_RemoveSGroupEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove an active event rule for squads in the 'sgroup' </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_RemoveSquadEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_RemoveSquadEvent( <span class="arg">LuaFunction</span> rule, <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove an active event rule for the 'squad' </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Setup"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Setup</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Setup_Difficulty"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Setup_Difficulty( <span class="arg">PlayerID</span> player[, <span class="arg">Real</span> difficulty, <span class="arg">string</span> Race, <span class="arg">Table</span> infantry_mod, <span class="arg">Table</span> vehicle_mod )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets up difficulty (currently: modifies entity health, and sets AI difficulty). You should pass in Game_GetSPDifficulty() as the difficulty. </p>
<p>You can optionally specify the race if the player is using squads different from his current race selection.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Setup_MissionPreset"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Setup_MissionPreset( <span class="arg">Real</span> missionIDnum )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Refers to 'MissionPresets.scar' and allows for all missions to have preset data taken into account. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Setup_Player"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		Setup_Player( <span class="arg">Real</span> playerIndex, <span class="arg">LocString</span> playerName, <span class="arg">String</span> playerRace, <span class="arg">Real</span> team )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Initializes the all of the players settings in one function and returns the playerID. </p>
<p> In most cases you will call this function from OnGameSetup and store the returned playerId in  a global variable.  The player index should be in the range [1 , (numPlayers)].<br> Valid player races: TRACE_ALLIES or TRACE_AXIS<br> Example: <br>function OnGameSetup( )<br>&emsp;g_player1 = Setup_Player(0, "PlayerDisplayName", TRACE_ALLIES, 1)<br> &emsp;-- g_player2 and g_player3 will be on the same team (allies)<br> &emsp;g_player2 = Setup_Player(1, "$20000", TRACE_AXIS 2)<br>&emsp;g_player3 = Setup_Player(2, "$20001", TRACE_AXIS, 2)<br> &emsp;-- The team ID starts from one!<br>end</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_SGroup"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>SGroup</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Cmd_StopSquadsExcept"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Cmd_StopSquadsExcept( <span class="arg">SGroupID</span> sgroup1[, <span class="arg">Boolean</span> stopCapture, <span class="arg">Boolean</span> stopBuild] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Pass in a group to command to 'stop'. Pass in booleans for capturing and building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CanLoadSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		EGroup_CanLoadSGroup( <span class="arg">EGroupID</span> sgroup, <span class="arg">SGroupID</span> sgroup_to_load, <span class="arg">Boolean</span> ALL) )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether an EGroup can load ALL or ANY of the squads in the SGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Rule_AddEGroupEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Rule_AddEGroupEvent( <span class="arg">LuaFunction</span> fule, <span class="arg">EGroup</span> egroup, <span class="arg">Real</span> eventtype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a rule to be executed when the event of 'eventType' has happened on the 'EGroup'	Event types are: GE_EntityKilled </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Add( <span class="arg">SGroupID</span> group, <span class="arg">SquadID</span> squadron )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds an squadron to the end of a group if the group doesnt already have it. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_AddGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_AddGroup( <span class="arg">SGroupID</span> group, <span class="arg">SGroupID</span> grouptoadd )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Same as EGroup_AddGroup.  Note: You cannot mix squad groups and entity groups. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_AddLeaders"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_AddLeaders( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a leader to all squads in a group that can take a leader. </p>
<p>This function will bypass all cost and queue prereqs</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_AddSlotItemToDropOnDeath"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_AddSlotItemToDropOnDeath( <span class="arg">SGroupID</span> groupid, <span class="arg">Int</span> itemid, <span class="arg">Float</span> drop_chance, <span class="arg">Bool</span> exclusive )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add to the list of slot items to drop when any one of the squads is wiped out </p>
<p>SGroup_AddSlotItemToDropOnDeath( squadid, item, false )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CanInstantReinforceNow"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_CanInstantReinforceNow( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return true if ANY or ALL of a group can reinforce now </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CanLoadSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_CanLoadSGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">SGroupID</span> sgroup_to_load, <span class="arg">Boolean</span> ALL) )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether an SGroup can load ALL or ANY of the squads in the SGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CanSeeSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_CanSeeSGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">SGroupID</span> targetsgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY squads in a group can see ALL or ANY squads in a target sgroup. </p>
</td>
</tr>

<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CheckVeterancyRank"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_CheckVeterancyRank( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> vetlevel )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>
Returns true if ALL squads in a group are at provided veterancy level.<br>
<img src="efonly.png"></img> <span class="arg">This function is only available in CoH:EF</span>
</p>
</td>
</tr>

<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CountVeterancyRank"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_CountVeterancyRank( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> vetlevel )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>
Returns amount of squads at provided veterancy level in this SGroup.<br>
<img src="efonly.png"></img> <span class="arg">This function is only available in CoH:EF</span>
</p>
</td>
</tr>

<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Clear"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Clear( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all entities from a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ClearPostureSuggestion"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_ClearPostureSuggestion( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears any previous posture suggestions made to a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Compare"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_Compare( <span class="arg">SGroupID</span> group1, <span class="arg">SGroupID</span> group2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the contents of the two groups are equal. Order of the entities does not matter. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ContainsBlueprints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_ContainsBlueprints( <span class="arg">SGroupID</span> sgroup, <span class="arg">BP/Table</span> blueprints, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if a group contains ALL or ANY of the blueprints. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ContainsSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_ContainsSGroup( <span class="arg">SGroupID</span> group1, <span class="arg">SGroupID</span> group2, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if SGroup1 contains ANY or ALL of SGroup2 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ContainsSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_ContainsSquad( <span class="arg">SGroupID</span> group, <span class="arg">Real</span> SquadID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if SGroup contains a particular SquadID </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Count"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_Count( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the total number of spawned and despawned squads in a group. </p>
<p>NOTE: SGroup_Count does not count the individiual soldiers in an SGroup.  For that, use SGroup_TotalMembersCount</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CountDeSpawned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_CountDeSpawned( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of despawned squads in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CountSpawned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_CountSpawned( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of spawned squads in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Create"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroupID</span> 
		SGroup_Create( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a new squadron group with the given name.   </p>
<p>  Squad groups are used for all units and vehicles.  You can issue orders such as move and attack to an entire squad group.  If you want a group for buildings or objects such as trees, use an EntityGroupObs instead.<br>  Note that you are allowed to have unamed squadgroups or squadgroups with the samename.  Be careful not to create  duplicates of your squad group when you dont intend to.  To be safe, you can check if the SquadGroupObs you want to create  exists using SGroup_Exists( )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CreateIfNotFound"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroupID</span> 
		SGroup_CreateIfNotFound( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find a squad group from name.  Creates a new one with given name if it doesnt exist. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CreateKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_CreateKickerMessage( <span class="arg">SGroupID</span> group, <span class="arg">PlayerID</span> player, <span class="arg">LocString</span> textid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create and display kicker message on the each squad in the sgroup to the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_DeSpawn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_DeSpawn( <span class="arg">SGroupID</span> groupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Despawn all spawned squads in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Destroy"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Destroy( <span class="arg">SGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Manually destroy a group that you dont need anymore. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_DestroyAllInMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_DestroyAllInMarker( <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Destroys all items in a group that are in proximity to a given marker. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_DestroyAllSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_DestroyAllSquads( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Destroys all spawned and despawned squads in a group. </p>
<p> Be careful not to confuse this with SGroup_Destroy which destroys the group and NOT the squads it contains.  This function will destroy spawned and despawned items in a group</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_DisableCombatPlans"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_DisableCombatPlans( <span class="arg">SGroupID</span> groupID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Disables all current combat plans for the squads in the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Duplicate"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Duplicate( <span class="arg">SGroupID</span> sgroup1, <span class="arg">SGroupID</span> sgroup2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Duplicates an SGroup </p>
<p> Creates a copy of sgroup1 in sgroup2. The function will clear sgroup2 beforehand if necessary.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Eject"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Eject( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> destination )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tells an SGroup to eject themselves from whatever they're inside (building or vehicle) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_EnableAttention"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_EnableAttention( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> attentive )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether an entity pays attention to its surroundings </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_EnableMinimapIndicator"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_EnableMinimapIndicator( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enable or disable minimap indicator on all squads in the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_EnableSurprise"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_EnableSurprise( <span class="arg">SGroupID</span> groupid, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables the surprise feature for an sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_EnableUIDecorator"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_EnableUIDecorator( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enable or disable decorators on all squads in the sgroup  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_Exists( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad group with the given name exists </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_FaceEachOther"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_FaceEachOther( <span class="arg">SGroupID</span> sgroup1, <span class="arg">SGroupID</span> sgroup2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes two SGroups face each other </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_FaceMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_FaceMarker( <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes a SGroup face a marker. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Filter"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Filter( <span class="arg">SGroupID</span> sgroup, <span class="arg">ID/Table</span> blueprint, <span class="arg">Real</span> filtertype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Filters an SGroup by blueprint. </p>
<p> Blueprints can be provided by name or by ID, and in a table if you want to filter on more than one type. Setting filtertype to FILTER_KEEP results in the group only containing squads of the types listed in the blueprint table. Setting filtertype to FILTER_REMOVE will strip those same squads out and leave those that aren't of the types listed.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_FilterCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_FilterCount( <span class="arg">SGroupID</span> sgroup1, <span class="arg">Int</span> groupSize )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Pass in a group and it will filter it down to the indicated number </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_FilterThreat"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_FilterThreat( <span class="arg">SGroupID</span> sgroup, <span class="arg">LuaTable</span> tableSBPs, <span class="arg">[Boolean</span> bEmpty] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Searches an SGroup and finds the first threat within the table (searching first to last) and removes all other SBPs. </p>
<p> Optional parameter bEmpty can be set to true, will clear the SGroup if none of the SBPS in the table are found.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ForEach"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_ForEach( <span class="arg">SGroupID</span> sgroup, <span class="arg">LuaBinding::StackVarFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return true to break or false to continue. </p>
<p> function Rule_Test( )<br> &emsp;local DespawnSquad = function( sgroupid, itemindex, squadID )<br> &emsp;&emsp;Squad_Despawn( squadID )<br> &emsp;end<br><br> &emsp;SGroup_ForEach( SGroup_FromName("sg_Squads"), DespawnSquad )<br> end<br><br> This functions iterates over spawned squads only.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ForEachAllOrAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_ForEachAllOrAny( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all, <span class="arg">LuaBinding::StackVarFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Call a lua function for each item in a group. Function will recieve (groupid, itemindex, itemid) and should return a bool. </p>
<p> Only use this to TEST conditions on squads. DO NOT use this to perform operations on all squads, since it may not call your function on all squads (due to short circuit evaluation). This is used for checking if ALL or ANY items in a group match a given predicate. (eg. Are all items in a group choas marines)<br> This functions iterates over spawned squads only.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ForEachAllOrAnyEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_ForEachAllOrAnyEx( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all, <span class="arg">LuaBinding::StackVarFunction</span> f, <span class="arg">Boolean</span> spawned, <span class="arg">Boolean</span> despawned )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Same as SGroup_ForEachAllOrAny except you have a choice to iterate over spawned squads, despawned squads, or both. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ForEachEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_ForEachEx( <span class="arg">SGroupID</span> sgroup, <span class="arg">LuaBinding::StackVarFunction</span> f, <span class="arg">Boolean</span> spawned, <span class="arg">Boolean</span> despawned )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Same as SGroup_ForEach except you have a choice to iterate over spawned squads, despawned squads, or both. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_FromName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroupID</span> 
		SGroup_FromName( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find an squadron group with a given name. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetAvgHealth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_GetAvgHealth( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the average health of all units in a squad group. </p>
<p>It now uses the same health measure that's used by the UI, so it does take into account fallen members of a squad</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetAvgLoadout"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_GetAvgLoadout( <span class="arg">SGroup</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the average loadout of all squads in a group as a percent [0.0, 1.0]. </p>
<p>Example: A group of squads with loadouts of 4/8 and 1/1 would return 0.75</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetDeSpawnedSquadAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		SGroup_GetDeSpawnedSquadAt( <span class="arg">SGroupID</span> group, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the despawned squad at a certain position in the group. </p>
<p>  This is a one-based index (use index 1 to get the first squad in the group.)    It is an error if index &gt; SGroup_GetDeSpawnedCount().</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetGarrisonedBuildingEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		SGroup_GetGarrisonedBuildingEntity( <span class="arg">SGroupID</span> groupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the entity id of the building that any squad of the sgroup is garrisoned in </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetHoldEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_GetHoldEGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">EGroup</span> EGroupHold )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets all the entities that an SGroup may occupy and adds them to the EGroupHold </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetHoldSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_GetHoldSGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">SGroup</span> SGroupHold )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets all the squads that an SGroup may occupy and adds them to the SGroupHold </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetInvulnerable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_GetInvulnerable( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check invulnerablity state for ALL or ANY squads in a squad group. </p>
<p> Set all param to true to check for ALL or set to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetLastAttacker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_GetLastAttacker( <span class="arg">SGroup</span> SGroupVictim, <span class="arg">SGroup</span> SGroupAttacker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the last attacker(s) for all the squads in an SGroup Gets the last attacker for all the squads in an SGroup and stores that in SGroupAttacker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetLoadedVehicleSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		SGroup_GetLoadedVehicleSquad( <span class="arg">SGroupID</span> groupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the squad id of the vehicle squad that any squad of the sgroup is loaded in </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		SGroup_GetName( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the name of a given squad group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetNumSlotItem"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Int</span> 
		SGroup_GetNumSlotItem( <span class="arg">SGroupID</span> group, <span class="arg">Int</span> itemID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the number of slot items with the same ID that the squads in the sgroup own </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetOffsetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		SGroup_GetOffsetPosition( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> offset, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a position (a certain distance away) relative to a squad's current position/orientation. see LuaConsts.scar for explanation of 'offset' parameter </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		SGroup_GetPosition( <span class="arg">SGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the center position of a squad group. </p>
<p>Despawned squads are ignored.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetRandomSpawnedSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		SGroup_GetRandomSpawnedSquad( <span class="arg">SGroup</span> sgroupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get a random spawned squad from sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetSequence"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Table</span> 
		SGroup_GetSequence( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Builds a table of SGroupIDs that are named in a sequence. i.e. a name of "sg_killer" will find groups "sg_killer1", "sg_killer2" and so on, up until it looks for a group that isn't there. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetSpawnedSquadAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		SGroup_GetSpawnedSquadAt( <span class="arg">SGroupID</span> group, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the spawned squad at a certain position in the group. </p>
<p>  This is a one-based index (use index 1 to get the first squad in the group.)    It is an error if index &gt; SGroup_GetSpawnedCount().</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetSpread"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_GetSpread( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the distance from the centre of the group of the unit that furthest out.  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetSquadsHeld"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_GetSquadsHeld( <span class="arg">SGroupID</span> sgroup, <span class="arg">SGroupID</span> sgroupRecipient )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns an sgroup containing all squads held by any squad in an sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetSuppression"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Float</span> 
		SGroup_GetSuppression( <span class="arg">SGroupID</span> groupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the suppression level for the first squad in the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetVeterancyExperience"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Float</span> 
		SGroup_GetVeterancyExperience( <span class="arg">SGroupID</span> groupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the veterancy experience value for the first squad in the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_GetVeterancyRank"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Int</span> 
		SGroup_GetVeterancyRank( <span class="arg">SGroupID</span> groupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the veterancy rank for the first squad in the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_HasCritical"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_HasCritical( <span class="arg">SGroupID</span> group, <span class="arg">CriticalID</span> critical, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of the squads in the SGroup have the specified critical </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_HasLeader"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_HasLeader( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if ALL or ANY squads in a sgroup have a leader </p>
<p> Set all param to true to check for ALL or set to false to check for ANY.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_HasTeamWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_HasTeamWeapon( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of the squads in an SGroup are carrying some kind of team weapon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_HasUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_HasUpgrade( <span class="arg">SGroupID</span> sgroup, <span class="arg">UpgradeID</span> upgrade, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether ANY or ALL squads in an SGroup have the specified upgrade </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Hide"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Hide( <span class="arg">SGroupID</span> sgroup, <span class="arg">Bool</span> hide )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Hide or show all entities in all squads in an SGroup </p>
<p>Bool should be true to hide, false to show</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IncreaseVeterancyExperience"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_IncreaseVeterancyExperience( <span class="arg">SGroupID</span> groupid, <span class="arg">Float</span> experience[, <span class="arg">Boolean</span> silent, <span class="arg">Boolean</span> applyModifiers] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Increase squad veterancy experience for all squads in the sgroup. Can do silent promotion (no sound/UI). Can skip modifiers, giving you direct control of experience gained. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IncreaseVeterancyRank"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_IncreaseVeterancyRank( <span class="arg">SGroupID</span> groupid[, <span class="arg">Real</span> numranks, <span class="arg">Boolean</span> silent] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Increase squad veterancy rank for all squads in the sgroup. By default, increases rank by 1. Can do silent promotion (no sound/UI. ex: mass rank insrease at mission start) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Intersection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Intersection( <span class="arg">SGroupID</span> group, <span class="arg">SGroupID</span> grouptointersect )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Same as EGroup_Intersection. Note: You cannot mix squad groups and entity groups. </p>
<p> Only squads that are in both groups will be added to 'group'.<br> The contents of 'grouptointersect' will not be changed.<br> Example: group = (1,2,3,4,5,6)  grouptointersect = (2,4,6,8,10)   --&gt; group will now equal (2,4,6)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsAttackMoving"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsAttackMoving( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL squads in an SGroup are attack moving. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsCamouflaged"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsCamouflaged( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of the squads in an SGroup are camouflaged </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsCapturing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsCapturing( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> ALL )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ANY or ALL squads in an SGroup are capturing </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsConstructingBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsConstructingBuilding( <span class="arg">SGroup</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY squads in a group are currently constructing a building. </p>
<p>Set all to true to check for ALL or set to false to check for ANY</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsDoingAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsDoingAbility( <span class="arg">SGroupID</span> sgroupid, <span class="arg">AbilityID</span> ability, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns if ANY or ALL members of an SGroup are doing an ability </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsDoingAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsDoingAttack( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all, <span class="arg">Float</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY squads are attacking within the time. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsDugIn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsDugIn( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of the squads in the SGroup is dug in (or in the process of digging in) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsEmpty"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsEmpty( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a named squad group is empty </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsHoldingAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_IsHoldingAny( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether any entity in an SGroup has a hold on anything </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsIdle"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsIdle( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> ALL )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ANY or ALL squads in an SGroup are idle </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsInCover"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real/Boolean</span> 
		SGroup_IsInCover( <span class="arg">SGroupID</span> sgroup[, <span class="arg">Boolean</span> all] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the percentage of the SGroup members that are in cover. Alternatively, specify ANY or ALL as a second parameter to return true/false. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsInfiltrated"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsInfiltrated( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY squads in a group are infiltrated </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsInHoldEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsInHoldEntity( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> ALL )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ANY or ALL squads in an SGroup are garrisoned in an entity (building)  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsInHoldSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsInHoldSquad( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> ALL )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ANY or ALL squads in an SGroup are garrisoned in a squad (transport vehicle)  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsMoving"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsMoving( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL squads in an SGroup are moving. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Bool</span> 
		SGroup_IsOnScreen( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> group, <span class="arg">Bool</span> all[, <span class="arg">Float</span> percent] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL (use those keywords) of the squads in the group are present onscreen. You can pass in a percentage of the screen to check, so 0.8 would be a centered rectangle occupying 80% of the screen. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsPinned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsPinned( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of a group is pinned </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsReinforcing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsReinforcing( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY squads in a group are currently calling for reinforcments. </p>
<p>Set all to true to check for ALL or set to false to check for ANY</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsRetreating"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsRetreating( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of the squads in an SGroup are currently retreating </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsSettingDemolitions"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsSettingDemolitions( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL squads are setting demolitions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsSuppressed"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsSuppressed( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true is ANY or ALL of a group is suppressed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsUnderAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsUnderAttack( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all, <span class="arg">Float</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY squads are under attack within the time. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsUnderAttackByPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Bool</span> 
		SGroup_IsUnderAttackByPlayer( <span class="arg">SGroupID</span> group, <span class="arg">PlayerID</span> attackerplayer, <span class="arg">Float</span> duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the squads are attacked by the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsUnderAttackFromDirection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsUnderAttackFromDirection( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all, <span class="arg">Real</span> offset, <span class="arg">Float</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY squads are under attack from a direction within the time. see LuaConsts.scar for types of directions. you can pass in a table of directions </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsUpgrading"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsUpgrading( <span class="arg">SGroupID</span> sgroup, <span class="arg">UpgradeBlueprint</span> blueprint, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY squads in a group are currently upgrading. You can pass in nil for upgradeid if it doesn't matter what is being upgraded. </p>
<p>Set all to true to check for ALL or set to false to check for ANY</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_IsUsingAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SGroup_IsUsingAbility( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> ALL )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks if ANY or ALL squads in an SGroup are using an ability </p>
<p>Does not check WHAT ability a squad is using.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Kill"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Kill( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kills all squads in an SGroup. This kills them 'naturally', as opposed to SGroup_DestroyAllSquads() which makes them blink out of existance. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_MergeFirstSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_MergeFirstSquad( <span class="arg">SGroup</span> sgroupid1, <span class="arg">SGroup</span> sgroupid2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Merge first squads in the SGroups. The resulting squad will be in both SGroups </p>
<p>Merging only works on squads with the same blueprint type. Squad loadout limit is ignored.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_Remove( <span class="arg">SGroupID</span> group, <span class="arg">SquadID</span> squadron )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes an squadron from a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_RemoveGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_RemoveGroup( <span class="arg">SGroupID</span> group, <span class="arg">SGroupID</span> grouptoremove )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove from the first SGroup all squads contained in the second SGroup. SGroup2 remains untouched. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_RemoveUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_RemoveUpgrade( <span class="arg">SGroupID</span> sgroup, <span class="arg">UpgradeBlueprint/Table</span> upgrade )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes upgrade(s) from an sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_ReSpawn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_ReSpawn( <span class="arg">SGroupID</span> groupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Respawn all despawned squads in a group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_RestoreCombatPlans"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_RestoreCombatPlans( <span class="arg">SGroupID</span> sgroupID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Restore all current combat plans for the squads in the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_RewardActionPoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_RewardActionPoints( <span class="arg">SGroupID</span> sgroup, <span class="arg">Float</span> actionpoint )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Give action points to the squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetAnimatorState"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetAnimatorState( <span class="arg">SGroupID</span> sgroupid, <span class="arg">String</span> stateMachineName, <span class="arg">String</span> stateName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation state of a state machine for an SGroup. Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetAutoTargetting"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetAutoTargetting( <span class="arg">SGroupID</span> group, <span class="arg">String</span> hardpoint, <span class="arg">Bool</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether a weapon to auto-target things or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetAvgHealth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_SetAvgHealth( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> healthpercent )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the health of each squad in a squad group to a given percent [0.0, 1.0]. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetAvgMorale"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_SetAvgMorale( <span class="arg">SGroup</span> sgroup, <span class="arg">Real</span> moralepercent )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the moral of each squad in a squad group to a given percent [0.0, 1.0]. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetCrushable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetCrushable( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> crushable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Overrides crushable behavior for an sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetInvulnerable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetInvulnerable( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean/Real</span> enabled[, <span class="arg">Float</span> reset_time] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enable/Disable invulnerablity for an entire SGroup. Use true and false for simple on/off, or use a number between 0.0 and 1.0 for more precise control on how much damage a squad can take before it takes no more. </p>
<p>The optional reset_time is used to automatically remove invulnerability after a set time. If invulnerable, both health and critical damage are disabled.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetMoodMode"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetMoodMode( <span class="arg">SGroupID</span> group, <span class="arg">Real</span> mode )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set soldier mood mode. Mode could be MM_Auto, MM_ForceCalm or MM_ForceTense </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetMoveType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetMoveType( <span class="arg">SGroupID</span> group, <span class="arg">MoveTypeBlueprint</span> movetype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the move type for an SGroup - find the move types in the MOVETYPE table in LuaConsts.scar </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetPlayerOwner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetPlayerOwner( <span class="arg">SGroupID</span> sgroup, <span class="arg">PlayerID</span> owner )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Changes the player owner of spawned and despawned squads in an SGroup. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetSelectable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetSelectable( <span class="arg">SGroup</span> sgroupid, <span class="arg">bool</span> selectable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set player selectable state of squads in the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetSharedProductionQueue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetSharedProductionQueue( <span class="arg">SGroupID</span> egroup, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables shared team production on a building (teammates can build using THEIR resources) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetSuppression"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetSuppression( <span class="arg">SGroupID</span> groupid, <span class="arg">Float</span> suppression )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the suppression level for all squads in the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetTeamWeaponCapturable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetTeamWeaponCapturable( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set team weapon in the squads to be capturable or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SetWorldOwned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SetWorldOwned( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes an sgroup neutral </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_Single"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroupID</span> 
		SGroup_Single( <span class="arg">SGroupID</span> groupID, <span class="arg">squadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a squad group containing a single squad </p>
<p> Creates an SGroup containing just one squad, creating the group if it doesn't exist and clearing it if it does. It returns the name of the SGroup.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SnapFaceEachOther"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SnapFaceEachOther( <span class="arg">SGroupID</span> sgroup1, <span class="arg">SGroupID</span> sgroup2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes two SGroups face each other at no time </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SplitFirstSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		SGroup_SplitFirstSquad( <span class="arg">SGroup</span> sgroupid1, <span class="arg">INT</span> num )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Split first squad into a new squad with size "num" </p>
<p>The new squad would not have any upgrads or modifiers from the original squad</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SuggestPosture"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SuggestPosture( <span class="arg">SGroupID</span> sgroup, <span class="arg">unsigned</span> posture, <span class="arg">Real</span> duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Suggests a posture to an SGroup, lasting the passed duration </p>
<p>Posture of 0 is prone, 1 is kneel/crouch, and 2 is standing.  Duration is in seconds, negative means indefinate.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_TotalMembersCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		SGroup_TotalMembersCount( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the total count of all members of all the squads in a given SGroup. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_WarpToMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_WarpToMarker( <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Warps all members of an SGroup immediately to a marker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_WarpToPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_WarpToPos( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Warps all members of an SGroup immediately to a new position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetOffsetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Squad_GetOffsetPosition( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> offset, <span class="arg">Real</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a position relative to a squad's current position and orientation. see LuaConsts.scar for explanation of 'offset' parameter. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsCamouflaged"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsCamouflaged( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether ANY entity in the squad is camouflaged </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetAnimatorState"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetAnimatorState( <span class="arg">SquadID</span> squadid, <span class="arg">String</span> stateMachineName, <span class="arg">String</span> stateName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set animation state of a state machine for a squad Please only use this for simple animations </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Sound"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Sound</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Sound_DisableSpeechEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_DisableSpeechEvent( <span class="arg">Real</span> event )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Disables certain speech events. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_PreCacheSinglePlayerSpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_PreCacheSinglePlayerSpeech( <span class="arg">String</span> mission )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>pre-caches single player speech. For instance pre-caching mission 1 speech is done like: Sound_PreCacheSinglePlayerSpeech( "mission01" ) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Speech_SetGlobalStealthRead"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Speech_SetGlobalStealthRead( <span class="arg">Real</span> sunlightThreshold )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Overrides default stealth speech auto-detect mechanism. Stealth speech will play when sunlight brightness is below the threshold, with 0 being total darkness and 1 being full brightness. Set to -1 to use the default behavior. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Squad"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Squad</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="SGroup_FacePosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_FacePosition( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Works like Squad_FacePosition.  All Squads will face the same direction, with the squad the closest to the center determining the direction. </p>
<p>This function works on spawned squads only.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_SnapFacePosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_SnapFacePosition( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Works like SGroup_FacePosition except with no interpolation.  All Squads will face the same direction, with the squad the closest to the center determining the direction. </p>
<p>This function works on spawned squads only.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_AddSlotItemToDropOnDeath"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_AddSlotItemToDropOnDeath( <span class="arg">SquadID</span> squad, <span class="arg">SlotItemBlueprint</span> pbg, <span class="arg">Real</span> dropChance, <span class="arg">Boolean</span> exclusive )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add to the list of slot items to drop when this squad is wiped out </p>
<p>Squad_AddSlotItemToDropOnDeath( squadid, item, false )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CanCaptureStrategicPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_CanCaptureStrategicPoint( <span class="arg">SquadID</span> squad, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if squad can capture stategic point </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CanCaptureTeamWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_CanCaptureTeamWeapon( <span class="arg">SquadID</span> pSquad, <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>True if the squad can capture the entity sync weapon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CanHold"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_CanHold( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether a squad can hold any squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CanInstantReinforceNow"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_CanInstantReinforceNow( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad is available to be reinforced </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CanLoadSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_CanLoadSGroup( <span class="arg">SquadID</span> squad, <span class="arg">SGroupID</span> loadthis, <span class="arg">Boolean</span> bCheckSquadState, <span class="arg">Boolean</span> bOverload )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether a squad can load an entire sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CanLoadSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_CanLoadSquad( <span class="arg">SquadID</span> squad, <span class="arg">SquadID</span> loadthis, <span class="arg">Boolean</span> bCheckSquadState, <span class="arg">Boolean</span> bOverload )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether a squad can load another squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CanSeeEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_CanSeeEntity( <span class="arg">SquadID</span> squad, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a given entity is in the squads sight radius </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CanSeeSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_CanSeeSquad( <span class="arg">SquadID</span> squad, <span class="arg">SquadID</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a target squad is in the squads sight radius </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_ClearPostureSuggestion"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_ClearPostureSuggestion( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears any previous posture suggestions made to a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_Count"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_Count( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of units currently in a squad (spawned AND despawned!!) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CreateAndSpawnToward"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		Squad_CreateAndSpawnToward( <span class="arg">SquadBlueprint</span> sbp, <span class="arg">PlayerID</span> player, <span class="arg">Real</span> loadoutCount, <span class="arg">Position</span> pos, <span class="arg">Position</span> toward )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a squad, spawn it and assign it to a player.  </p>
<p> This will create a squad of size 'loadoutCount' and of unit type 'unit_base' (from squad blueprint)<br> Note: loadoutCount will be clipped to loadoutMin and loadoutMax from the squad blueprint. A loudoutCount  of zero means create the whole squad as is.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_CreateHeroAndSpawnToward"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		Squad_CreateHeroAndSpawnToward( <span class="arg">SquadBlueprint</span> sbp, <span class="arg">EntityBlueprint</span> spawnerPBG, <span class="arg">PlayerID</span> player, <span class="arg">Real</span> loadoutCount, <span class="arg">Position</span> pos, <span class="arg">Position</span> toward )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a hero, spawn it and assign it to the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_DeSpawn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_DeSpawn( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Despawn the entire squad at its current position. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_Destroy"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_Destroy( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove an squad from the world and destroy it. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_EnableProductionQueue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_EnableProductionQueue( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether a squad can produce anything (including upgrades) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_EnableSurprise"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_EnableSurprise( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables the surprise feature on thie given squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_FacePosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_FacePosition( <span class="arg">SquadID</span> squad, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the rotation of all troopers in a squad to face the position. </p>
<p>The center of the squad will face the position and all other troops will use the same rotation as the from center vector.<br><br> This function works on spawned squads only.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_FaceSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_FaceSquad( <span class="arg">SquadID</span> squad1, <span class="arg">SquadID</span> squad2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get 2 squads to face each other. This function works on spawned squads only. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_FindCover"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Squad_FindCover( <span class="arg">SquadID</span> squad, <span class="arg">Position</span> pos, <span class="arg">Real</span> coverSearchRadius )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tries to find cover within a certain radius of a position. If no cover is found, it returns the position used for the search. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_FindCoverCompareCurrent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Squad_FindCoverCompareCurrent( <span class="arg">SquadID</span> squad, <span class="arg">Position</span> pos, <span class="arg">Real</span> coverSearchRadius, <span class="arg">Real</span> maxPathDistanceFromGoal, <span class="arg">Boolean</span> compareToCurrentCover )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tries to find cover within a certain radius of a position, traveling a max distance to get there, and possibly comparing against current position's cover. If no cover is found, it returns the position used for the search. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_FromWorldID"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		Squad_FromWorldID( <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get a squad from a mission editor ID. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetActiveCommand"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetActiveCommand( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the active squad command.  Valid squad commands are SQUADSTATEID_Idle, SQUADSTATEID_Move, SQUADSTATEID_Stop, SQUADSTATEID_Combat, SQUADSTATEID_Capture, SQUADSTATEID_Ability, SQUADSTATEID_Construction, SQUADSTATEID_CombatStance, SQUADSTATEID_Load, SQUADSTATEID_Unload, SQUADSTATEID_HoldUnload, SQUADSTATEID_Retreat, SQUADSTATEID_WeaponTransition, SQUADSTATEID_AttackMove, SQUADSTATEID_CaptureTeamWeapon, SQUADSTATEID_Defuse, SQUADSTATEID_PlaceCharges, SQUADSTATEID_DefuseMine, SQUADSTATEID_PickUpSlotItem, SQUADSTATEID_Plan, SQUADSTATEID_Patrol, SQUADSTATEID_RevertFieldSupport. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetAttackPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Squad_GetAttackPlan( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get name of current Squad AI attack plan </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetAttackTargets"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_GetAttackTargets( <span class="arg">SquadID</span> squad, <span class="arg">SGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find the squad member current or forced targets. If found, the targets squads are added to the sgroup. Entity targets like buildings are ignored </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetBaseUnitName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Squad_GetBaseUnitName( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a string containing the base unit name for the current squadron </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadBlueprint</span> 
		Squad_GetBlueprint( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the name of the squad blueprint (from the attribute editor) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetDestination"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Squad_GetDestination( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the squad's destination, if it's moving. IMPORTANT: you must only call this function if Squad_HasDestination has returned true. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetGameID"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetGameID( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns an Real containing the unqiue squad ID for this squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetHeading"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Squad_GetHeading( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the average heading of the spawned units in the squad. The heading is currently a lua table with three entries (x, y, z) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetHealth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetHealth( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the current health of a squad. </p>
<p>The current health of the squad is the total health of each entity in that squad.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetHealthMax"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetHealthMax( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the max health of the squad. </p>
<p> The max health of a squad is the max health of each entity in that squad.  This means that the max health of a squad may change when entities are added or removed from the squad.<br><br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetHealthPercentage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetHealthPercentage( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how much of an original squad's health is left, accounting for deaths (ex: a squad of 3 riflemen would be at 50% health, since they started with 6 members) Note: This is the same percentage that the UI uses. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetHeroIDFromHeroSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetHeroIDFromHeroSquad( <span class="arg">SquadID</span> p_Squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the hero id from a hero squad (-1 if not valid) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetHoldEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		Squad_GetHoldEntity( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get which building (entity) is the squad garrisoned </p>
<p>Please use Squad_IsInHold() to check first</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetHoldSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		Squad_GetHoldSquad( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get which vehicle (squad) is the squad garrisoned </p>
<p>Please use Squad_IsInHold() to check first</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetInvulnerable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Bool</span> 
		Squad_GetInvulnerable( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the squad is invulnerable or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetInvulnerableMinCap"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetInvulnerableMinCap( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the highest invulnerable min cap percentage from members of the squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetLastAttacker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_GetLastAttacker( <span class="arg">SquadID</span> squad, <span class="arg">SGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find the last squad attacker on this squad. If found, the squad is added to the sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetLastAttackers"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_GetLastAttackers( <span class="arg">SquadID</span> squad, <span class="arg">SGroupID</span> group, <span class="arg">Real</span> timeSeconds )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find the squad attackers on this squad from the last seconds specified. If found, the squads are added to the sgroup. Building attackers are ignored </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetLastEntityAttacker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_GetLastEntityAttacker( <span class="arg">SquadID</span> pSquad, <span class="arg">EGroupID</span> pEGroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find the last entity attacker on this squad. If found, the entity added to egroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetMax"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetMax( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the max number of units allowed in the squadron (from squad_loadout_ext) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetNumSlotItem"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetNumSlotItem( <span class="arg">SquadID</span> squad, <span class="arg">SlotItemBlueprint</span> pbg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the number of slot items with the same ID that the squad has </p>
<p>Squad_GetNumSlotItem( squadid, item )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetPinnedPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Squad_GetPinnedPlan( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get name of current Squad AI reaction plan </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetPlayerOwner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		Squad_GetPlayerOwner( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the Player owner of the given squad. Squad MUST NOT be owned by the world. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Squad_GetPosition( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the average position of the spawned units in the squad. The position is currently a lua table with three entries (x, y, z) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetPositionDeSpawned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Squad_GetPositionDeSpawned( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the average position of the despawned AND spawned units in the squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetProductionQueueItem"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Blueprint</span> 
		Squad_GetProductionQueueItem( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the blueprint for a production queue item with index. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetProductionQueueItemType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetProductionQueueItemType( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the production type (PITEM_Upgrade, PITEM_Spawn, PITEM_SquadUpgrade, PITEM_SquadReinforce, PITEM_PlayerUpgrade) for a production queue item with index. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetProductionQueueSize"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetProductionQueueSize( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of items in the squad's production queue. </p>
<p>It is an error to call this function on a squad that does not have a production queue.<br> Use Squad_HasProductionQueue to check that the squad has a queue.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetReactionPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Squad_GetReactionPlan( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get name of current Squad AI reaction plan </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetRetaliationPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Squad_GetRetaliationPlan( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get name of current Squad AI retaliation plan </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetSlotItemAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetSlotItemAt( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the ID of the slot item. Use Squad_GetSlotItemCount to determine how many slot items the squad has. The first index is 1 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetSlotItemCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetSlotItemCount( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many slot items this squad has </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetSlotItemsTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LuaTable</span> 
		Squad_GetSlotItemsTable( <span class="arg">SquadID</span> squadid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table of SlotItem ID's that this squad currently owns </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetSquadsHeld"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_GetSquadsHeld( <span class="arg">SquadID</span> squad, <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds all squads held by 'squad' to an sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetSuppression"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetSuppression( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check current squad suppresion level. Return value from 0 to 1 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetVeterancyExperience"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetVeterancyExperience( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get current squad veterancy experience </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetVeterancyRank"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetVeterancyRank( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get current squad veterancy rank. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GiveSlotItem"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_GiveSlotItem( <span class="arg">SquadID</span> squad, <span class="arg">SlotItemBlueprint</span> pbg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gives a slot item to the squad. Can fail due to not enough slots left </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GiveSlotItemsFromTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_GiveSlotItemsFromTable( <span class="arg">SquadID</span> squadid, <span class="arg">LuaTable</span> itemTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gives all slot items in a table to the squad. The table should come from Squad_GetSlotItemsTable </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_HasActiveCommand"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_HasActiveCommand( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if there's an active command currently for the squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_HasCritical"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Bool</span> 
		Squad_HasCritical( <span class="arg">SquadID</span> squad, <span class="arg">CriticalID</span> critical )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if a squad has a critical or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_HasDestination"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_HasDestination( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether this squad is moving and has a destination </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_HasProductionQueue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_HasProductionQueue( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a squad has a production queue. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_HasTeamWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_HasTeamWeapon( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad is carrying some kind of team weapon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_HasUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_HasUpgrade( <span class="arg">SquadID</span> squad, <span class="arg">UpgradeBlueprint</span> pbg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return true if the squad has purchased the specified upgrade. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IncreaseHeroLevel"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_IncreaseHeroLevel( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> numLevels )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Increase the level of a hero squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IncreaseVeterancyExperience"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_IncreaseVeterancyExperience( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> experience, <span class="arg">Boolean</span> silent, <span class="arg">Boolean</span> applyModifiers )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Increase current squad veterancy experience </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IncreaseVeterancyRank"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_IncreaseVeterancyRank( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> numranks, <span class="arg">Boolean</span> silent )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Increase current squad veterancy rank </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_InstantSetupTeamWeapon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_InstantSetupTeamWeapon( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops current squads activity and instant setup the team weapon if they have one </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsAttacking"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsAttacking( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if any unit in the squad is attacking within the time </p>
<p>Time is in seconds</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsDirectFireActive"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsDirectFireActive( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if requested squad is in direct fire mode </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsDoingAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsDoingAbility( <span class="arg">SquadID</span> squad, <span class="arg">AbilityBlueprint</span> pbg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>True if squad is currently performing the given ability </p>
</td>
</tr>

<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsVehicle"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsVehicle( <span class="arg">SquadID</span> squad)
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>
True if squad has a vehicle EBP as one of their entities. <br>
<img src="efonly.png"></img> <span class="arg">This function is only available in CoH:EF</span>
</p>
</td>
</tr>

<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsHoldingAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsHoldingAny( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the squad has a hold on anything (use this on vehicles) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsInCover"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsInCover( <span class="arg">SquadID</span> squadId, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ALL or ANY troopers in a squad are in cover. </p>
<p>Set all to true to check if all troopers are in cover or set to false to check if any.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsInHoldEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsInHoldEntity( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the squad is garrisoned in entity (building) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsInHoldSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsInHoldSquad( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the squad is loaded in squad (vehicle </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsMoving"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsMoving( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether any entity in the squad is moving </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsPinned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsPinned( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>True if squad is currently pinned </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsReinforcing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsReinforcing( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad is currently reinforcing.  This function will return false if the squad does not have a reinforce ext. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsRetreating"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsRetreating( <span class="arg">SquadID</span> squadid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad is currently retreating </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsSuppressed"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsSuppressed( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>True if squad is currently suppressed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsUnderAttack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsUnderAttack( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if any unit in the squad is under attack within the time </p>
<p>Time is in seconds</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsUnderAttackByPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsUnderAttackByPlayer( <span class="arg">SquadID</span> squad, <span class="arg">PlayerID</span> pAttackerOwner, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if squad is under attack by enemy from a particular player </p>
<p>Time is in seconds</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsUnderAttackFromDirection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsUnderAttackFromDirection( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> offset, <span class="arg">Real</span> timeSeconds )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad was under attack from a certain direction (8 offset types, see LuaConsts.scar) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsUpgrading"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsUpgrading( <span class="arg">SquadID</span> squad, <span class="arg">UpgradeBlueprint</span> upgrade )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad is currently upgrading something specific. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsUpgradingAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsUpgradingAny( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad is currently upgrading anything. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_IsValid"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_IsValid( <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if a squad with the given ID can be found in the world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_Kill"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_Kill( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kill whole squad.  Sets health to 0, and triggers death effects. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_Merge"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_Merge( <span class="arg">SquadID</span> dest, <span class="arg">SquadID</span> source )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Merge source squad into destination squad. </p>
<p>The source squad will become invalid after the merge</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_RemoveUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_RemoveUpgrade( <span class="arg">SquadID</span> squad, <span class="arg">UpgradeBlueprint</span> upgrade )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes an upgrade from a squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_RewardActionPoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_RewardActionPoints( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> actionPoint )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Give squad action points </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetAttackPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetAttackPlan( <span class="arg">SquadID</span> squad, <span class="arg">String</span> planName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set overriding Squad AI attack plan  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetHealth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetHealth( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> healthPercent )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the health of all units in a squad.  Health must be in range [0.0, 1.0] </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetInvulnerable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetInvulnerable( <span class="arg">SquadID</span> squad, <span class="arg">Bool</span> enable, <span class="arg">Float</span> reset_time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set invulnerability on the squad. Reset time is in seconds. If it it set, the invulnerability will expire after this time. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetInvulnerableMinCap"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetInvulnerableMinCap( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> minHealthPercentage, <span class="arg">Real</span> resetTime )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Make a squad invulnerable to physical damage. </p>
<p>resetTime is the time in seconds that vulnerability will be restored.; zero time for reset time means the buff will last forever</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetMoodMode"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetMoodMode( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> mode )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set soldier mood mode. Can be MM_Auto, MM_ForceCalm and MM_ForceTense </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetMoveType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetMoveType( <span class="arg">SquadID</span> squad, <span class="arg">MoveTypeBlueprint</span> movetypePBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the squad's move type </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetPinnedPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetPinnedPlan( <span class="arg">SquadID</span> squad, <span class="arg">String</span> planName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set overriding Squad AI pinned plan </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetPlayerOwner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetPlayerOwner( <span class="arg">SquadID</span> squad, <span class="arg">PlayerID</span> owner )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Changes the owner of the given squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetPosition( <span class="arg">SquadID</span> squad, <span class="arg">Position</span> pos, <span class="arg">Position</span> toward )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Moves the squad to an arbitrary new position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetReactionPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetReactionPlan( <span class="arg">SquadID</span> squad, <span class="arg">String</span> planName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set overriding Squad AI reaction plan </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetRetaliationPlan"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetRetaliationPlan( <span class="arg">SquadID</span> squad, <span class="arg">String</span> planName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set overriding Squad AI idle retaliation plan </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetSharedProductionQueue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetSharedProductionQueue( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> shared )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables shared team production on a building (teammates can build using THEIR resources) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetSuppression"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetSuppression( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> percentage )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set current squad suppresion level. Suppression value value from 0 to 1 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetTeamWeaponCapturable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetTeamWeaponCapturable( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> capturable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set team weapon entity inside the squad to be capturable or not when it becomes neutral </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SetWorldOwned"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SetWorldOwned( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes a squad neutral </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_Spawn"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_Spawn( <span class="arg">SquadID</span> squad, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Spawn the entire squad at a given position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SpawnToward"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Squad_SpawnToward( <span class="arg">SquadID</span> squad, <span class="arg">Position</span> pos, <span class="arg">Position</span> toward )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Spawn the entire squad at a given position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_Split"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		Squad_Split( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> num )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Split the squad into 2. The new squad size is specified by the number passed in </p>
<p>The new squad size is specified by the number passed in.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_StopAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_StopAbility( <span class="arg">SquadID</span> squad, <span class="arg">AbilityBlueprint</span> ability, <span class="arg">Boolean</span> bEarlyExit )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Abruptly stops an active ability </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_SuggestPosture"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_SuggestPosture( <span class="arg">SquadID</span> squad, <span class="arg">unsigned</span> posture, <span class="arg">Real</span> duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Suggests a posture to a squad, lasting the passed duration </p>
<p>Posture of 0 is prone, 1 is kneel/crouch, and 2 is standing.  Duration is in seconds, negative means indefinate.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_WarpToPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Squad_WarpToPos( <span class="arg">SquadID</span> squad, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Warps a squad immediately to a new position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_State Machine"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>State Machine</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="StateMachine_AddTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">StateMachineId</span> 
		StateMachine_AddTable( <span class="arg">Table</span> states )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a table of states to the state machine table, and returns the state machine ID. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="StateMachine_GetLastState"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String/Real</span> 
		StateMachine_GetLastState( <span class="arg">StateMachineId</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the last state that ran on the state machine.  Can be checked while the current state is being executed. </p>
<p>Type of return value depends on type of data being used to represent current state (recommended data type is string or Real)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="StateMachine_GetState"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		StateMachine_GetState( <span class="arg">StateMachineId</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the current state that the state machine is executing </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="StateMachine_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		StateMachine_RemoveAll( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all currently running state machines. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="StateMachine_RemoveTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		StateMachine_RemoveTable( <span class="arg">StateMachineId</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a set of states from the State Machine Manager. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Stats"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Stats</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Stats_BuildingsLost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_BuildingsLost( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many buildings a player has lost </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_EntitiesKilled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_EntitiesKilled( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many entities a player has killed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_InfantryLost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_InfantryLost( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many infantry a player has lost </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_KillsTotal"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_KillsTotal( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a player's total kills </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_PlayerAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_PlayerAt( <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns player id at given index </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_PlayerCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_PlayerCount( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many players in the game </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_ResGathered"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ResourceAmount</span> 
		Stats_ResGathered( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many resources a player has gathered </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_ResSpent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ResourceAmount</span> 
		Stats_ResSpent( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many resources a player has spent </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_SoldiersKilled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_SoldiersKilled( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many soldiers a player has killed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_StructuresKilled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_StructuresKilled( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many structures a player has killed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_TeamTally"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_TeamTally( <span class="arg">Real</span> teamindex, <span class="arg">Function</span> statfunction )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Takes a statistic function and totals up the results for all the players on a given team </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_TotalDuration"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_TotalDuration( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns game time, in seconds </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_TotalSquadsLost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_TotalSquadsLost( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many squads a playe has lost </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_UnitSoldierKills"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_UnitSoldierKills( <span class="arg">PlayerID</span> player, <span class="arg">SquadBlueprint</span> sbp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many soldiers an SBP have killed. ex: how many soldiers did player2's riflemen kill? </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_UnitStructureKills"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_UnitStructureKills( <span class="arg">PlayerID</span> player, <span class="arg">SquadBlueprint</span> sbp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many structures an SBP have killed. ex: how many structures did player2's riflemen kill? </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_UnitTotalKills"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_UnitTotalKills( <span class="arg">PlayerID</span> player, <span class="arg">SquadBlueprint</span> sbp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many entities an SBP have killed. ex: how many entities did player2's riflemen kill? </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_UnitVehicleKills"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_UnitVehicleKills( <span class="arg">PlayerID</span> player, <span class="arg">SquadBlueprint</span> sbp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many vehicles an SBP have killed. ex: how many vehicles did player2's riflemen kill? </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_VehiclesKilled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_VehiclesKilled( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many vehicles a playe has killed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stats_VehiclesLost"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Stats_VehiclesLost( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how many vehicles a player has lost </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Stinger"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Stinger</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Stinger_AddEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Stinger_AddEvent( <span class="arg">PlayerID</span> player, <span class="arg">MarkerID</span> marker, <span class="arg">EVENT</span> eventname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a stinger to trigger at a specific location </p>
<p>You must remember to set Stinger_Manager going as a rule with a regular interval</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stinger_AddFunction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Stinger_AddFunction( <span class="arg">PlayerID</span> player, <span class="arg">MarkerID</span> marker, <span class="arg">LuaFunction</span> functionname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a stinger to trigger at a specific location </p>
<p>You must remember to set Stinger_Manager going as a rule with a regular interval</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Stinger_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Stinger_Remove( <span class="arg">PlayerID</span> player, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove all stingers triggered from a specific location </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Tanks"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Tanks</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="TankCombat_AddGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		TankCombat_AddGroup( <span class="arg">LuaTable</span> SGroups, <span class="arg">SGroup/EGroup/Position/Marker</span> AttackTarget, <span class="arg">[Position</span> Retreat, <span class="arg">Real</span> RoleGroupId]) )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a group of sgroups (that should be vehicles), that will attempt to attack the designated object -- returns id of tank group </p>
<p>Optional RoleGroupID is the idea of group of roles that have already been defined that will be used instead of default roles.</p>
</td>
</tr>
</table>
</p><a name="TankCombat_AddRole"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_AddRole( <span class="arg">Real</span> RoleGroupID, <span class="arg">Real</span> OffsetDefault, <span class="arg">Real</span> OffsetDefense, <span class="arg">Real</span> OffsetRetreat, <span class="arg">Real</span> OffsetDistance, <span class="arg">Real</span> Role )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds an additional role to an already existing role group </p>
<p>the RoleGroupId is an id generated by TankCombat_CreateRoleGroup function. OffsetDefault defines the position of the tank in relation to the center tank during non-combative movement. OffsetDefense defines the position of the tank in relation to the chosen TARGET when any of the tanks are under attack. OffsetRetreat defines the position of the tank in relation to the center tank when the tanks are retreating. OffsetDistance defines the distance that the tank should be from the center tank for all offsets.</p>
</td>
</tr>
</table>
</p><a name="TankCombat_AddThreatArrows"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_AddThreatArrows( <span class="arg">Real</span> TankCombatId, <span class="arg">Table</span> Blueprints )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether a group of tanks is retreating. </p>
</td>
</tr>
</table>
</p><a name="TankCombat_CreateRoleGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		TankCombat_CreateRoleGroup(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a new Role Group which can be customized to determine the formation/position of the tanks in battle, and the number of tanks battling </p>
<p>see documentation for more information: Need HTML Link here</p>
</td>
</tr>
</table>
</p><a name="TankCombat_EnableFormUp"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_EnableFormUp( <span class="arg">Real</span> TankGroupId, <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables the ability for tanks within a group to occasionally ensure that they are in formation while moving. </p>
</td>
</tr>
</table>
</p><a name="TankCombat_EnableRetreat"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_EnableRetreat( <span class="arg">Real</span> TankGroupId, <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables the ability for the TankCombat manager to retreat its group </p>
</td>
</tr>
</table>
</p><a name="TankCombat_GetAttackTarget"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_GetAttackTarget( <span class="arg">Real</span> TankCombatId )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the attack target of an existing combat group. </p>
<p>the TankCombatId is the id of the group of tanks</p>
</td>
</tr>
</table>
</p><a name="TankCombat_GroupExists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		TankCombat_GroupExists( <span class="arg">Real</span> TankCombatId )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Determines whether or not a TankCombat Group still exists  </p>
<p>A TankCombat group is removed when it reaches its target.</p>
</td>
</tr>
</table>
</p><a name="TankCombat_IsRetreating"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		TankCombat_IsRetreating( <span class="arg">Real</span> TankCombatId )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether a group of tanks is retreating. </p>
</td>
</tr>
</table>
</p><a name="TankCombat_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_RemoveAll( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all groups from control of the Tank Combat Manager. </p>
</td>
</tr>
</table>
</p><a name="TankCombat_RemoveGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_RemoveGroup( <span class="arg">Real</span> TankCombatId )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a group from control of the Tank Combat Manager. </p>
</td>
</tr>
</table>
</p><a name="TankCombat_SetArrivalCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_SetArrivalCallback( <span class="arg">Real</span> TankCombatId, <span class="arg">Function</span> FuncationName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls the specified function when the tanks arrive at the location dictated by the AddGroup function </p>
</td>
</tr>
</table>
</p><a name="TankCombat_SetAttackTarget"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_SetAttackTarget( <span class="arg">Real</span> TankCombatId, <span class="arg">SGroup/EGroup/Marker/Position</span> AttackTarget )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the attack target of an existing combat group. </p>
<p>the TankCombatId is the id of the group of tanks, AttackTarget is the object that the Tanks will attack.</p>
</td>
</tr>
</table>
</p><a name="TankCombat_SetRetreatPercent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_SetRetreatPercent( <span class="arg">Real</span> TankGroupId, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the percent of health at which the group of tanks will retreat from battle </p>
<p>Percent value must be a number between 0.0 and 1.0</p>
</td>
</tr>
</table>
</p><a name="TankCombat_SetRetreatPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_SetRetreatPos( <span class="arg">Real</span> TankCombatId, <span class="arg">Position</span> Retreat )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the retreat position of an existing combat group. </p>
<p>the TankCombatId is the id of the group of tanks, Retreat is the position that the Tanks will retreat to.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TankCombat_SetThreats"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TankCombat_SetThreats( <span class="arg">LuaTable</span> SBPs/SBP )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the table of threats that the the Tank Combat Manager will use to determine which squads to attack while in combat </p>
<p>The table of threats should contain a list of SBPs from first to last in order of priority (i.e. first item is highest priority)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Timer"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Timer</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Timer_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_Add( <span class="arg">Real</span> timerID, <span class="arg">Real</span> period )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add the amount of time to the specified timer </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_Advance"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_Advance( <span class="arg">Real</span> timerID, <span class="arg">Real</span> period )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Advances the timer by the specified amount of time </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_Display"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_Display( <span class="arg">Real</span> timerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Display (in the console) the amount of time remaining in the specified timer. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_DisplayOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_DisplayOnScreen( <span class="arg">Real</span> timerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Displays a timer on the screen - You need to call this regularly (i.e. every second) to update the onscreen display. THIS IS A TEMPORARY FUNCTION - WELL GET PROPER UI SUPPORT LATER ON </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_End"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_End( <span class="arg">Real</span> timerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stop the specified timer. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Timer_Exists( <span class="arg">Real</span> timerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the timer with this ID exists </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_GetElapsed"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Timer_GetElapsed( <span class="arg">Real</span> timerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns how much time has elapsed since this timer has been started </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_GetMinutesAndSeconds"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_GetMinutesAndSeconds( <span class="arg">Luafunction</span> getTimeFunction, <span class="arg">Real</span> TimerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns TWO values: minutes and seconds. Provide it a function like Timer_GetRemaining or Timer_GetElapsed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_GetRemaining"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Timer_GetRemaining( <span class="arg">Real</span> timerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the remaining time for the specified timer. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_Pause"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_Pause( <span class="arg">Real</span> timerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Pause the specified timer. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_Resume"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_Resume( <span class="arg">Real</span> timerID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Resume the specified timer. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Timer_Start"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Timer_Start( <span class="arg">Real</span> timerID, <span class="arg">Real</span> period )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Start a timer with the specified id, taking the required period ( in seconds ) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_UI"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>UI</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Entity_GetKillCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Entity_GetKillCount( <span class="arg">EntityID</span> pEntity, <span class="arg">Real</span> killType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the unit kill count for entities. Possible kill types are VS_Infantry, VS_LightArmor, VS_HeavyArmor, VS_Building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Entity_OverrideCriticalDisplay"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Entity_OverrideCriticalDisplay( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> type, <span class="arg">Boolean</span> override, <span class="arg">Boolean</span> on )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Overrides whether to display a critical or not. types are: CT_VehicleFront, CT_VehicleBack, CT_VehicleLeft, CT_VehicleRight, CT_VehicleEngineGreen, CT_VehicleEngineYellow, CT_VehicleEngineRed, CT_VehiclePrimaryWeapon, CT_VehicleSecondaryWeapon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EventCue_Create"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">event cue ID</span> 
		EventCue_Create( <span class="arg">CueStyleID</span> style, <span class="arg">LocString</span> title, <span class="arg">LocString</span> description, <span class="arg">Marker/Pos/EGroup/SGroup</span> cameratarget[, <span class="arg">LocString</span> hintpointtext, <span class="arg">LuaFunction</span> function, <span class="arg">Float</span> lifetime, <span class="arg">Boolean</span> dismissOnClick] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates an Event Cue message which automatically sends the camera to a specified point when clicked on.  </p>
<p>Can optionally create a 5-second hintpoint at the location when clicked on, and/or call a specified function for you, too. Both of these only activate the first time you click on the event cue to avoid stacking.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FOW_Enable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FOW_Enable( <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables the FOW, including out of bound areas and all entities on the map </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_EndCurrentSpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_EndCurrentSpeech( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p><span class="arg"><span class="arg">DEPRECATED</span></span> </p>
<p>Use Subtitle_EndCurrentSpeech</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_GetCinematicAspectRatio"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Game_GetCinematicAspectRatio( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the aspect ratio used when in cinematic mode.  width / height </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_GetLocalPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		Game_GetLocalPlayer( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the local player. (should only be used for UI purpose) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_GetMode"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Game_GetMode( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns UIM_Normal, UIM_Fullscreen, or UIM_Cinematic </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_HasLocalPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Game_HasLocalPlayer( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Determine if there is a valid local player. (UI only -- nondeterminstic) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_IsLetterboxed"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Game_IsLetterboxed( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the ui is in letterbox mode </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_Letterbox"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_Letterbox( <span class="arg">Boolean</span> on, <span class="arg">Real</span> timeSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enters/Exits letterbox mode in amount of time specified by timeSecs. </p>
<p>Letterbox mode disables input</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_PlaySpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_PlaySpeech( <span class="arg">String</span> icon, <span class="arg">Real</span> locID, <span class="arg">Boolean</span> disableIconSubtitle, <span class="arg">Boolean</span> continueButton, <span class="arg">Boolean</span> lockCursorToContinueButton, <span class="arg">Boolean</span> stickySubtitle, <span class="arg">String</span> additionalPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p><span class="arg"><span class="arg">DEPRECATED</span></span> </p>
<p>Use Subtitle_PlaySpeech</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_PlaySquadSpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_PlaySquadSpeech( <span class="arg">SquadID</span> squad, <span class="arg">String</span> icon, <span class="arg">Real</span> locID, <span class="arg">Boolean</span> disableIconSubtitle, <span class="arg">Boolean</span> continueButton, <span class="arg">Boolean</span> lockCursorToContinueButton, <span class="arg">Boolean</span> stickySubtitle, <span class="arg">String</span> additionalPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p><span class="arg"><span class="arg">DEPRECATED</span></span> </p>
<p>Use Subtitle_PlaySquadSpeech</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_SetCinematicAspectRatio"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_SetCinematicAspectRatio( <span class="arg">Real</span> ratio )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the aspect ratio used when in cinematic mode.  Expects width / height. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_SetLocalPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_SetLocalPlayer( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the local player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_SetMode"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_SetMode( <span class="arg">Real</span> mode )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the game screen mode </p>
<p>UI_Normal is the regular screen with taskbar           UI_Fullscreen is the mode without any 2D UI			 UI_Cinematic is the same as letter box mode</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_SetSelectionAlphaScale"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_SetSelectionAlphaScale( <span class="arg">Real</span> alphaScale )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>A scale value for selection circle alpha </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_SkipAllEvents"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_SkipAllEvents( <span class="arg">Boolean</span> bDeleteQueued )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Skips all events. Can either delete or skip queued events. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_SkipEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_SkipEvent( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Skips the currently playing event (and stops current sound) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_SubTextFade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_SubTextFade( <span class="arg">LocString</span> location, <span class="arg">LocString</span> time, <span class="arg">LocString</span> detail, <span class="arg">Real</span> in, <span class="arg">Real</span> lifetime, <span class="arg">Real</span> out )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Fade in and out two or three lines of subtext. </p>
<p>This function has to support two lines, for backwards compatibility. The 'detail' line is therefore optional.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_SubTextFadeEx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_SubTextFadeEx( <span class="arg">Real</span> x, <span class="arg">Real</span> y, <span class="arg">LocString</span> text, <span class="arg">Real</span> in, <span class="arg">Real</span> lifetime, <span class="arg">Real</span> out, <span class="arg">LuaBinding::StackVarTable</span> textParams )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Shows a line of text on screen with specific text parameters </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_UnlockInputOnLetterBox"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_UnlockInputOnLetterBox( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Unlocks user/camera input during letterbox. This should be used for debug only </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Ghost_DisableSpotting"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Ghost_DisableSpotting( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Disable the spotting of enemy entities that may become ghosts in the FoW </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Ghost_EnableSpotting"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Ghost_EnableSpotting( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enable the spotting of enemy entities that may become ghosts in the FoW </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintMouseover_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		HintMouseover_Add( <span class="arg">LocString</span> hintText, <span class="arg">Marker/Position/Egroup/Sgroup</span> hintTarget, <span class="arg">Real</span> targetRadius, <span class="arg">Boolean</span> looping )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a Hint Point that will only appear on Mouseover of the target. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintMouseover_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		HintMouseover_Remove( <span class="arg">LocString</span> hintText, <span class="arg">Marker/Egroup/Sgroup</span> hintTarget )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a Mouseover Hint Point from the managing function. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">HintPointID</span> 
		HintPoint_Add( <span class="arg">StackVar</span> where, <span class="arg">Boolean</span> bVisible, <span class="arg">LocString</span> hintText[, <span class="arg">number</span> height] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a hintpoint attached to a Marker, EGroup, SGroup or position </p>
<p>If range is set to 0, then the hintpoint is rangeless, see the design document for rangeless features.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToAbilityButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToAbilityButton( <span class="arg">AbilityBlueprint</span> ability, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to an ability button </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToCommandButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToCommandButton( <span class="arg">Real</span> command, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to a command button </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToCommanderBranchUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToCommanderBranchUpgrade( <span class="arg">UpgradeBlueprint</span> pbg, <span class="arg">LocString</span> hint )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a hintpoint to an upgrade on the company commander branch </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToCommanderTreeUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToCommanderTreeUpgrade( <span class="arg">UpgradeBlueprint</span> pbg, <span class="arg">LocString</span> hint )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a hintpoint to an upgrade on the company commander branch </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToConstructionButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToConstructionButton( <span class="arg">EntityBlueprint</span> ebp, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to a construction button </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToConstructionMenu"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToConstructionMenu( <span class="arg">String</span> menuName, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to a construction menu </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToEventCue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToEventCue( <span class="arg">Real</span> eventCueID, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a hintpoint to an event cue that was created from SCAR </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToObjectiveIcon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToObjectiveIcon( <span class="arg">Real</span> objectiveID, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to an objective icon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToProductionButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToProductionButton( <span class="arg">Real</span> type, <span class="arg">Blueprint</span> pbg, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to a production button </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToProductionQueueItem"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToProductionQueueItem( <span class="arg">Real</span> index, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to an item in the production queue </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToSquadBadge"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToSquadBadge( <span class="arg">SquadID</span> squad, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to a squad's badge in the selection area, using the squad as the lookup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToSquadBadgeByIndex"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToSquadBadgeByIndex( <span class="arg">Real</span> displayIndex, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to a squad's badge in the selection area, using the display index (from 0 to 9) as the lookup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToSquadControlGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToSquadControlGroup( <span class="arg">Real</span> controlGroupIndex, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to a squad control group (hotkey) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToTacticalMap"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToTacticalMap( <span class="arg">Position</span> position, <span class="arg">LocString</span> hint )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a hintpoint to the tactical map, in world coordinates. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_AddToTaskbarBinding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		HintPoint_AddToTaskbarBinding( <span class="arg">String</span> bindingName, <span class="arg">LocString</span> hint, <span class="arg">Boolean</span> removeOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a taskbar hintpoint to any binding, provided its name </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		HintPoint_Remove( <span class="arg">Real</span> HintPointID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a hintpoint. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_RemoveAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		HintPoint_RemoveAll( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all hintpoints. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_SetDisplayOffset"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		HintPoint_SetDisplayOffset( <span class="arg">Real</span> hintpointID, <span class="arg">Real</span> x, <span class="arg">Real</span> y[, <span class="arg">Real</span> z] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a hintpoint's display offset, which is 3D for world hintpoints and 2D for taskbar binding hintpoints (ignore z) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="HintPoint_SetVisible"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		HintPoint_SetVisible( <span class="arg">Real</span> HintPointID, <span class="arg">Boolean</span> bVisible )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a hintpoint's visibility. Currently, FOW is not accounted for. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_AreDefaultCommandsEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_AreDefaultCommandsEnabled( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the enabled/disabled state of the right-click command input. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_DoWeaponHitEffectOnEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_DoWeaponHitEffectOnEntity( <span class="arg">EntityID</span> entity, <span class="arg">Position</span> pos, <span class="arg">WeaponBlueprint</span> weaponPBG, <span class="arg">Boolean</span> penetrated )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Do weapon hit effect on the entity from the view camera origin </p>
<p>WeaponID is the property bag group id; if penetrated is set to false, deflection effect would be played instead</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_DoWeaponHitEffectOnPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_DoWeaponHitEffectOnPosition( <span class="arg">Position</span> pos, <span class="arg">WeaponBlueprint</span> weaponPBG, <span class="arg">Boolean</span> penetrated )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Do weapon hit effect on the ground </p>
<p>WeaponID is the property bag group id; if penetrated is set to false, deflection effect would be played instead</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetAllPlayerEntitiesOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_GetAllPlayerEntitiesOnScreen( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the list of all entities that's not part of a squad from the player on the screen </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetAllPlayerSquadsOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_GetAllPlayerSquadsOnScreen( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the list of all squads from the player on screen </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetControlGroupContents"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_GetControlGroupContents( <span class="arg">Real</span> groupIndex, <span class="arg">SGroupID</span> squads, <span class="arg">EGroupID</span> nonSquadEntities )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns contents of a control group (0 to 9). Squads are put into an sgroup, and non-squad entities are put into an egroup. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetEntityControlGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Misc_GetEntityControlGroup( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the control group index that this entity belongs to, from 0 to 9, or -1 if none </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetHiddenPositionOnPath"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Misc_GetHiddenPositionOnPath( <span class="arg">Real</span> checkType, <span class="arg">Position</span> origin, <span class="arg">Position</span> dest, <span class="arg">EntityBlueprint</span> ebp, <span class="arg">Real</span> stepDistance, <span class="arg">Real</span> cameraPadding, <span class="arg">PlayerID</span> FOWPlayer, <span class="arg">Boolean</span> debugDisplay )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a hidden position on path from origin to destination. If there's none, it returns the origin position </p>
<p> Possible check types are CheckHiddenFromCamera, CheckHiddenInFOW and CheckHiddenBothCameraFOW Camera check determined by the camera frustum. use cameraPadding to increase the area around the camera when doing the check FOW check requires a valid player ID passed in stepDistance is the interval along the path that the hidden points will be checked ( min is 1 metre ) If no hidden position is found, position ( 0, 0, 0 ) is returned Don't use this for multi-player SCAR script!!</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetMouseOnTerrain"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Misc_GetMouseOnTerrain( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the world position of the mouse on the terrain </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetMouseOverEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		Misc_GetMouseOverEntity( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the entity under the mouse (if any) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetSelectedEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_GetSelectedEntities( <span class="arg">EGroupID</span> group, <span class="arg">Boolean</span> subSelection )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears a given egroup and adds the current selection to the group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetSelectedSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_GetSelectedSquads( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> subSelection )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears a given sgroup and adds the current selection to the group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetSquadControlGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Misc_GetSquadControlGroup( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the control group index that this squad belongs to, from 0 to 9, or -1 if none </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetTerrainHeight"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Misc_GetTerrainHeight( <span class="arg">Position</span> p )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the terrain height at the top-down co-ordinate specified (for terrain entities can walk on only) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsEGroupSelected"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsEGroupSelected( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of the EGroup is selected </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsEntityOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsEntityOnScreen( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> pct )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the entity is on screen currently </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsEntitySelected"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsEntitySelected( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if an entity is currently selected </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsMouseOverEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsMouseOverEntity( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the mouse is over an entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsSelectionInputEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsSelectionInputEnabled( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the enabled/disabled state of the selection input. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsSGroupSelected"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsSGroupSelected( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if ANY or ALL of the SGroup is selected </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsSquadOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsSquadOnScreen( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> pct )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if the squad is on screen currently </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsSquadSelected"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsSquadSelected( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a squad is currently selected </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_RemoveCommandRestriction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_RemoveCommandRestriction( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Can issue commands anywhere </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_RestrictCommandsToMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_RestrictCommandsToMarker( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Can only issue commands inside this marker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_SelectEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_SelectEntity( <span class="arg">EntityID</span> pEntity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Select the entity as if you had clicked it. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_SelectSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_SelectSquad( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> bSelected )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add or remove squad members from the current selection </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_SetDefaultCommandsEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_SetDefaultCommandsEnabled( <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables / Disables right-click command input. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_SetEntityControlGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_SetEntityControlGroup( <span class="arg">EntityID</span> entity, <span class="arg">Real</span> groupIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes a squad belong to a specific control group. If it already belongs to another control group, it's removed from that one before being added to the new one. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_SetSelectionInputEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_SetSelectionInputEnabled( <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables / Disables selection input. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_SetSquadControlGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_SetSquadControlGroup( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> groupIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes a squad belong to a specific control group. If it already belongs to another control group, it's removed from that one before being added to the new one. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_ToggleEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_ToggleEntities( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Hide all world entities for NIS performance debugging </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="NIS_PlaySpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		NIS_PlaySpeech( <span class="arg">Real</span> locID, <span class="arg">Real</span> speechTime )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays subtitle during NISes. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SitRep_PlaySpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SitRep_PlaySpeech( <span class="arg">String</span> icon, <span class="arg">Real</span> locID, <span class="arg">Boolean</span> disableIconSubtitle, <span class="arg">Boolean</span> continueButton, <span class="arg">Boolean</span> blockInput, <span class="arg">Boolean</span> stickySubtitle, <span class="arg">String</span> additionalPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays a global speech with subtitle and actor icon in the overlay </p>
<p>please make sure that the the speech file is 2D</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Squad_GetKillCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Squad_GetKillCount( <span class="arg">SquadID</span> pSquad, <span class="arg">Real</span> killType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the unit kill count for squads. Possible kill types are VS_Infantry, VS_LightArmor, VS_HeavyArmor, VS_Building </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Subtitle_EndCurrentSpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Subtitle_EndCurrentSpeech( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Prematurely finish currently playing speech and advance the next one in queue </p>
<p>This is useful for skipping speech events</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Subtitle_PlaySpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Subtitle_PlaySpeech( <span class="arg">String</span> icon, <span class="arg">Real</span> locID, <span class="arg">Boolean</span> disableIconSubtitle, <span class="arg">Boolean</span> continueButton, <span class="arg">Boolean</span> blockInput, <span class="arg">Boolean</span> stickySubtitle, <span class="arg">String</span> additionalPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays a global speech with subtitle and actor icon in the overlay </p>
<p>please make sure that the the speech file is 2D</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Subtitle_PlaySpeechAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Subtitle_PlaySpeechAt( <span class="arg">Real</span> locID, <span class="arg">Real</span> x, <span class="arg">Real</span> y, <span class="arg">Boolean</span> stickySubtitle, <span class="arg">String</span> additionalPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays a subtitle at a position on screen. </p>
<p>please make sure that the the speech file is 2D</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Subtitle_PlaySquadSpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Subtitle_PlaySquadSpeech( <span class="arg">SquadID</span> squad, <span class="arg">String</span> icon, <span class="arg">Real</span> locID, <span class="arg">Boolean</span> disableIconSubtitle, <span class="arg">Boolean</span> continueButton, <span class="arg">Boolean</span> blockInput, <span class="arg">Boolean</span> stickySubtitle, <span class="arg">String</span> additionalPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays 3D speech on one of guys in the squad with subtitle and actor icon in the overlay </p>
<p>please make sure that the the speech file is 3D. Playing 2D sample will not work.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Subtitle_UnstickCurrentSpeech"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Subtitle_UnstickCurrentSpeech( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes "sticky" state from currently playing speech (if any) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TacticalMap_AddArrow"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		TacticalMap_AddArrow( <span class="arg">Real</span> objectiveID, <span class="arg">Real</span> fnType, <span class="arg">Position</span> from, <span class="arg">Position</span> to )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add arrpw display to tactical map at specific vector. fnType are FN_OnShow, FN_OnSelect and FN_OnActivate </p>
<p>This function should not be used inside a SitRep event!</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TacticalMap_AddMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		TacticalMap_AddMessage( <span class="arg">Real</span> objectiveID, <span class="arg">Real</span> fnType, <span class="arg">Position</span> pos, <span class="arg">LocString</span> message )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add message display to tactical map at specific location. fnType are FN_OnShow, FN_OnSelect and FN_OnActivate </p>
<p>This function should not be used inside a SitRep event! Use SitRep_AddMessage instead</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TacticalMap_AddPing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">blipID</span> 
		TacticalMap_AddPing( <span class="arg">StackVar</span> where, <span class="arg">Real</span> lifetime, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add pings to tactical map. </p>
<p>Be careful to remove your ping if needed! The following blipTypes are available: BT_GeneralPing, BT_CombatPing, BT_FuelPing BT_MunitionsPing, BT_SelectionPing, BT_BuildingBoomPing, BT_AbilityPing, BT_ObjectivePrimary, BT_ObjectiveSecondary, BT_ObjectiveMedal, BT_AttackHerePing,  BT_DefendHerePing, BT_CaptureHerePing,</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TacticalMap_AddPointer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		TacticalMap_AddPointer( <span class="arg">Real</span> objectiveID, <span class="arg">Real</span> fnType, <span class="arg">Position</span> to )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add pointer to tactical map </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TacticalMap_FlashTerritory"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TacticalMap_FlashTerritory( <span class="arg">Real</span> sectorID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Makes a territory flash (overrides any other flashing behavior) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TacticalMap_RemoveElement"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TacticalMap_RemoveElement( <span class="arg">Real</span> elementID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a tactical map element (created via the TacticalMap_Addxxx functions) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TacticalMap_StopFlashingTerritory"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TacticalMap_StopFlashingTerritory( <span class="arg">Real</span> sectorID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a territory to default flashing behavior </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Taskbar_IsVisible"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Taskbar_IsVisible( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the taskbar is visible </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Taskbar_SetVisibility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Taskbar_SetVisibility( <span class="arg">Boolean</span> visible )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>sets taskbar visibility! </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ThreatArrow_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ThreatArrow_Add( <span class="arg">Real</span> GroupID, <span class="arg">entity/squad/egroup/sgroup/position/marker</span> Threat[, <span class="arg">String</span> icon] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Adds a threat to an existing group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ThreatArrow_CreateGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real (ID)</span> 
		ThreatArrow_CreateGroup( <span class="arg">variable!argument!list:</span> threats )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a group of threats that are represented by a single arrow. Threats can be entities, squads, egroups, sgroups, positions or markers </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ThreatArrow_DestroyAllGroups"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ThreatArrow_DestroyAllGroups( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Destroy all threat groups </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ThreatArrow_DestroyGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ThreatArrow_DestroyGroup( <span class="arg">Real</span> GroupID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Destroy a threat group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ThreatArrow_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		ThreatArrow_Remove( <span class="arg">Real</span> GroupID, <span class="arg">entity/squad/egroup/sgroup/position/marker</span> Threat )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a threat from an existing group </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_AddHintAndFlashAbility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_AddHintAndFlashAbility( <span class="arg">PlayerID</span> playerid, <span class="arg">AbilityID</span> abilityID, <span class="arg">LocString</span> text, <span class="arg">Real</span> length, <span class="arg">[Table/Blueprint</span> blueprint_filter] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates and flashes an ability button on the taskbar if the unit is selected </p>
<p>Length parameter determines how long to flash the item, and the blueprint filter is used if 		certain squad types need to be selected before flashing the button.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_AlwaysFlashCompanyCommanderButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_AlwaysFlashCompanyCommanderButton( <span class="arg">Boolean</span> alwaysFlash, <span class="arg">Boolean</span> stopWhenClicked )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>If set to true, the button always flashes. If set to false, the default flashing behavior resumes. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_BindingSetEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_BindingSetEnabled( <span class="arg">String</span> binding, <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables a named segment of the taskbar. </p>
<p>The binding name is a string set in taskbar.lua.  If enabled is false, then          the UI is not validated/or updated and should not appear onscreen.  It can          be turned back on if enabled is true.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ClearBuildingPlacementCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ClearBuildingPlacementCallback( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears the building placement callback. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ClearConstructionMenuCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ClearConstructionMenuCallback( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears the construction menu navigation callback. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ClearEventCues"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ClearEventCues( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears all active event cues </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ClearModalAbilityPhaseCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ClearModalAbilityPhaseCallback( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears the ability phase callback </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ClearOptionOverride"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ClearOptionOverride( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears the override on an option. See LuaConsts.scar for list of available options. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ClearSubmenuNavigationCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ClearSubmenuNavigationCallback( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears the submenu navigation callback. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CoverPreviewHide"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CoverPreviewHide( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Toggle off cover preview. Each call to UI_CoverPreviewHide must be matched by a call to UI_CoverPreviewShow </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CoverPreviewShow"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CoverPreviewShow( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Toggle on cover preview. Each call to UI_CoverPreviewShow must be matched by a call to UI_CoverPreviewHide </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateColouredEntityKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CreateColouredEntityKickerMessage( <span class="arg">PlayerID</span> player, <span class="arg">EntityID</span> entity, <span class="arg">LocString</span> message, <span class="arg">Real</span> red, <span class="arg">Real</span> green, <span class="arg">Real</span> blue, <span class="arg">Real</span> alpha )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a Coloured custom kicker message on the entity and display to the player, rgb values are 0-255 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateColouredPositionKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CreateColouredPositionKickerMessage( <span class="arg">PlayerID</span> player, <span class="arg">Position</span> position, <span class="arg">LocString</span> message, <span class="arg">Real</span> red, <span class="arg">Real</span> green, <span class="arg">Real</span> blue, <span class="arg">Real</span> alpha )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a custom coloured kicker message on position and display to the player, rgb values are 0-255 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateColouredSquadKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CreateColouredSquadKickerMessage( <span class="arg">PlayerID</span> player, <span class="arg">SquadID</span> squad, <span class="arg">LocString</span> message, <span class="arg">Real</span> red, <span class="arg">Real</span> green, <span class="arg">Real</span> blue, <span class="arg">Real</span> alpha )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a coloured custom kicker message on the squad and display to the player, rgb values are 0-255 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateEntityKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CreateEntityKickerMessage( <span class="arg">PlayerID</span> player, <span class="arg">EntityID</span> entity, <span class="arg">LocString</span> message )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a custom kicker message on the entity and display to the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateEventCue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ID</span> 
		UI_CreateEventCue( <span class="arg">String</span> iconPath, <span class="arg">String</span> soundPath, <span class="arg">LocString</span> title, <span class="arg">LocString</span> description[, <span class="arg">Float</span> lifetime, <span class="arg">Boolean</span> dismissOnClick] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates an event cue without a callback (you won't know when it's clicked) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateEventCueClickable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_CreateEventCueClickable( <span class="arg">String</span> iconPath, <span class="arg">String</span> soundPath, <span class="arg">LocString</span> title, <span class="arg">LocString</span> description, <span class="arg">LuaFunction</span> f, <span class="arg">Real</span> lifetime, <span class="arg">Boolean</span> dismissOnClick )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a event cue with custom lua callback function when icon is clicked. Lifetime of -1 means use the default. The return value is an event cue ID. The callback receives one parameter: the ID of the event cue that was clicked. </p>
<p>the lua function is executed when the event cue icon is pressed          example: UI_CreateEventCueClickable( "event_cue_icons/icon_player_attacked", "General_alert", 42761, 42762, prt, -1 )</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateMinimapBlip"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">blipID</span> 
		UI_CreateMinimapBlip( <span class="arg">StackVar</span> where, <span class="arg">Real</span> lifetime, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a blip on the minimap; return the ID of the blip. </p>
<p>'where' can be an entity, marker, position, egroup, sgroup, or squad. The following blipTypes are available: BT_GeneralPing, BT_CombatPing, BT_FuelPing BT_MunitionsPing, BT_SelectionPing, BT_BuildingBoomPing, BT_AbilityPing, BT_ObjectivePrimary, BT_ObjectiveSecondary, BT_ObjectiveMedal, BT_AttackHerePing,  BT_DefendHerePing, BT_CaptureHerePing,</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreatePositionKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CreatePositionKickerMessage( <span class="arg">PlayerID</span> player, <span class="arg">Position</span> position, <span class="arg">LocString</span> message )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a custom kicker message on position and display to the player using default colour </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateSGroupKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CreateSGroupKickerMessage( <span class="arg">PlayerID</span> player, <span class="arg">SGroup</span> sgroup, <span class="arg">LocString</span> message )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a custom kicker message on the squad and display to the player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_CreateSquadKickerMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_CreateSquadKickerMessage( <span class="arg">PlayerID</span> player, <span class="arg">SquadID</span> squad, <span class="arg">LocString</span> message )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create a custom kicker message on the squad and display to the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_DeleteMinimapBlip"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_DeleteMinimapBlip( <span class="arg">Real</span> blipID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a blip already created on the minimap </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_DisplayCommanderTreeSelect"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_DisplayCommanderTreeSelect( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>ForceDisplayCommandScreenSelect, if player hasn't already selected a commander tree </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_EnableEntityMinimapIndicator"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_EnableEntityMinimapIndicator( <span class="arg">EntityID</span> entity, <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Turn on or off entity minimap indicator. The default is enabled </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_EnableEventCueType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_EnableEventCueType( <span class="arg">Real</span> gameEventType, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enable or disable event cues of a game event type to be displayed in the UI </p>
<p>Some examples of game event types are GE_ConstructionComplete, GE_BuildItemComplete, etc</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_EnableResourceTypeKicker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_EnableResourceTypeKicker( <span class="arg">Real</span> resourceType, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables resource kickers. Possible resource types are RT_Manpower, RT_Fuel, RT_Munition, RT_Action, RT_Command. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_EnableSquadDecorator"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_EnableSquadDecorator( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Turn on or off squad decorator. The default is decorator enabled </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_EnableSquadMinimapIndicator"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_EnableSquadMinimapIndicator( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Turn on or off squad minimap indicator. The default is enabled </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashAbilityButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashAbilityButton( <span class="arg">AbilityBlueprint</span> ability, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Begins flashing an ability widget. </p>
<p>Flashes a taskbar binding associated with a specific ability ID.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashBinding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashBinding( <span class="arg">String</span> name, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Begins flashing of a binding widget. </p>
<p>Flashes a taskbar binding with the given name.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashCommandButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashCommandButton( <span class="arg">Real</span> command, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes a command button associated with a particular squad command </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashCommanderBranchUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashCommanderBranchUpgrade( <span class="arg">UpgradeBlueprint</span> pbg, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes one of the 6 upgrades on the commander branch </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashCommanderTreeUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashCommanderTreeUpgrade( <span class="arg">UpgradeBlueprint</span> pbg, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes one of the 3 upgrades on the main commander tree </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashConstructionButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashConstructionButton( <span class="arg">EntityBlueprint</span> ebp, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes a construction button associated to a building EBP. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashConstructionMenu"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashConstructionMenu( <span class="arg">String</span> menuName, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes a construction menu. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_FlashEntity( <span class="arg">EntityID</span> entity, <span class="arg">String</span> actionOnName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes the entity using attributes from [tuning][ui] </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashEventCue"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashEventCue( <span class="arg">Real</span> eventCueID, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes an event cue icon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashHeroButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashHeroButton( <span class="arg">Real</span> heroID, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Begins flashing a the actual hero button inside of the hero menu </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashHeroMenuButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashHeroMenuButton( <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Begins flashing a the hero menu button inside of the building that can build it </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashObjectiveCounter"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashObjectiveCounter( <span class="arg">Real</span> objectiveID, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes an objective counter </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashObjectiveIcon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashObjectiveIcon( <span class="arg">Real</span> objectiveID, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes an objective icon </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashProductionButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashProductionButton( <span class="arg">Real</span> pType, <span class="arg">Blueprint</span> pbg, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Begins flashing a production widget. </p>
<p>Flashes a taskbar binding associated with a production type and PBG id. Use PGB id of -1 if you only care about the production type. Type may be one of PITEM_Spawn, PITEM_SquadUpgrade, PITEM_Reinforce</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashProductionQueueIcon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashProductionQueueIcon( <span class="arg">Real</span> index, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes a production queue item, from 0 to n. Be careful - the icon will continue to flash regardless of what's in that slot... </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashSquadBadge"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashSquadBadge( <span class="arg">SquadID</span> squad, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes a squad's badge in the selection area, using the squad as the lookup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashSquadBadgeByIndex"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashSquadBadgeByIndex( <span class="arg">Real</span> displayIndex, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes a squad's badge in the selection area, using the display index (from 0 to 9) as the lookup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashSquadControlGroupIcon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashSquadControlGroupIcon( <span class="arg">Real</span> controlGroupIndex, <span class="arg">Boolean</span> bStopOnClick, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes a squad control group icon. You can use Misc_GetSquadControlGroup to find out which group to flash. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_FlashTacticalMapWidget"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_FlashTacticalMapWidget( <span class="arg">String</span> widgetName, <span class="arg">Real</span> blipType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Flashes a widget on the tactical map </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ForceCommanderTreeChoice"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ForceCommanderTreeChoice( <span class="arg">PlayerID</span> player, <span class="arg">UpgradeBlueprint</span> upg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Picks a commander tree for the player. If he already picked one, does nothing. upg is the upgrade that unlocks the tree. requires tree is available in AE and upgrade is available </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_GetDecoratorsEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		UI_GetDecoratorsEnabled( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether all decorators are enabled or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_HasSelectedCommanderTree"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		UI_HasSelectedCommanderTree( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>returns true if player has selected a commander tree </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_HideSquadControlGroupBindings"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_HideSquadControlGroupBindings( <span class="arg">Boolean</span> hide )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Hides/unhides the squad control group UI on the right side of the screen </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_HideTacticalMap"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_HideTacticalMap( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Hides the tactical map </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_HideTeamWeaponConeOfFire"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_HideTeamWeaponConeOfFire( <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a team weapon "cone of fire" UI. You got the ID from UI_ShowTeamWeaponConeOfFire </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_HighlightSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_HighlightSGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Highlights an SGroup in the UI for the given duration </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_HighlightSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_HighlightSquad( <span class="arg">SquadID</span> squad, <span class="arg">Real</span> duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Turn on squad highlight UI feature for the duration </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_IsCommanderTreeBranchShown"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		UI_IsCommanderTreeBranchShown( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether a branch of the commander tree is up (once you've already selected an upgrade path) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_IsCommanderTreeShown"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		UI_IsCommanderTreeShown( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the main commander tree is up (where you select your upgrade path) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_IsTacticalMapShown"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		UI_IsTacticalMapShown( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the tactical map is being shown </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_MessageBoxHide"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_MessageBoxHide( <span class="arg">Real</span> btn )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>If the message box is activated, close it.  The callback will receive the button parameter given. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_MessageBoxSetButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_MessageBoxSetButton( <span class="arg">Real</span> btn, <span class="arg">LocString</span> text, <span class="arg">LocString</span> tooltip, <span class="arg">Boolean</span> bEnabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the text/tooltip/enabled state of a button on the dialog. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_MessageBoxSetText"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_MessageBoxSetText( <span class="arg">LocString</span> title, <span class="arg">LocString</span> msg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the title and message body of the dialog. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_MessageBoxShow"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_MessageBoxShow( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Show the message box.  The callback will be called when deactivated, with the button that was pressed. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_RestrictBuildingPlacement"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_RestrictBuildingPlacement( <span class="arg">MarkerID</span> mkr )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Only allow buildings to be placed inside a marker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ScreenFade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ScreenFade( <span class="arg">Real</span> r, <span class="arg">Real</span> g, <span class="arg">Real</span> b, <span class="arg">Real</span> a, <span class="arg">Real</span> duration, <span class="arg">Boolean</span> bKeepBlockingInput )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Fades the screen to a given RGBA colour over a number of seconds. mouse input is blocked during the fade, and you can control whether the input keeps being blocked after the fade has ended (be careful!) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetAlliedBandBoxSelection"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetAlliedBandBoxSelection( <span class="arg">Boolean</span> allow )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the game to allow allied squads to be selected at the same time as your own squads </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetBuildingPlacementCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetBuildingPlacementCallback( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a function to be called when the player clicks a building on the taskbar and gets a selection UI. Your function will have 2 arguments: [Blueprint] building blueprint, [Real] phase: CP_Selected, CP_StartedPlacing (only applicable to fields, fences and buildings that let you set facing), or CP_FinishedPlacing  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetConstructionMenuCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetConstructionMenuCallback( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a function to be called when the player clicks a construction menu on the taskbar. Your function will have 2 arguments: [String] menu name, [Boolean] whether this menu is being activated (true) or deactivated (false) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetDecoratorsEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetDecoratorsEnabled( <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables all decorators </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetDisplayIngameScore"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetDisplayIngameScore( <span class="arg">Boolean</span> single, <span class="arg">Boolean</span> dual )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>enables/disables single ingame score system </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetModalAbilityPhaseCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetModalAbilityPhaseCallback( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a function to be called when the player clicks an ability and gets a targetting UI. Your function will have 2 arguments: [Blueprint] ability blueprint, [Real] phase: MAP_Placing, MAP_Facing (only if ability requires facing) or MAP_Confirmed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetOptionOverride"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetOptionOverride( <span class="arg">String</span> name, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Overrides an option. See LuaConsts.scar for list of available options. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetScoreLeft"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetScoreLeft( <span class="arg">LocString</span> title, <span class="arg">LocString</span> score )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>sets dual score left value </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetScoreRight"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetScoreRight( <span class="arg">LocString</span> title, <span class="arg">LocString</span> score )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>sets dual score right value </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetScoreSingle"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetScoreSingle( <span class="arg">LocString</span> title, <span class="arg">LocString</span> score )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>sets single score value </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetSGroupSpecialLevel"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetSGroupSpecialLevel( <span class="arg">SGroup</span> sgroup, <span class="arg">Int</span> level )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a level decorator that's defined in all of the squads squad_ui_ext in the target SGroup </p>
<p>if level value is -1 it will hide the special decorator, if no level is defined -1 is default</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetSquadSpecialLevel"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetSquadSpecialLevel( <span class="arg">Squad</span> *squad, <span class="arg">Real</span> level )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets Squads special level on thier decorator </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetSubmenuNavigationCallback"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetSubmenuNavigationCallback( <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a function to be called when the player clicks a submenu on the taskbar. Your function will have 2 arguments: [String] menu name, [Boolean] whether this menu is being activated (true) or deactivated (false) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SetSubtitleBackgroundAlpha"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SetSubtitleBackgroundAlpha( <span class="arg">Real</span> alpha )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the alpha value of the subtitle background. Value from 0 to 1 </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ShowMinimapBlip"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ShowMinimapBlip( <span class="arg">Boolean</span> show )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p> </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ShowTacticalMap"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ShowTacticalMap( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Shows the tactical map </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ShowTeamWeaponConeOfFire"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		UI_ShowTeamWeaponConeOfFire( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Shows a team weapon's "cone of fire" UI. The position and orientation is not updated, so don't let this stay on screen for too long. Returns an ID for use with UI_HideTeamWeaponConeOfFire. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_StopFlashing"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_StopFlashing( <span class="arg">Real</span> updaterID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops a flash handler of a given id. </p>
<p>If the given flash handler doesn't exist, then there is no effect.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_StopFlashingCommanderBranchUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_StopFlashingCommanderBranchUpgrade( <span class="arg">Real</span> flashID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops flashing one of the 6 commander branch upgrades </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_StopFlashingCommanderTreeUpgrade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_StopFlashingCommanderTreeUpgrade( <span class="arg">Real</span> flashID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops flashing one of the 3 commander tree upgrades </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_StopFlashingTacticalMapWidget"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_StopFlashingTacticalMapWidget( <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops flashing a widget on the tactical map </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_SwapDisplayedCommanderTree"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_SwapDisplayedCommanderTree( <span class="arg">PlayerID</span> player, <span class="arg">String</span> treeName, <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Swaps a displayed commander tree for a given player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_TerritoryHide"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_TerritoryHide( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Toggle off territory lines. Each call to UI_TerritoryHide must be matched by a call to UI_TerritoryShow </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_TerritoryShow"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_TerritoryShow( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Toggle on territory lines. Each call to UI_TerritoryShow must be matched by a call to UI_TerritoryHide </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_ToggleDecorators"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_ToggleDecorators( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Toggles all decorators on or off. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UI_UnrestrictBuildingPlacement"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UI_UnrestrictBuildingPlacement( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes the restriction on building placement </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="UIWarning_Show"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		UIWarning_Show( <span class="arg">LocString</span> locText )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Displays a breif UI warning in the critical alert message area. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="WinWarning_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		WinWarning_Add( <span class="arg">String</span> name, <span class="arg">PlayerID</span> player, <span class="arg">String</span> icon, <span class="arg">WString</span> wWinConditionName, <span class="arg">LocString</span> wHelpTip )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create win/lose warning.  You can use the name to reference the warning later. </p>
<p> String name - The name of the win warning.  Each win warning needs a unique name so you have a way of changing its text at a later time.<br> PlayerID player - The player that this win warning applies to.  This isnt used right now, but its good to have in case we want to make the text the same color as the player or something.<br> String icon - The name of the icon.  Again, this is not used right now, but it may be in the future.<br> LocString wWinConditionName - This is a localized string containing the name of the win condition that this win warning applies to. This text is used for the title of the win warnings help tip.<br> LocString wHelpTip - This is a localized string containing the help tip description.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="WinWarning_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		WinWarning_Exists( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the named win warning exists. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="WinWarning_PublishLoseReminder"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		WinWarning_PublishLoseReminder( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> warningLevel )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Triggers a UI event cue and an audio cue that the player is about to lose the game. </p>
<p>The lower the warningLevel, the closer the player is to losing and the more intense the warning is</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="WinWarning_Remove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		WinWarning_Remove( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes an added win/lose warning </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="WinWarning_SetText"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		WinWarning_SetText( <span class="arg">String</span> name, <span class="arg">LocString</span> locText )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the text for a win warning. </p>
<p>Designers: PLEASE be careful how you use this.  Use Loc_FormatText where nesc. for localization.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Util"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Util</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Event_IsAnyRunning"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Event_IsAnyRunning( <span class="arg">[Real</span> priority_threshold] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if any event is currently running [at or below (more important than) the priority threshold. If not specified, ignores threshold.] </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_EndSP"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_EndSP( <span class="arg">Boolean</span> win[, <span class="arg">LocString</span> message, <span class="arg">Boolean</span> nis, <span class="arg">Boolean</span> sandmap] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Ends the single player game (win/lose). You can optionally specify a message that will show up in the gameover dialog box </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_FadeToBlack"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_FadeToBlack( <span class="arg">Bool</span> direction, <span class="arg">Real</span> length )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Fades the screen to black - FADE_OUT to fade to black, FADE_IN to fade back in </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Loc_FormatText"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LocString</span> 
		Loc_FormatText( <span class="arg">Real</span> FormatID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a formatted localized string. </p>
<p>Use this function to format localized text. ie %1PLAYERNAME% is going to win.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetEntityConcentration"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EGroup</span> 
		Player_GetEntityConcentration( <span class="arg">PlayerID</span> player[, <span class="arg">Boolean</span> popcapOnly, <span class="arg">Table</span> includeBlueprints, <span class="arg">Table</span> excludeBlueprints, <span class="arg">Boolean</span> bLeastConcentrated, <span class="arg">MarkerID/Table</span> onlyInThisMarker] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Finds the greatest (or least) concentration of entities owned by a player. </p>
<p>This function is slow, so don't call it very often</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Player_GetSquadConcentration"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroup</span> 
		Player_GetSquadConcentration( <span class="arg">PlayerID</span> player[, <span class="arg">Boolean</span> popcapOnly, <span class="arg">Table</span> includeBlueprints, <span class="arg">Table</span> excludeBlueprints, <span class="arg">Boolean</span> bLeastConcentrated, <span class="arg">MarkerID/Table</span> onlyInThisMarker] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Finds the greatest (or least) concentration of squads owned by a player. </p>
<p>This function is slow, so don't call it very often</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_PlayOnSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_PlayOnSquad( <span class="arg">String</span> soundpathname, <span class="arg">SGroupID</span> sgroupid )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Play sound on the first entity of the squad in sgroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_AddMouseoverSquadToSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SGroupID</span> 
		Util_AddMouseoverSquadToSGroup( <span class="arg">[Boolean</span> clearGroup] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>If there's a squad under the mouse cursor, this adds it to a unique SGroup. Return value is the SGroup it was added to, or nil if there was no squad under the mouse cursor. Pass in true for 'clearGroup' to clear the sgroup before adding the squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_ApplyModifier"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ModID</span> 
		Util_ApplyModifier( <span class="arg">SGroupID/EGroupID/Player</span> groupid, <span class="arg">String</span> modifier, <span class="arg">Real</span> scalefactor, <span class="arg">Real</span> mathtype[, <span class="arg">Real</span> applytype, <span class="arg">Bool</span> exclusive, <span class="arg">String</span> targetname] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Applies any modifier to the target SGroup, EGroup, or Player </p>
<p>Valid applytypes are MAT_...(Entity, Squad etc.), if left default assumption is default type for the target Cases you want to define applytype: Weapon Modifiers, Enable Modifiers, or a player modifier for all entity or squad types Valid mathtypes are MUT...(Addition, Multiplication, etc.) Exclusive modifiers will replace all pre-existing modifiers of that modifier type on the target</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_AutoAmbient"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_AutoAmbient( <span class="arg">Table</span> intelEventTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Auto-generate an Ambient Event. These are Low priority, and will hopefully interrupt nothing. </p>
<p>Takes a table of Actors and LOC numbers</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_AutoIntel"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_AutoIntel( <span class="arg">Table</span> intelEventTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Auto-generate an Intel Event. These are medium priority, and will interrupt a Stinger, but not an NIS. </p>
<p>Takes a table of parameters defining speaker(s) and line(s)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_AutoNISlet"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_AutoNISlet( <span class="arg">Real</span> nisletType, <span class="arg">Table</span> intelEventTable, <span class="arg">[boolean</span> bFOWvisible] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Auto-generate an NISlet Event, a simple NIS meant to convey mission location. These are high priority, and will interrupt a Stinger and Intel Events. </p>
<p>Takes an NISLET type and a table of parameters defining speaker(s) and line(s) NISLET_BLACK2GAME	= 1 -- starts in black and fades up, ends in gamplay NISLET_GAME2GAME 	= 2 -- transitions from game play to letterbox and backto gameplay NISLET_GAME2BLACK	= 3 -- starts in gameplay and ends in black NISLET_GAME2LETTER	= 4 -- starts in gameplay and ends in letterbox mode (for transition to sitrep) NISLET_TIME 		= 1 -- use seconds to wait on camera movements NISLET_VO			= 2 -- use voice to wait on camera movements	t_eventes.nislet_start = {		{camPos = pos1, waitType = NISLET_TIME, waitValue = 5},		{camPos = pos2, waitType = NISLET_VO, waitValue = {ACTOR.GenericAlly, 000000}},	}</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_ClearWrecksFromMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_ClearWrecksFromMarker( <span class="arg">MarkerID/Pos/SectorID</span> position[, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clears any vehicle wrecks from a given area </p>
<p>Area can be a marker (with or without a range override), a position and range combo, or a territory sector ID</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_DespawnAll"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_DespawnAll( <span class="arg">Boolean</span> despawn, <span class="arg">Boolean!allPlayers![or!Int</span> playerNum], <span class="arg">Boolean</span> egroups )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>ReSpawns or DeSpawns sgroups (and egroups) for all players or the indicated player. </p>
<p>examples: Util_DespawnAll(true, true, false) or Util_DespawnAll(true, 1, false) or Util_DespawnAll(false, true, false)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_DifVar"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Variable</span> 
		Util_DifVar( <span class="arg">Table</span> difficultyVariables[, <span class="arg">Real</span> difficulty] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Takes in a table and chooses the right variable for the difficulty setting. 1-4 elements. Acquires current difficulty by default. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_EntityLimit"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Util_EntityLimit( <span class="arg">[Real</span> entityLimit] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks the entity count for the world and returns true or false depending on the result. A specific value can be passed in to override the default amount. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_FallBackToGarrisonBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		Util_FallBackToGarrisonBuilding( <span class="arg">SGroupID</span> sgroupid, <span class="arg">Int</span> radius )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Try to garrison a loadable building within radius that is closer to the first squad of the sgroup than enemy </p>
<p>The squad suppression would be resetted before fallling back so that they would not succumb to pinned state</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GarrisonNearbyBuilding"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		Util_GarrisonNearbyBuilding( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos, <span class="arg">Real</span> radius[, <span class="arg">Boolean</span> occupied, <span class="arg">SGroup/Table</span> filter] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Finds a nearby building to garrison. can ignore occupied [friendly] buildings. return ID of entity it found, or nil if not found </p>
<p>Can also filter out groups not to occupy</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GarrisonNearbyVehicle"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadID</span> 
		Util_GarrisonNearbyVehicle( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos, <span class="arg">Real</span> radius[, <span class="arg">Boolean</span> occupied, <span class="arg">SGroup/Table</span> filter] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Finds a nearby vehicle to garrison. can ignore occupied [friendly] vehicles. return ID of vehicle it found, or nil if not found, </p>
<p>Can also filter out groups not to occupy</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetClosestMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">MarkerID</span> 
		Util_GetClosestMarker( <span class="arg">Variable</span> var, <span class="arg">Table</span> markers )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the closest MarkerID to the entity/marker/pos/egroup/sgroup/squad from the table of markers provided </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetCommonwealthHQMobility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Util_GetCommonwealthHQMobility( <span class="arg">SGroupID</span> group )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the mobility of a commonwealth HQ - returns true if it's mobile, false if it's static </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetEntitiesByBP"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_GetEntitiesByBP( <span class="arg">EGroupID</span> sourcegroup, <span class="arg">EGroupID</span> destgroup, <span class="arg">EntityBlueprint</span> ebp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find all the entities with a given blueprint in sourcegroup and add them to destgroup. </p>
<p>See also: EGroup_Filter()</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetMouseoverSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_GetMouseoverSGroup( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a unique SGroup used to hold mouseover squads obtained from Util_AddMouseoverSquadToSGroup </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Util_GetPosition( <span class="arg">Variable</span> var )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a position from entity/marker/pos/egroup/sgroup/squad </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetPositionFromAtoB"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Util_GetPositionFromAtoB( <span class="arg">MarkerID/Pos</span> a, <span class="arg">MarkerID/Pos</span> b, <span class="arg">Real</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a position that is distance metres from point A, headed in the direction of point B. </p>
<p>You can also pass in a percentage (0.0 to 1.0) instead of a distance in metres.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetRandomPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Pos</span> 
		Util_GetRandomPosition( <span class="arg">MarkerID/ScarPos</span> [, <span class="arg">Real</span> range] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a random position either within the marker's proximity or with a pos and range provided. Range is ignored for rectangular markers </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetSquadsByBP"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_GetSquadsByBP( <span class="arg">SGroupID</span> sourcegroup, <span class="arg">SGroupID</span> destgroup, <span class="arg">SquadBlueprint</span> sbp )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find all the squads with a given blueprint in sourcegroup and add them to destgroup. </p>
<p>See also: SGroup_Filter()</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetTrailingNumber"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Number</span> 
		Util_GetTrailingNumber( <span class="arg">String</span> val )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns trailing numbers from a string, if it exists, nil otherwise. E.G. "marker23" would return 23. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_HidePlayerForNIS"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_HidePlayerForNIS( <span class="arg">PlayerID</span> player, <span class="arg">Bool</span> hide )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Hides all of a player's squads and/or buildings </p>
<p>Doesn't hide buildings a player is in, or any base structures. Only items like sandbags, tanktraps, mg nests, etc. Put multiple playerIDs in a table to hide many players together, or use ALL for the playerID to apply to all players at once.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_MarkerFX"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">void</span> 
		Util_MarkerFX( <span class="arg">String</span> markername, <span class="arg">String</span> eventfile )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Play an events file at a given markers location </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_MissionTitle"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_MissionTitle( <span class="arg">LocString</span> title )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Play the mission title fade. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_MuteAmbientSound"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_MuteAmbientSound( <span class="arg">Boolean</span> enable, <span class="arg">[Real</span> fade] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enabling this function will mute the ambient sound (NOT all sound). </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_PlayMusic"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_PlayMusic( <span class="arg">String</span> name, <span class="arg">Real</span> fade, <span class="arg">Real</span> delay )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays music from the Data:Sound folder, and stores the music track so it can be resumed after a save/load </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_PrintObject"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_PrintObject( <span class="arg">Object</span> obj[, <span class="arg">Int</span> max_depth, <span class="arg">String</span> data_type, <span class="arg">Function</span> print_func] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Prints out the entire contents of an Object </p>
<p>Objects can be anything (Player, SGroup, Int, Table, String, etc.), but this is most useful for Tables</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_ReinforceEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_ReinforceEvent( <span class="arg">SGroupID</span> sgroupName[, <span class="arg">LocID</span> custumTitle, <span class="arg">LocID</span> customDescript] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates an Event Cue for an SGroup and repeats it until the SGroup is killed or selected. </p>
<p>Additionally, a map ping and custome loc strings for the Title and Description can be used.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_ReloadScript"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_ReloadScript( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Reloads the running scar script. Current running rules would also be updated to the redefined functioin. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_RestoreMusic"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_RestoreMusic(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Resumes playing the music track that was last triggered i.e. after a save/load </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_SetCommonwealthHQMobility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_SetCommonwealthHQMobility( <span class="arg">SGroupID</span> group, <span class="arg">Boolean</span> mobile[, <span class="arg">Boolean</span> instant] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the mobility of a commonwealth HQ. Can be done instantly (default) or with the progress bar as normal. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_SetStartingResources"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_SetStartingResources( <span class="arg">Real</span> missionNumber )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Trigger function immediately after the opening NIS to set starting resources for the player </p>
<p>Features values for Easy, Normal, and Hard/Expert</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_StartAmbient"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_StartAmbient( <span class="arg">LuaFunction</span> func )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Play a Speech Stinger. These are the lowest priority, and will be bumped by Intel Events or NIS's. </p>
<p>This function should used instead of Event_Start because it handles priorities.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_StartIntel"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_StartIntel( <span class="arg">LuaFunction</span> func )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Play an Intel Event. These are medium priority, and will interrupt a Stinger, but not an NIS. </p>
<p>This function should used instead of Event_Start because it handles priorities.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_TableContains"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Util_TableContains( <span class="arg">Table</span> targetTable, <span class="arg">Object</span> obj )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks the first layer of a table and looks for a specified Object, returns true if found. </p>
<p>Objects can be anything (Player, SGroup, Int, Table, String, etc.)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_TriggerEvent"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_TriggerEvent( <span class="arg">PlayerID</span> playerid, <span class="arg">Marker/EGroup/SGroup/ScarPos</span> position, <span class="arg">Int</span> range, <span class="arg">LuaFunction</span> func, <span class="arg">Boolean</span> non_combat, <span class="arg">Boolean</span> onscreen_only, <span class="arg">Int</span> onscreen_duration )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Library function to trigger NIS event under a certain sets of conditions.  NOTE: if checking against a marker DO NOT specify a range.  The range of the marker set in the WorldBuilder will be used. </p>
<p>onscreen_only set to TRUE means the squad must be onscreen if the event is to be triggered.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_UMSAbilityRemove"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_UMSAbilityRemove(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes commander tree abilities from UMS maps in CoHo </p>
<p>Use this to make sure that players don't have their commander tree abilities during a UMS in CoHo.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_UnitCounts"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Lua Table</span> 
		Util_UnitCounts( <span class="arg">Boolean!world!OR!playerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table containing either the total or a specific player's squad count, entity count, and vehicle count. </p>
<p>table can be accessed as scene below Get Player Example:<br> local t = Util_UnitCounts(player1)<br> print(t.squad)<br> print(t.entity)<br> print(t.vehicle)<br> Get World Example:<br> local t = Util_UnitCounts(true)<br> print(t.squad)<br> print(t.entity)<br> print(t.vehicle)<br> Alternate Format:<br> print(Util_UnitCounts(true).squad)<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_KillAllNeutralEntitesNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_KillAllNeutralEntitesNearMarker( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kills ALL world entities near a marker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_Various"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>Various</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Anim_PlayEntityAnim"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Anim_PlayEntityAnim( <span class="arg">EntityID</span> entity, <span class="arg">String</span> animname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays an animation from an entity. </p>
<p>This function can be called through a CTRL object in NISlets to wait on the animation.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetAbilityBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">AbilityBlueprint</span> 
		BP_GetAbilityBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns an ability property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetCamouflageStanceBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">CamouflageStanceBlueprint</span> 
		BP_GetCamouflageStanceBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a camouflage stance property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetCriticalBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">CriticalBlueprint</span> 
		BP_GetCriticalBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a critical property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetDamageBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">DamageBlueprint</span> 
		BP_GetDamageBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a damage property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetMoveTypeBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">MoveTypeBlueprint</span> 
		BP_GetMoveTypeBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a move type property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetSlotItemBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SlotItemBlueprint</span> 
		BP_GetSlotItemBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a slot item property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetUpgradeBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">UpgradeBlueprint</span> 
		BP_GetUpgradeBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns an upgrade property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="BP_GetWeaponBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">WeaponBlueprint</span> 
		BP_GetWeaponBlueprint( <span class="arg">String</span> pbgPath )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a weapon property bag group. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="bug"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		bug( <span class="arg">ErrorMessage</span> errormessage )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>E-mails a warning out with logfiles at the end of the game. </p>
<p>Example: bug( "This shouldn't happen, fix "..problem.here)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CallEntityFunction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_CallEntityFunction( <span class="arg">EGroupID</span> egroup, <span class="arg">Function</span> entityFunction, <span class="arg">variable!argument</span> list )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls an Entity_ function on every entity in an egroup </p>
<p>The first parameter of the supplied function must be EntityID</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="EGroup_CallEntityFunctionAllOrAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		EGroup_CallEntityFunctionAllOrAny( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all, <span class="arg">Function</span> entityFunction, <span class="arg">variable!argument</span> list )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether ALL or ANY entities in an egroup satisfy a condition, using an Entity_ function to perform the query on each entity </p>
<p>The first parameter of the supplied function must be EntityID</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FallBack_AddLocation"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FallBack_AddLocation( <span class="arg">PlayerID</span> player, <span class="arg">String</span> marker, <span class="arg">Table</span> markerlist )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a fallback location to the manager. </p>
<p> Add a fallback location to the manager, where if the enemy get close enough to the spot, the units within the vicinity will automatically fall back to one of the locations listed.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FallBack_RemoveDestination"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FallBack_RemoveDestination( <span class="arg">PlayerID</span> player, <span class="arg">String</span> destination )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a destination from all fall backs for a player. </p>
<p> Remove a destination from all fall backs listed for a particular player.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="FallBack_RemoveLocation"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		FallBack_RemoveLocation( <span class="arg">PlayerID</span> player, <span class="arg">String</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a fallback location from the manager. </p>
<p> Remove a fallback location from the manager.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="fatal"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		fatal( <span class="arg">lua_State*</span> state )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Throws an error to lua and print out the error message </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_EnableInput"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_EnableInput( <span class="arg">Boolean</span> enabled )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables/Disables all input EXCEPT for ESC and F10. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_GetSPDifficulty"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Game_GetSPDifficulty( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns current single player difficulty. Values are GD_EASY, GD_NORMAL, GD_HARD, GD_EXPERT. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_HideSystemMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_HideSystemMessage( <span class="arg">LocString</span> msg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes a message added by Game_ShowSystemMessage. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_IsRTM"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Game_IsRTM( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Use to test whether the game is running in RTM mode or not. Using -rtm from the command line will cause this function to also return true in non-RTM builds. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_LoadAtmosphere"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_LoadAtmosphere( <span class="arg">String</span> filename, <span class="arg">Real</span> transitionTime )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Transitions to another atmosphere. Overwrites current transitions. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_LockRandom"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_LockRandom( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>If you are running something that is non-deterministic like a getlocalplayer conditional, you can lock the random to make sure no one down the callstack will throw the game random index out of sync and cause a sync error. REMEMBER TO UNLOCK WHEN YOU ARE DONE </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_QuitApp"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_QuitApp( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Quits the app immediately </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_ScreenFade"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_ScreenFade( <span class="arg">Real</span> r, <span class="arg">Real</span> g, <span class="arg">Real</span> b, <span class="arg">Real</span> a, <span class="arg">Real</span> timeSecs )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Fades the screen to a given RGBA colour over a number of seconds </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_ShowPauseMenu"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_ShowPauseMenu( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Brings up the pause menu. The game does not get paused until the end of the current sim tick, so anything that comes after Game_ShowPauseMenu in your function will still get executed, as well as any rules set to run during that frame. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_ShowSystemMessage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_ShowSystemMessage( <span class="arg">LocString</span> msg )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Shows a system message in the area where Game Paused text appears/ </p>
<p>Call Game_HideSystemMessage to remove the message.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_TriggerLightning"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_TriggerLightning( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Triggers lightning on the next frame </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Game_UnLockRandom"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Game_UnLockRandom( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>unlock the random from a previous lockrandom call only </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="GarrisonManager_AddGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		GarrisonManager_AddGroup( <span class="arg">Real</span> garrisonmin, <span class="arg">Real</span> abandonmin, <span class="arg">Real</span> searchradius, <span class="arg">Real!regarrison</span> ] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add a squad to the Building Manager.  Will order them to garrison nearby buildings, take cover in a structure if they're under attack, move out of buildings to safer ones and generally act more intelligently </p>
<p>EMPTY.</p>
</td>
</tr>
</table>
</p><a name="GarrisonManager_RemoveGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		GarrisonManager_RemoveGroup( <span class="arg">SGroupID/EGroupID/SyncWeaponID</span> gun )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove a squad from the garrison manager. </p>
</td>
</tr>
</table>
</p><a name="License_CanPlayRace"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		License_CanPlayRace( <span class="arg">String</span> raceName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the installed version of the game allows the player to play this race </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="LOC"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LocString</span> 
		LOC( <span class="arg">String</span> text )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>DEV ONLY: Converts ansi text to localized text. </p>
<p>Your text will have to get localized properly at some point before final.   When converting text with this function you will get LOC: prefixed to your text</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Loc_ConvertNumber"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LocString</span> 
		Loc_ConvertNumber( <span class="arg">Real</span> number )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a localized string containing the number. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Loc_Empty"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LocString</span> 
		Loc_Empty( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Empty string. </p>
<p>This will create an empty localized string.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Loc_FormatTime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LocString</span> 
		Loc_FormatTime( <span class="arg">Real</span> secs, <span class="arg">Boolean</span> show_hours, <span class="arg">Boolean</span> leading_zeroes )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a formatted time string. can omit hours and leading zeroes (for example, 4:57 instead of 00:04:57) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_AbortToFE"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_AbortToFE( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Abort straight out of the game to the frontend, without asking the user </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_AIControlLocalPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_AIControlLocalPlayer( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Let AI take over local player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_DetectKeyboardInput"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_DetectKeyboardInput( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the app has had any keyboard input in the last second </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_DetectMouseInput"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_DetectMouseInput( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the app has had any mouse input in the last second </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_EnablePerformanceTest"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_EnablePerformanceTest( <span class="arg">Boolean</span> toEnable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Turn on or off the performance test monitoring </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_GetCommandLineString"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		Misc_GetCommandLineString( <span class="arg">String</span> option )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the string argument for a command line option. ex: for "-init test.lua" it would return "test.lua" </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsCommandLineOptionSet"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsCommandLineOptionSet( <span class="arg">String</span> option )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if -option is specified on the command line </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsDevMode"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsDevMode( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the game is running in dev mode. The rules for dev mode are a bit complicated between builds, so we cannot simply check the command line. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_IsPosOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Misc_IsPosOnScreen( <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Check if position is on screen </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Misc_SetDesignerSplatsVisibility"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Misc_SetDesignerSplatsVisibility( <span class="arg">Boolean</span> bVisible )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Shows or hides designer splats, which are splats in the UI folder </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_ApplyToEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Modifier_ApplyToEntity( <span class="arg">ScarModifier</span> modifier, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Applies an entity modifier to an entity. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_ApplyToPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Modifier_ApplyToPlayer( <span class="arg">ScarModifier</span> modifier, <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Applies a player modifier to a player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_ApplyToSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Modifier_ApplyToSquad( <span class="arg">ScarModifier</span> modifier, <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Applies a squad modifier to a squad. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_Create"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ScarModifier</span> 
		Modifier_Create( <span class="arg">Real</span> applicationType, <span class="arg">String</span> modtype, <span class="arg">Real</span> usageType, <span class="arg">Boolean</span> exclusive, <span class="arg">Real</span> value, <span class="arg">LuaBinding::StackVar</span> v )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a modifier that you can apply to stuff. </p>
<p> applicationType : MAT_EntityType, MAT_Entity, MAT_Player, MAT_Squad, MAT_SquadType, or MAT_Weapon.<br> modtype : Name of modifier from the modifiers table in the attribute editor.<br> usageType : MUT_Addition, MUT_Multiplication, MUT_MultiplyAdd or MUT_Enable.<br> exclusive : This field is not currently used for modifiers created through script. <br> value : The value for the modifier.<br> extname : The name of the entity/squad blueprint for when the applicationType is MAT_EntityType or MAT_SquadType.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_Destroy"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Modifier_Destroy( <span class="arg">ScarModifier</span> modifier )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Todo. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Modifier_IsEnabled"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Modifier_IsEnabled( <span class="arg">EntityID</span> pEntity, <span class="arg">String</span> modtype, <span class="arg">Boolean</span> bEnabledByDefault )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether the modifier is enabled (requires an Entity and an Entity enable/disable modifier) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_AlertSitRep"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Obj_AlertSitRep( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create an on screen event cue to alert new sit rep </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_Create"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Obj_Create( <span class="arg">PlayerID</span> player, <span class="arg">LocString</span> title, <span class="arg">LocString</span> desc, <span class="arg">String</span> icon, <span class="arg">Real</span> type, <span class="arg">MedalBlueprint</span> medalPBG )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Create an objective and returns the unique ID for it </p>
<p>type could either be OT_Primary, OT_Secondary or OT_Medal</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_GetState"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Obj_GetState( <span class="arg">Real</span> objectiveID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get objective state ( OS_Off, OS_Incomplete, OS_Complete, OS_Failed ) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_GetVisible"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Obj_GetVisible( <span class="arg">Real</span> objectiveID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get objective visibility </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_SetDescription"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Obj_SetDescription( <span class="arg">Real</span> objectiveID, <span class="arg">LocString</span> desc )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set description text localization ID for the objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_SetIcon"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Obj_SetIcon( <span class="arg">Real</span> objectiveID, <span class="arg">String</span> icon )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set icon path for the objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_SetObjectiveFunction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Obj_SetObjectiveFunction( <span class="arg">Real</span> id, <span class="arg">Real</span> fnType, <span class="arg">LuaFunction</span> f )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set callback functions for the objective.  </p>
<p>FN_OnActivate is for triggering situation report. FN_OnShow is used to assign UI element when tactical map is open. FN_OnSelect is used to assign UI element when the objective is highlighted</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_SetState"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Obj_SetState( <span class="arg">Real</span> objectiveID, <span class="arg">Real</span> state )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set objective state ( OS_Off, OS_Incomplete, OS_Complete, OS_Failed ) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_SetTitle"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Obj_SetTitle( <span class="arg">Real</span> objectiveID, <span class="arg">LocString</span> title )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set title text localization ID for the objective </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Obj_SetVisible"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Obj_SetVisible( <span class="arg">Real</span> objectiveID, <span class="arg">Boolean</span> visible )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set objective visibility </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="PlayerProfile_GetVar"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		PlayerProfile_GetVar( <span class="arg">String</span> varname )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Retrieve a custom value in current player profile. Returns an empty string if value does not exist </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="PlayerProfile_SetVar"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		PlayerProfile_SetVar( <span class="arg">String</span> varname, <span class="arg">String</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Save a custom value in current player profile. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="PrintOnScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		PrintOnScreen( <span class="arg">String</span> text )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Prints a message on the screen </p>
<p> Prints the given message on the screen. It will stay there until you call PrintOnScreen_RemoveFromScreen() or print another message on the screen to replace it.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="PrintOnScreen_RemoveFromScreen"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		PrintOnScreen_RemoveFromScreen(  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Remove any messages from the screen </p>
<p> Removes from the screen any messages put there with PrintOnScreen()</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ResourceAmount_Add"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ResourceAmount</span> 
		ResourceAmount_Add( <span class="arg">ResourceAmount</span> amt1, <span class="arg">ResourceAmount</span> amt2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add each element of the two passed in ResourceAmounts together </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ResourceAmount_ClampToZero"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ResourceAmount</span> 
		ResourceAmount_ClampToZero( <span class="arg">ResourceAmount</span> amt )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Clamps the passed in resource to zero if it has any negative numbers </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ResourceAmount_Has"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		ResourceAmount_Has( <span class="arg">ResourceAmount</span> amt1, <span class="arg">ResourceAmount</span> amt2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the first amount has enough resources for the second amount (amt2) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ResourceAmount_Mult"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ResourceAmount</span> 
		ResourceAmount_Mult( <span class="arg">ResourceAmount</span> amt1, <span class="arg">Real</span> mult )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Take a resource amount and multiply each value inside of it by mult </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ResourceAmount_Subtract"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ResourceAmount</span> 
		ResourceAmount_Subtract( <span class="arg">ResourceAmount</span> amt1, <span class="arg">ResourceAmount</span> amt2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Subtract the second amount from the first and return the new ResourceAmount </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ResourceAmount_Sum"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		ResourceAmount_Sum( <span class="arg">ResourceAmount</span> amt1 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Add up all the numbers in the resource and return a single value </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="ResourceAmount_Zero"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">ResourceAmount</span> 
		ResourceAmount_Zero( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a new ResourceAmount all set to zero </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_Autosave"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Scar_Autosave( <span class="arg">LocString</span> checkpoint )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Saves the game. the savegame name is built using the abbreviated mission name + checkpoint. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_AwardMedal"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Scar_AwardMedal( <span class="arg">MedalBlueprint</span> medal )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Awards a medal to the current player. The campaign must be set up to allow that medal to be awarded during this mission, or you will get a fatal SCAR error. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_DebugConsoleExecute"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Scar_DebugConsoleExecute( <span class="arg">String</span> command )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>execute console command string. Will only work if dev mode is enabled! (it's OFF by default in RTM builds) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_PlayerHasMedal"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Scar_PlayerHasMedal( <span class="arg">MedalBlueprint</span> medal )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether the player has a medal that can be awarded during this mission. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_PlayNIS"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Scar_PlayNIS( <span class="arg">String</span> filename )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Play NIS through SCAR. Should only be used inside a event function </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Scar_PlayNIS2"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Scar_PlayNIS2( <span class="arg">String</span> filename1, <span class="arg">String</span> filename2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Play 2 NISs through SCAR. Should only be used inside a event function </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="scartype"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		scartype( <span class="arg">LuaBinding::StackVar</span> v )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns ST_NIL,ST_BOOLEAN,ST_NUMBER,ST_STRING,ST_TABLE,ST_FUNCTION,ST_SCARPOS,ST_EGROUP,ST_ENTITY,ST_SGROUP,ST_SQUAD,ST_TEAM,ST_MARKER, ST_PBG, or ST_UNKNOWN </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="scartype_tostring"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">String</span> 
		scartype_tostring( <span class="arg">LuaBinding::StackVar</span> v )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a string representing the scartype </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Setup_GetVictoryPointTickerOption"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Setup_GetVictoryPointTickerOption( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the victory point ticker option selected </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Setup_SetPlayerName"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Setup_SetPlayerName( <span class="arg">PlayerID</span> player, <span class="arg">LocString</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the UI name of a given player. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Setup_SetPlayerRace"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Setup_SetPlayerRace( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> raceIndex )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Set the race for a given player.  Use World_GetRaceIndex() to get the race index from the ME name. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Setup_SetPlayerTeam"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Setup_SetPlayerTeam( <span class="arg">PlayerID</span> p, <span class="arg">Real</span> team_id )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Put a player in a team. Use TEAM_NEUTRAL as the team_id to set the player as neutral </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CallEntityFunction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_CallEntityFunction( <span class="arg">SGroupID</span> sgroup, <span class="arg">Function</span> entityFunction )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls an Entity_ function on every entity in an sgroup </p>
<p>The first parameter of the supplied function must be EntityID</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CallSquadFunction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_CallSquadFunction( <span class="arg">SGroupID</span> sgroup, <span class="arg">Function</span> squadFunction, <span class="arg">variable!argument</span> list )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls a Squad_ function on every squad in an sgroup </p>
<p>The first parameter of the supplied function must be SquadID</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SGroup_CallSquadFunctionAllOrAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SGroup_CallSquadFunctionAllOrAny( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all, <span class="arg">Function</span> squadFunction, <span class="arg">variable!argument</span> list )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether ALL or ANY squads in an sgroup satisfy a condition, using a Squad_ function to perform the query on each squad </p>
<p>The first parameter of the supplied function must be SquadID</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_ContainerDebug"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_ContainerDebug( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Turns container debugging on/off </p>
<p> Example:<br><br> \Sound_ContainerDebug()<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_Play2D"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Sound_Play2D( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays a 2D sound from the Data:Sound folder.  Use the path relative to Sound folder without the file extension. Returns handle to the sound container </p>
<p>The sound needs to be 2D Example:<br><br> &emsp;Sound_Play( "Blah/Mysound" )<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_Play3D"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Sound_Play3D( <span class="arg">String</span> name, <span class="arg">EntityID</span> actor )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays a 3D sound from the Data:Sound folder on the entity.  Use the path relative to Sound folder without the file extension. Returns handle to the sound container </p>
<p>The sound needs to be 3D Example:<br><br> &emsp;Sound_Play( "Speech/SpaceMarine/AddOnComplete", TheActor )<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_PlayMusic"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_PlayMusic( <span class="arg">String</span> name, <span class="arg">Real</span> fade, <span class="arg">Real</span> delay )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays music from the Data:Sound folder. </p>
<p>The new music will phase out the old one. There can only be one music playing at anytime besides the transition fade is the time to fade in the music;  delay is the time in seconds to wait until the new music is started Example:<br><br> &emsp;Sound_PlayMusic( "Music/GreatMusic", 0.0, 0.0 )<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_PlayStreamed"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		Sound_PlayStreamed( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Plays a streaming sound from the Data:Sound folder.  Use the path relative to Sound folder without the file extension. Returns handle to the sound container </p>
<p>The sound needs to be 2D Example:<br><br> &emsp;Sound_PlayStreamed( "Blah/Mysound" )<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_PreCacheSound"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_PreCacheSound( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>pre-caches a sound </p>
<p> Example:<br><br> &emsp;Sound_PreCacheSound("nis/m02_n01_full")<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_SetGlobalControlSource"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_SetGlobalControlSource( <span class="arg">String</span> name, <span class="arg">Real</span> value )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the value for a global control source. </p>
<p> Example:<br><br> \Sound_SetGlobalControlSource("GameType", 2)<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_SetVolume"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_SetVolume( <span class="arg">String</span> name, <span class="arg">Real</span> volume, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a new volume for the group. </p>
<p> Example:<br><br> &emsp;Sound_Volume("Weapons", 0.5, 2)<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_SetVolumeDefault"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_SetVolumeDefault( <span class="arg">String</span> name, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the default volume for the group. </p>
<p> Example:<br><br> &emsp;Sound_SetVolumeDefault("Weapons", 2)<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_SetVolumeInv"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_SetVolumeInv( <span class="arg">String</span> name, <span class="arg">Real</span> volume, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the volume for all groups except the one specified. </p>
<p> Example:<br><br> &emsp;Sound_VolumeInv("NIS", 0.5, 2)<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_StartRecording"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_StartRecording( <span class="arg">String</span> name )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Starts recording the sound driver output </p>
<p> Example:<br><br> &emsp;Sound_StartRecording("Recordings/MyRecording.wav")<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_Stop"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_Stop( <span class="arg">Real</span> handle )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops sound associated with the container handle </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_StopMusic"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_StopMusic( <span class="arg">Real</span> fade, <span class="arg">Real</span> delay )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stop current playing music </p>
<p>Currently playing music would be stopped. If nothing is playing, nothing will happen fade is the time to fade out the music;  delay is the time in seconds wait until the new music is stopped Example:<br><br> &emsp;Sound_StopMusic( "Music/GreatMusic", 0.0 )<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Sound_StopRecording"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Sound_StopRecording( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Stops recording the sound driver output </p>
<p> Example:<br><br> &emsp;Sound_StopRecording()<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_CanAttackNow"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SyncWeapon_CanAttackNow( <span class="arg">SyncWeaponID</span> weapon, <span class="arg">egroup/sgroup/pos/marker</span> target )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether a sync weapon can attack a target without moving or turning. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_Exists"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SyncWeapon_Exists( <span class="arg">SyncWeaponID</span> weapon )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if a sync weapon still exists in the game world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_GetEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		SyncWeapon_GetEntity( <span class="arg">SyncWeaponID</span> weapon )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the EntityID of a sync weapon, or nil if it's been destroyed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_GetFromEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SyncWeaponID</span> 
		SyncWeapon_GetFromEGroup( <span class="arg">EGroupID</span> egroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Registers the sync weapon in the egroup and returns a SyncWeaponID you can use to keep track of it </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_GetFromSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SyncWeaponID</span> 
		SyncWeapon_GetFromSGroup( <span class="arg">SGroupID</span> sgroup )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Registers the sync weapon in the sgroup and returns a SyncWeaponID you can use to keep track of it </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_GetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		SyncWeapon_GetPosition( <span class="arg">SyncWeaponID</span> weapon )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the position of a sync weapon, or nil if it's been destroyed </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_IsAttacking"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SyncWeapon_IsAttacking( <span class="arg">SyncWeaponID</span> weapon, <span class="arg">Real</span> time )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Checks whether or not the actual sync weapon in a squad attacking. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_IsOwnedByPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		SyncWeapon_IsOwnedByPlayer( <span class="arg">SyncWeaponID</span> weapon, <span class="arg">[PlayerID</span> player] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the specified player owns the sync weapon. Use a playerid of nil to see if it's unonwed. </p>
<p>If player is not specified, then the code will check to see if the SyncWeapon is owned by the world.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="SyncWeapon_SetAutoTargetting"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		SyncWeapon_SetAutoTargetting( <span class="arg">SyncWeaponID</span> weapon, <span class="arg">String</span> hardpoint, <span class="arg">Bool</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets whether a weapon to auto-target things or not </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_CallPlayerFunction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Team_CallPlayerFunction( <span class="arg">TeamID</span> team, <span class="arg">Function</span> playerFunction, <span class="arg">variable!argument</span> list )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls an existing Player_ function on every player on a team </p>
<p>The first parameter of the supplied function must be PlayerID</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_CallPlayerFunctionAllOrAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Team_CallPlayerFunctionAllOrAny( <span class="arg">TeamID</span> team, <span class="arg">Boolean</span> all, <span class="arg">Function</span> playerFunction, <span class="arg">variable!argument</span> list )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether ALL or ANY players on a team satisfy a condition, using a Player_ function to perform the query on each player </p>
<p>restriction: the first parameter of the supplied function must be PlayerID</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_CallUIFunction"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Team_CallUIFunction( <span class="arg">TeamID</span> team, <span class="arg">Function</span> UI_Function, <span class="arg">variable!argument</span> list )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls a UI related function for the local player if he is on the team. NOTE: this is non-deterministic, so only use this for UI functions, otherwise your game may go out of sync (don't use this to spawn squads or anything affecting the simulation) </p>
<p>will call EventCue_Create(CUE.ATTACKED, 123, 456, point) for the local player if he's on the allies team. In other words, every player on the team will see the event cue, but the enemies will not.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_FindByRace"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">TeamID</span> 
		Team_FindByRace( <span class="arg">String</span> race[, <span class="arg">String</span> race2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the TeamID for a given race. See LuaConsts for constants to use. </p>
<p>You can pass in multiple races, for example: allies and commonwealth.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_ForEach"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Team_ForEach( <span class="arg">TeamID</span> team, <span class="arg">LuaFunction</span> function )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Calls your function on each player on a team. Parameters of your function are: (TeamID, player index, PlayerID). You can return true to stop the loop </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_ForEachAllOrAny"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Team_ForEachAllOrAny( <span class="arg">TeamID</span> team, <span class="arg">Boolean</span> all, <span class="arg">LuaFunction</span> function )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Tests a condition on teams. Calls your function for each player. Parameters of your function: (TeamID, player index, PlayerID). Your function must return true or false to indicate whether the player meets the condition. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_GetEnemyTeam"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">TeamID</span> 
		Team_GetEnemyTeam( <span class="arg">TeamID</span> team )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a team's enemy </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_GetPlayers"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Table</span> 
		Team_GetPlayers( <span class="arg">TeamID</span> team )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a table containing all the players on a team </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Team_IsPlayerOnTeam"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		Team_IsPlayerOnTeam( <span class="arg">PlayerID</span> player, <span class="arg">TeamID</span> team )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether a player is on that team </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TutorialMenu_EnableResumeButton"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TutorialMenu_EnableResumeButton( <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables the Resume button in the tutorial menu. Can be called at any time. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="TutorialMenu_SetButtonInfo"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		TutorialMenu_SetButtonInfo( <span class="arg">Real</span> index, <span class="arg">Boolean</span> enabled, <span class="arg">LocString</span> text, <span class="arg">LocString</span> tooltip, <span class="arg">String</span> icon, <span class="arg">LuaFunction</span> callback )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets up a button on the tutorial menu. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_CreateEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_CreateEntities( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> blueprintID, <span class="arg">MarkerID/Pos</span> location, <span class="arg">Real</span> numentities[, <span class="arg">MarkerID/Pos</span> toward] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a given number of entities at a location and adds them to an egroup. A PlayerID of nil will create the entities as world objects. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_CreateSquads"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_CreateSquads( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">SquadBlueprint/Table</span> sbp, <span class="arg">Marker/Pos/SGroup/EGroup</span> spawn_point[, <span class="arg">Position</span> destination, <span class="arg">Real</span> numsquads, <span class="arg">Real</span> loadout, <span class="arg">Boolean</span> attackmove, <span class="arg">Position</span> dest_facing, <span class="arg">UpgradeBlueprint/Table</span> upgrades, <span class="arg">Position</span> spawn_facing] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>High level function to create squads and give them basic orders upon spawning. detailed explanation found in Confluence </p>
</td>
</tr>
</table>
</p><a name="Util_GetOffsetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		Util_GetOffsetPosition( <span class="arg">entity/squad/egroup/sgroup/marker/position</span> pos, <span class="arg">Real</span> offset, <span class="arg">Real</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a position relative to a entity/squad/egroup/sgroup/marker/position's current position and orientation. see LuaConsts.scar for explanation of 'offset' parameter. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetPlayerOwner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		Util_GetPlayerOwner( <span class="arg">entity/squad/egroup/sgroup/player</span> Object )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the player owner for any of: entity, squad, egroup, sgroup, player. for groups, the first item is used. Returns nil for world owned or empty groups </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_GetRelationship"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real --&gt; R_ENEMY, R_ALLY, R_NEUTRAL, R_UNDEFINED, or nil (if world owned or invalid parameters)</span> 
		Util_GetRelationship( <span class="arg">entity/squad/egroup/sgroup/player</span> Object_1, <span class="arg">entity/squad/egroup/sgroup/player</span> Object_2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Gets the relationship between two of: entity, squad, egroup, sgroup, player. for groups, the first item is used. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_Paradrop"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_Paradrop( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">StackVar</span> blueprint, <span class="arg">Position</span> location, <span class="arg">Real</span> numsquads[, <span class="arg">Real</span> loadout] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Paradrops in a given number of squads at a location and adds them to an sgroup. You can optionally also specify the loadout (it will default to the min loadout if left off)  </p>
<p>The squad is not created right away (it waits for the plane to be over the dropzone) so be careful using the sgroup right after calling this function.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_ScarPos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position, if y-height is nil, y-height = ground height, terrain ground or walkable</span> 
		Util_ScarPos( <span class="arg">Real</span> xpos, <span class="arg">Real</span> zpos, <span class="arg">Real</span> ypos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Converts a 2D top down position to a 3D ScarPosition. </p>
<p> 3D ScarPositions have the x axis left to right, the z axis in to out, and the y axis down to up (y axis represents the height of the terrain).  Use this function to convert a top-down 2D position to a 3D world position.<br><br> Note: (0,0) is in the center of the map.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_SetPlayerOwner"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_SetPlayerOwner( <span class="arg">entity/squad/egroup/sgroup</span> Object, <span class="arg">PlayerID</span> owner[, <span class="arg">Boolean</span> bApplyToSquadsHeld=true] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the player owner for an entity, squad, egroup or sgroup. Also sets player owner of whatever is garrisoned inside them </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_SpawnGlider"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_SpawnGlider( <span class="arg">PlayerID</span> player, <span class="arg">ScarEntityPBG</span> gliderEBP, <span class="arg">Position</span> start, <span class="arg">Position</span> land[, <span class="arg">SGroupID</span> sgroup] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Spawns a glider and puts the squads in an sgroup when they spawn </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="Util_StartNIS"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Util_StartNIS( <span class="arg">String/Real/LuaFunction</span> NIS[, <span class="arg">LuaFunction</span> onComplete, <span class="arg">egroup/sgroup/Player/Table</span> hide, <span class="arg">LuaFunction</span> preNIS, <span class="arg">LuaFunction</span> postNIS] )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Play an NIS. See confluence link below for more info. </p>
</td>
</tr>
</table>
</p><a name="VIS_OccCullToggleOBB"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		VIS_OccCullToggleOBB( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>toggle the visibility of occlusion culling OBB </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="WC_CheckOneTeamLeft"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		WC_CheckOneTeamLeft( <span class="arg">String</span> win_condition )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>If only one team is alive, players on that team win.  Returns true if one team left. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
<p><a name="Group_World"></a><table width="100%">
<tr><td width="100%" class="tabletitle"><b>World</b></td></tr>
<tr><td width="100%" class="tablesubtitle"><b>Functions</b></td></tr>
</table><a name="Weather_SetType"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		Weather_SetType( <span class="arg">String</span> weatherLevelName )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>changes the weather state of all objects (options: sunny,lightrain,mediumrain, heavyrain) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_CleanUpTheDead"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_CleanUpTheDead( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Kill off a specific player's dead bodies (enter ALL to clean them all up) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_ClearCasualties"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_ClearCasualties( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_CopyTable"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">LuaTable</span> 
		World_CopyTable( <span class="arg">LuaTable</span> OriginalTable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Copies the contents of the original table returns a new table with the contents of that table  </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_DestroyWallsNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_DestroyWallsNearMarker( <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Destroys walls (entities with a wall_ext) near a marker </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_DistanceEGroupToPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_DistanceEGroupToPoint( <span class="arg">EGroupID</span> egroup, <span class="arg">Position</span> p1, <span class="arg">Boolean</span> closest )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the distance between a squad group and a point. </p>
<p> Pass in true for 3rd parameter to get the closest point and pass in false to get the furthest point.  The closest/furthest point is calculated on a per entity basis.  So the closest distance would be that of the closest entity.<br> Also note, it is an error to call this function with an empty group.<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_DistancePointToPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_DistancePointToPoint( <span class="arg">Position</span> p1, <span class="arg">Position</span> p2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the distance between two points. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_DistanceSGroupToPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_DistanceSGroupToPoint( <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> p1, <span class="arg">Boolean</span> closest )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the distance between a squad group and a point. </p>
<p> Pass in true for 3rd parameter to get the closest point and pass in false to get the furthest point.  The closest/furthest point is calculated on a per squadron basis.  So the closest distance would be that of the closest squadron.<br> It is an error to call this function with an empty group.  Check the group size with SquadGroup_Count( ) first.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_DistanceSquaredPointToPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_DistanceSquaredPointToPoint( <span class="arg">Position</span> p1, <span class="arg">Position</span> p2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Get the distance squared between two points. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_EnablePlayerToPlayerFOW"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_EnablePlayerToPlayerFOW( <span class="arg">PlayerID</span> p0, <span class="arg">PlayerID</span> p1, <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Enables or disables the fog of war between these two players </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_EnableReplacementObjectForEmptyPlayers"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_EnableReplacementObjectForEmptyPlayers( <span class="arg">Boolean</span> enable )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>*** You must call this from OnGameSetup, otherwise it's too late *** Determines whether empty players get converted to null resource points. </p>
<p>see Attribute Editor under tuning/player/empty_player_replacement_object</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_EndSP"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_EndSP( <span class="arg">Boolean</span> win )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Wins/loses a single team mission for the local teams </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetClosest"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Variable</span> 
		World_GetClosest( <span class="arg">Variable</span> var, <span class="arg">LuaTable</span> items )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the closest object from the table of marker/pos/egroup/sgroup to the closest marker/pos/egroup/sgroup specified </p>
<p>The table may mix together objects of different types.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetEntitiesNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetEntitiesNearMarker( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">MarkerID</span> marker, <span class="arg">Real</span> ownerType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add entities near the marker to the egroup </p>
<p>Entities belonging to a squad would not be added to the egroup</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetEntitiesNearPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetEntitiesNearPoint( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Position</span> pos, <span class="arg">Real</span> radius, <span class="arg">Real</span> ownerType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add entities near the point to the egroup </p>
<p>Entities belonging to a squad would not be added to the egroup</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetEntitiesWithinTerritorySector"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetEntitiesWithinTerritorySector( <span class="arg">PlayerID</span> player, <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> sectorID, <span class="arg">Real</span> ownerType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add entities within the territory sector to the egroup </p>
<p>Entities belonging to a squad would not be added to the egroup</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityID</span> 
		World_GetEntity( <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the EntityID at given index, use with World_GetNumEntities() to iterate through all the entities in the world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetFurthest"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Variable</span> 
		World_GetFurthest( <span class="arg">Variable</span> var, <span class="arg">LuaTable</span> items )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the furthest object from the table of marker/pos/egroup/sgroup to the furthest marker/pos/egroup/sgroup specified. </p>
<p>The table may mix together objects of different types.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetGameTime"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetGameTime( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return the total game time in seconds. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetHeightAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetHeightAt( <span class="arg">Real</span> x, <span class="arg">Real</span> y )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>returns the height of ground at 2D pos x,y </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetHiddenPositionOnPath"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		World_GetHiddenPositionOnPath( <span class="arg">PlayerID</span> player, <span class="arg">MarkerID/Pos</span> origin, <span class="arg">MarkerID/Pos</span> destination, <span class="arg">Real</span> checktype )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find a position on a path hidden from view, as close to the destination as possible whilst still satisfying your hidden checktype. Checktype can be either CHECK_IN_FOW, CHECK_OFFCAMERA or CHECK_BOTH. </p>
<p>The path is always calculated as if it were plain infantry. This function returns nil if it can't find a suitable position, so you can do a backup plan. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetLength"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetLength( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the total playable length of the game world (z coordinate) </p>
<p>Since the center of the map is 0,0 the world z range is (-l/2 -&gt; l/2)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetNeutralEntitiesNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetNeutralEntitiesNearMarker( <span class="arg">EGroupID</span> egroup, <span class="arg">MarkerID</span> marker )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add neutral entities near the marker to the egroup </p>
<p>Entities belonging to a squad would not be added to the egroup</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetNeutralEntitiesNearPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetNeutralEntitiesNearPoint( <span class="arg">EGroupID</span> egroup, <span class="arg">Position</span> pos, <span class="arg">Real</span> radius )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add neutral entities near the point to the egroup </p>
<p>Entities belonging to a squad would not be added to the egroup</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetNeutralEntitiesWithinTerritorySector"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetNeutralEntitiesWithinTerritorySector( <span class="arg">EGroupID</span> egroup, <span class="arg">Real</span> sectorID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add neutral entities within the territory sector to the egroup </p>
<p>Entities belonging to a squad would not be added to the egroup</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetNumEntities"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetNumEntities( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of spawned entities in the entire world (use sparingly and never at runtime) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetNumEntitiesNearPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetNumEntitiesNearPoint( <span class="arg">EntityBlueprint</span> ebp, <span class="arg">Position</span> pos, <span class="arg">Real</span> radius )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return the number of entities of the same ebp in the sphere volume </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetNumStrategicPoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetNumStrategicPoints( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of strategic points on this map (does not count strat. objectives) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetNumVictoryPoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetNumVictoryPoints( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of strategic objectives on this map </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetOffsetPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		World_GetOffsetPosition( <span class="arg">Position</span> position, <span class="arg">Position</span> heading, <span class="arg">Real</span> offset, <span class="arg">Real</span> distance )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a position that is offset a certain distance from the position/heading passed in. see LuaConsts.scar for explanation of 'offset' parameter. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetPlayerAt"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">PlayerID</span> 
		World_GetPlayerAt( <span class="arg">Real</span> index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>- Returns the player at a given index, numbers start at one </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetPlayerCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetPlayerCount( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return the total number of players in the world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetPlayerIndex"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetPlayerIndex( <span class="arg">PlayerID</span> player )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>- Returns the player index given the Player* </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetPossibleBuildingsBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">EntityBlueprint</span> 
		World_GetPossibleBuildingsBlueprint( <span class="arg">Real</span> race_index, <span class="arg">Real</span> building_index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the blueprint of a chosen building for a race </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetPossibleBuildingsCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetPossibleBuildingsCount( <span class="arg">Real</span> race_index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of types of buildings a race can build </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetPossibleSquadsBlueprint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">SquadBlueprint</span> 
		World_GetPossibleSquadsBlueprint( <span class="arg">Real</span> race_index, <span class="arg">Real</span> squad_index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the blueprint of a chosen squad for a race </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetPossibleSquadsCount"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetPossibleSquadsCount( <span class="arg">Real</span> race_index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the number of types of squads a race can build </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetRaceIndex"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetRaceIndex( <span class="arg">String</span> racename )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the race index of a race, given its name (from the ME). </p>
<p>Valid race names for COH are "allies" and "axis"</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetRand"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetRand( <span class="arg">Real</span> min, <span class="arg">Real</span> max )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns a random Real with range [min, max] </p>
<p>It is recomended you use this instead of luas math.random function</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetSpawnablePosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		World_GetSpawnablePosition( <span class="arg">Position</span> around, <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Given any position in the world, this function will return position safe for spawning a given entity </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetSquadsNearMarker"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetSquadsNearMarker( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">MarkerID</span> marker, <span class="arg">Real</span> ownerType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add squads near the marker to the sgroup </p>
<p>This function is faster if radius is small and/or number of squads to search for is large</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetSquadsNearPoint"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetSquadsNearPoint( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Position</span> pos, <span class="arg">Real</span> radius, <span class="arg">Real</span> ownerType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add squads near the point to the sgroup </p>
<p>This function is faster if radius is small and/or number of squads to search for is large</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetSquadsWithinTerritorySector"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetSquadsWithinTerritorySector( <span class="arg">PlayerID</span> player, <span class="arg">SGroupID</span> sgroup, <span class="arg">Real</span> sectorID, <span class="arg">Real</span> ownerType )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find and add squads within territory sector identified by sector ID </p>
<p>Owner type could be OT_Player, OT_Ally, OT_Enemy or OT_Neutral</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetTeamsSuppliedTerritoryArea"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetTeamsSuppliedTerritoryArea( <span class="arg">Real</span> team_index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the area in square meters of supplied territory this team has </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetTeamSuppliedTerritoryPercentage"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetTeamSuppliedTerritoryPercentage( <span class="arg">Real</span> team_index )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the percentage (0-1) of supplied territory this team has </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetTeamTerritoryGaps"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_GetTeamTerritoryGaps( <span class="arg">Real</span> sectorid1, <span class="arg">Real</span> sectorid2, <span class="arg">LuaBinding::StackVarTable</span> results )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns one or more sector IDs that would connect two unconnected pieces of territory. return value is through a table (since there can be more than one way to connect territory) - each entry in this table is a table of sector IDs. </p>
<p>Currently only finds single gaps - i.e. if two territories are 'almost' connected.</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetTerritorySectorID"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetTerritorySectorID( <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Return the sector ID from the position </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetTerritorySectorPosition"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		World_GetTerritorySectorPosition( <span class="arg">Real</span> sectorID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the position of a sector based on the capture entity (ex: the fuel point's position) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_GetWidth"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Real</span> 
		World_GetWidth( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns the total playable width of the game world (x coordinate) </p>
<p>Since the center of the map is 0,0 the world x range is (-w/2 -&gt; w/2)</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_IsGameOver"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_IsGameOver( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>- to document </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_IsInSupply"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_IsInSupply( <span class="arg">PlayerID</span> player, <span class="arg">Position</span> pos )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if position is in-supply for the given player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_IsPointInPlayerTerritory"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_IsPointInPlayerTerritory( <span class="arg">PlayerID</span> player, <span class="arg">Position</span> position )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if position if part of the entity territory </p>
<p>Note that this does not care if territory is in supply or not</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_IsTerritorySectorOwnedByPlayer"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_IsTerritorySectorOwnedByPlayer( <span class="arg">PlayerID</span> player, <span class="arg">Real</span> sectorID )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Find if player has ownership to this territory sector. </p>
<p>Other players on the same team would also have the ownership to the sector</p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_OwnsEGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_OwnsEGroup( <span class="arg">EGroupID</span> egroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether ANY or ALL of the entities in the group are owned by the world (i.e. neutral) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_OwnsEntity"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_OwnsEntity( <span class="arg">EntityID</span> entity )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad is owned by the world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_OwnsSGroup"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_OwnsSGroup( <span class="arg">SGroupID</span> sgroup, <span class="arg">Boolean</span> all )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns whether ANY or ALL of the squads in the group are owned by the world (i.e. neutral) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_OwnsSquad"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_OwnsSquad( <span class="arg">SquadID</span> squad )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the squad is owned by the world </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_PointPointProx"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_PointPointProx( <span class="arg">Position</span> p1, <span class="arg">Position</span> p2, <span class="arg">Real</span> prox )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if two world positions are in proximity to each other </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_Pos"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Position</span> 
		World_Pos( <span class="arg">Real</span> x, <span class="arg">Real</span> y, <span class="arg">Real</span> z )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Creates a new Position object. </p>
<p>  A position object is basically a table with an x, y, and z attribute.  You can directly access the individual components in the same way that you would access a field in a table.<br><br>  Example:<br>   --* lua script snip<br>   local pos = World_Pos(2, 0, 0)<br>   pos.x = pos.x + 1<br>   print pos.x -- this will print 3<br>   --* lua script snip<br></p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_RemoveAllResourcePoints"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_RemoveAllResourcePoints( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Removes all resource and strategic points but not entities with a supply ext NOTE: this could eventually be written as - RemoveAllOfType( type ) which would be more flexible. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_SetDesignerSupply"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_SetDesignerSupply( <span class="arg">Position</span> point, <span class="arg">Boolean</span> bSupply )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets a particular sector in the world as a supply provider (or not) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_SetGameOver"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_SetGameOver( <span class="arg">Void</span>  )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>- to document </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_SetPlayerLose"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_SetPlayerLose( <span class="arg">PlayerID</span> player, <span class="arg">String</span> identifier, <span class="arg">Boolean</span> endgame )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the player to a lose state, with a reason for losing, and kills the player </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_SetPlayerWin"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_SetPlayerWin( <span class="arg">PlayerID</span> player, <span class="arg">String</span> identifier )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets the player and all the members allied to player to a win state, with a reason for winning. Also sets all other players to a lose state, and kills them (if they're not already dead) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_SetTeamWin"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Void</span> 
		World_SetTeamWin( <span class="arg">Real</span> team, <span class="arg">String</span> identifier )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Sets every player on a team to a win state, with a reason for winning. Also sets all other players to a lose state, and kills them (if they're not already dead) </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p><a name="World_TeamTerritoryPointsConnected"></a><p>
<table width="100%" border="0">
<tr><td colspan="2"><span class="function"><span class="arg">Boolean</span> 
		World_TeamTerritoryPointsConnected( <span class="arg">Real</span> team_index, <span class="arg">Position</span> p1, <span class="arg">Position</span> p2 )
	</span></td></tr>
<tr>
<td width="3%"> </td>
<td>
<p>Returns true if the two points are in the same territory region, and owned by the specified territory team, Returns false otherwise. </p>
</td>
</tr>
<tr>
<td width="3%"> </td>
<td>
</td>
</tr>
</table>
</p>
</p>
<p> </p><p> </p>
</p>
</body>
</html>
